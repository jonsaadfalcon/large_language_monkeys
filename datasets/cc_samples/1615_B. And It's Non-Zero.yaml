prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nWe have N strings\
  \ of lowercase English letters: S_1, S_2, \\cdots, S_N.\n\nTakahashi wants to make\
  \ a string that is a palindrome by choosing one or more of these strings - the same\
  \ string can be chosen more than once - and concatenating them in some order of\
  \ his choice.\n\nThe cost of using the string S_i once is C_i, and the cost of using\
  \ it multiple times is C_i multiplied by that number of times.\n\nFind the minimum\
  \ total cost needed to choose strings so that Takahashi can make a palindrome.\n\
  \nIf there is no choice of strings in which he can make a palindrome, print -1.\n\
  \nConstraints\n\n* 1 \\leq N \\leq 50\n* 1 \\leq |S_i| \\leq 20\n* S_i consists\
  \ of lowercase English letters.\n* 1 \\leq C_i \\leq 10^9\n\nInput\n\nInput is given\
  \ from Standard Input in the following format:\n\n\nN\nS_1 C_1\nS_2 C_2\n:\nS_N\
  \ C_N\n\n\nOutput\n\nPrint the minimum total cost needed to choose strings so that\
  \ Takahashi can make a palindrome, or -1 if there is no such choice.\n\nExamples\n\
  \nInput\n\n3\nba 3\nabc 4\ncbaa 5\n\n\nOutput\n\n7\n\n\nInput\n\n2\nabcab 5\ncba\
  \ 3\n\n\nOutput\n\n11\n\n\nInput\n\n4\nab 5\ncba 3\na 12\nab 10\n\n\nOutput\n\n\
  8\n\n\nInput\n\n2\nabc 1\nab 2\n\n\nOutput\n\n-1\nA: ```from collections import\
  \ defaultdict\nfrom heapq import heappush, heappop, heapify\ndef main():\n    N\
  \ = int(input())\n    SC = []\n    SCrev = []\n    for _ in range(N):\n        s,\
  \ c = input().split()\n        c = int(c)\n        SC.append((s, c))\n        SCrev.append((s[::-1],\
  \ c))\n    dist = defaultdict(lambda: 10**18)\n    q = [(c, s, \"\") for s, c in\
  \ SC] + [(c, \"\", s) for s, c in SCrev]\n    for c, l, r in q:\n        dist[(l,\
  \ r)] = min(dist[(l, r)], c)\n    heapify(q)\n    while q:\n        dist_v, vl,\
  \ vr = heappop(q)\n        if (vl == vr == \"\") or (len(vl) and vl == vl[::-1])\
  \ or (len(vr) and vr == vr[::-1]):\n            print(dist_v)\n            exit()\n\
  \        if dist[(vl, vr)] != dist_v:\n            continue\n        if len(vl)\
  \ < len(vr):\n            for s, c in SC:\n                if len(s) <= len(vr):\n\
  \                    if vr.startswith(s):\n                        vr_ = vr[len(s):]\n\
  \                        dist_u = dist_v + c\n                        if dist_u\
  \ < dist[(\"\", vr_)]:\n                            dist[(\"\", vr_)] = dist_u\n\
  \                            heappush(q, (dist_v+c, \"\", vr_))\n              \
  \  else:\n                    if s.startswith(vr):\n                        vl_\
  \ = s[len(vr):]\n                        dist_u = dist_v + c\n                 \
  \       if dist_u < dist[(vl_, \"\")]:\n                            dist[(vl_, \"\
  \")] = dist_u\n                            heappush(q, (dist_v+c, vl_, \"\"))\n\
  \        else:\n            for s, c in SCrev:\n                if len(s) <= len(vl):\n\
  \                    if vl.startswith(s):\n                        vl_ = vl[len(s):]\n\
  \                        dist_u = dist_v + c\n                        if dist_u\
  \ < dist[(vl_, \"\")]:\n                            dist[(vl_, \"\")] = dist_u\n\
  \                            heappush(q, (dist_v+c, vl_, \"\"))\n              \
  \  else:\n                    if s.startswith(vl):\n                        vr_\
  \ = s[len(vl):]\n                        dist_u = dist_v + c\n                 \
  \       if dist_u < dist[(\"\", vr_)]:\n                            dist[(\"\",\
  \ vr_)] = dist_u\n                            heappush(q, (dist_v+c, \"\", vr_))\n\
  \    print(-1)\n\nmain()```\nQ: Write python code to solve the following coding\
  \ problem that obeys the constraints and passes the example test cases. The output\
  \ code needs to read from and write to standard IO. Please wrap your code answer\
  \ using ```:\nAlice and Bob like games. And now they are ready to start a new game.\
  \ They have placed n chocolate bars in a line. Alice starts to eat chocolate bars\
  \ one by one from left to right, and Bob \u2014 from right to left. For each chocololate\
  \ bar the time, needed for the player to consume it, is known (Alice and Bob eat\
  \ them with equal speed). When the player consumes a chocolate bar, he immediately\
  \ starts with another. It is not allowed to eat two chocolate bars at the same time,\
  \ to leave the bar unfinished and to make pauses. If both players start to eat the\
  \ same bar simultaneously, Bob leaves it to Alice as a true gentleman.\n\nHow many\
  \ bars each of the players will consume?\n\nInput\n\nThe first line contains one\
  \ integer n (1 \u2264 n \u2264 105) \u2014 the amount of bars on the table. The\
  \ second line contains a sequence t1, t2, ..., tn (1 \u2264 ti \u2264 1000), where\
  \ ti is the time (in seconds) needed to consume the i-th bar (in the order from\
  \ left to right).\n\nOutput\n\nPrint two numbers a and b, where a is the amount\
  \ of bars consumed by Alice, and b is the amount of bars consumed by Bob.\n\nExamples\n\
  \nInput\n\n5\n2 9 8 2 7\n\n\nOutput\n\n2 3\nA: ```n=int(input())\n*l,=map(int,input().split())\n\
  a=b=i=0\nj=n-1\nwhile i<=j:\n    if a<=b:a+=l[i];i+=1\n    else:b+=l[j];j-=1\nprint(i,n-i)\n\
  #hello```\nQ: Write python code to solve the following coding problem that obeys\
  \ the constraints and passes the example test cases. The output code needs to read\
  \ from and write to standard IO. Please wrap your code answer using ```:\nYou are\
  \ given an array consisting of all integers from [l, r] inclusive. For example,\
  \ if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number\
  \ of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND)\
  \ of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length\
  \ binary representations and performs the AND operation on each pair of the corresponding\
  \ bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4)\
  \ \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each\
  \ test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22C5 10^5)\
  \ \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a\
  \ single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n\
  1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\n\
  In the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as\
  \ 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or\
  \ [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal,\
  \ so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7,\
  \ 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the\
  \ array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven\
  \ to be the optimal, so the answer is 3. Note that there may be other ways to delete\
  \ 3 elements.\nA:"
question: "You are given an array consisting of all integers from [l, r] inclusive.\
  \ For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum\
  \ number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND)\
  \ of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length\
  \ binary representations and performs the AND operation on each pair of the corresponding\
  \ bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4)\
  \ \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each\
  \ test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22C5 10^5)\
  \ \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a\
  \ single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n\
  1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\n\
  In the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as\
  \ 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or\
  \ [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal,\
  \ so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7,\
  \ 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the\
  \ array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven\
  \ to be the optimal, so the answer is 3. Note that there may be other ways to delete\
  \ 3 elements."
samples:
- " ```t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n\
  \    res = 0\n    for i in range(l, r+1):\n        if (i & (i-1)) == 0:\n      \
  \      res += 1\n    print(res)\n````\nQ:"
- " ```t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n\
  \    arr = [i for i in range(l, r+1)]\n    and_val = 0\n    for i in range(l, r+1):\n\
  \        and_val |= i\n    res = 0\n    for i in range(l, r+1):\n        and_val\
  \ ^= i\n        res += bin(and_val).count('1')\n    print(res)\n#hello```\nQ:"
test_cases:
  input:
  - '5

    1 2

    2 8

    4 5

    1 5

    100000 200000

    '
  - '5

    1 2

    2 8

    4 5

    2 5

    100000 200000

    '
  - '5

    1 2

    2 8

    4 5

    4 5

    100000 200000

    '
  - '5

    1 2

    2 10

    4 5

    1 5

    100000 200000

    '
  - '5

    2 2

    2 8

    4 5

    2 5

    100000 200000

    '
  - '5

    1 2

    2 8

    4 5

    4 5

    110000 200000

    '
  - '5

    2 2

    2 8

    4 5

    2 5

    100100 200000

    '
  - '5

    1 2

    2 8

    4 5

    4 10

    110000 200000

    '
  - '5

    1 2

    2 8

    4 5

    1 5

    100001 200000

    '
  - '5

    1 2

    2 8

    4 5

    4 5

    100000 104325

    '
  - '5

    2 2

    2 8

    1 5

    2 5

    100000 200000

    '
  - '5

    1 2

    2 8

    4 5

    4 12

    110000 200000

    '
  - '5

    2 2

    2 8

    3 6

    2 5

    100100 200000

    '
  - '5

    1 2

    2 8

    4 9

    1 5

    100000 200000

    '
  - '5

    2 2

    2 12

    1 5

    2 5

    100000 200000

    '
  - '5

    1 4

    2 8

    4 6

    4 5

    110000 200000

    '
  - '5

    2 4

    2 8

    4 5

    2 7

    100100 200000

    '
  - '5

    2 2

    2 8

    3 6

    2 5

    101100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 5

    100000 200000

    '
  - '5

    2 4

    2 7

    4 5

    2 7

    100100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 5

    101000 200000

    '
  - '5

    1 2

    2 7

    7 9

    1 5

    101000 200000

    '
  - '5

    2 4

    1 8

    4 5

    2 7

    100100 200000

    '
  - '5

    1 2

    2 7

    7 9

    1 5

    101100 200000

    '
  - '5

    1 2

    2 8

    4 5

    3 5

    100000 200000

    '
  - '5

    2 2

    2 8

    4 5

    4 5

    100000 200000

    '
  - '5

    1 2

    2 10

    4 5

    1 1

    100000 200000

    '
  - '5

    2 2

    2 8

    4 5

    4 5

    110000 200000

    '
  - '5

    2 2

    2 16

    4 5

    2 5

    100100 200000

    '
  - '5

    1 2

    2 7

    4 5

    4 10

    110000 200000

    '
  - '5

    2 2

    2 7

    4 6

    2 5

    100100 200000

    '
  - '5

    2 2

    2 8

    1 5

    4 5

    100000 200000

    '
  - '5

    1 2

    2 8

    4 6

    4 5

    110001 200000

    '
  - '5

    2 2

    2 8

    4 5

    2 7

    100110 200000

    '
  - '5

    1 2

    2 8

    4 5

    7 12

    110000 200000

    '
  - '5

    2 2

    2 8

    3 6

    2 4

    100100 200000

    '
  - '5

    1 2

    2 8

    3 9

    1 5

    100000 200000

    '
  - '5

    1 4

    2 8

    4 6

    4 5

    010000 200000

    '
  - '5

    1 2

    2 4

    4 5

    4 13

    110000 200000

    '
  - '5

    2 2

    1 8

    3 6

    2 5

    101100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 10

    100000 200000

    '
  - '5

    1 4

    1 7

    4 5

    2 7

    100100 200000

    '
  - '5

    1 4

    1 8

    4 5

    2 7

    100100 200000

    '
  - '5

    2 4

    2 5

    4 5

    2 7

    100100 123776

    '
  - '5

    1 2

    2 7

    4 5

    6 10

    110000 200000

    '
  - '5

    2 2

    2 8

    1 6

    4 5

    100000 200000

    '
  - '5

    2 2

    2 9

    4 5

    2 7

    100110 200000

    '
  - '5

    2 2

    2 8

    3 6

    2 4

    100101 200000

    '
  - '5

    2 2

    1 1

    3 6

    2 5

    101100 200000

    '
  - '5

    1 2

    1 8

    7 9

    1 10

    100000 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 5

    101010 188450

    '
  - '5

    1 2

    2 7

    4 5

    6 20

    110000 200000

    '
  - '5

    2 2

    2 8

    1 2

    4 5

    100000 200000

    '
  - '5

    2 2

    2 5

    3 6

    2 4

    100101 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 5

    101011 188450

    '
  - '5

    1 2

    1 3

    7 9

    1 5

    101000 200000

    '
  - '5

    1 2

    2 8

    3 9

    1 5

    101011 188450

    '
  - '5

    1 2

    1 3

    7 9

    1 5

    101001 200000

    '
  - '5

    1 1

    1 8

    7 10

    1 10

    100000 186611

    '
  - '5

    1 2

    2 8

    3 9

    1 2

    101011 188450

    '
  - '5

    1 2

    1 3

    7 9

    1 7

    101001 200000

    '
  - '5

    1 4

    1 3

    7 9

    1 7

    101001 200000

    '
  - '5

    1 4

    1 3

    7 9

    1 7

    111001 200000

    '
  - '5

    1 4

    1 6

    7 9

    1 7

    111001 200000

    '
  - '5

    1 4

    2 6

    7 9

    1 7

    111001 200000

    '
  - '5

    2 4

    3 6

    7 9

    1 7

    111001 200000

    '
  - '5

    2 8

    3 6

    7 9

    1 7

    111001 200000

    '
  - '5

    1 2

    2 8

    4 5

    4 4

    100001 200000

    '
  - '5

    2 2

    2 8

    4 5

    2 5

    100000 101573

    '
  - '5

    1 2

    2 4

    4 5

    4 5

    110000 200000

    '
  - '5

    1 2

    1 8

    4 5

    4 10

    110000 200000

    '
  - '5

    2 2

    2 14

    4 6

    2 5

    100100 200000

    '
  - '5

    1 2

    4 8

    4 5

    1 5

    100000 200000

    '
  - '5

    2 2

    2 8

    1 5

    2 5

    100000 161404

    '
  - '5

    1 2

    2 8

    3 6

    4 5

    110000 200000

    '
  - '5

    2 4

    2 8

    4 5

    2 10

    100100 200000

    '
  - '5

    1 1

    2 8

    4 5

    4 12

    110000 200000

    '
  - '5

    2 2

    2 8

    3 6

    2 5

    100101 200000

    '
  - '5

    1 1

    2 8

    7 9

    1 5

    100000 200000

    '
  - '5

    1 4

    2 8

    4 11

    4 5

    110000 200000

    '
  - '5

    2 4

    2 8

    4 5

    2 7

    100101 200000

    '
  - '5

    1 2

    2 8

    2 5

    4 13

    110000 200000

    '
  - '5

    2 2

    2 8

    3 11

    2 5

    101100 200000

    '
  - '5

    1 2

    2 13

    7 9

    1 5

    100000 200000

    '
  - '5

    2 4

    2 7

    4 5

    2 7

    000100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 5

    101000 135172

    '
  - '5

    1 2

    2 7

    7 9

    1 5

    100000 200000

    '
  - '5

    1 4

    2 7

    7 9

    1 5

    101100 200000

    '
  - '5

    2 2

    2 10

    4 5

    4 5

    100000 200000

    '
  - '5

    2 4

    2 16

    4 5

    2 5

    100100 200000

    '
  - '5

    1 3

    2 2

    4 6

    2 5

    100000 200000

    '
  - '5

    2 2

    1 8

    1 5

    4 5

    100000 200000

    '
  - '5

    2 2

    2 8

    3 6

    4 4

    100100 200000

    '
  - '5

    1 2

    2 8

    3 9

    1 8

    100000 200000

    '
  - '5

    1 4

    2 8

    4 6

    4 5

    010001 200000

    '
  - '5

    2 2

    1 15

    3 6

    2 5

    101100 200000

    '
  - '5

    1 4

    1 8

    4 5

    4 7

    100100 200000

    '
  - '5

    4 4

    2 5

    4 5

    2 7

    100100 123776

    '
  - '5

    1 2

    3 7

    4 5

    6 10

    110000 200000

    '
  - '5

    2 2

    2 7

    4 6

    2 11

    100100 200000

    '
  - '5

    2 2

    2 9

    4 5

    2 3

    100110 200000

    '
  - '5

    2 2

    2 10

    3 6

    2 4

    100101 200000

    '
  - '5

    1 2

    2 7

    4 5

    6 20

    100000 200000

    '
  - '5

    2 2

    2 5

    3 6

    2 4

    100101 108244

    '
  - '5

    2 3

    1 1

    3 6

    2 5

    111100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 10

    101011 188450

    '
  - '5

    1 2

    1 3

    7 9

    1 14

    101001 200000

    '
  - '5

    1 4

    1 3

    7 9

    1 7

    110001 200000

    '
  - '5

    1 4

    3 6

    7 9

    1 13

    111001 200000

    '
  - '5

    1 2

    2 13

    4 5

    1 2

    100000 200000

    '
  - '5

    2 2

    2 8

    3 5

    2 5

    100000 101573

    '
  - '5

    1 2

    1 13

    4 5

    4 10

    110000 200000

    '
  - '5

    2 2

    2 14

    4 6

    2 5

    100100 138386

    '
  - '5

    1 2

    2 8

    3 8

    4 5

    110000 200000

    '
  - '5

    2 2

    2 2

    3 6

    2 5

    100101 200000

    '
  - '5

    1 4

    2 5

    4 11

    4 5

    110000 200000

    '
  - '5

    1 4

    2 8

    4 5

    2 7

    100101 200000

    '
  - '5

    2 2

    1 8

    3 11

    2 5

    101100 200000

    '
  - '5

    2 4

    2 7

    4 5

    1 7

    000100 200000

    '
  - '5

    1 2

    2 4

    7 9

    1 5

    101000 135172

    '
  - '5

    1 2

    2 7

    7 9

    1 5

    100001 200000

    '
  - '5

    2 2

    2 8

    2 4

    4 5

    110000 200000

    '
  - '5

    2 4

    1 16

    4 5

    2 5

    100100 200000

    '
  - '5

    2 2

    1 8

    1 5

    4 5

    100000 150693

    '
  - '5

    1 2

    2 8

    3 5

    4 5

    110001 200000

    '
  - '5

    1 3

    2 8

    4 5

    2 12

    110000 200000

    '
  - '5

    1 2

    2 8

    3 9

    1 8

    100010 200000

    '
  - '5

    1 1

    2 4

    4 5

    4 15

    110000 200000

    '
  - '5

    1 4

    1 8

    4 5

    3 7

    100100 200000

    '
  - '5

    2 2

    3 7

    4 5

    6 10

    110000 200000

    '
  - '5

    2 3

    2 8

    1 6

    4 5

    100100 200000

    '
  - '5

    2 2

    2 9

    4 5

    2 3

    101110 200000

    '
  - '5

    1 2

    4 8

    7 9

    2 5

    101011 188450

    '
  - '5

    1 2

    4 7

    4 5

    6 20

    100000 200000

    '
  - '5

    2 3

    1 2

    3 6

    2 5

    111100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 10

    101010 188450

    '
  - '5

    1 4

    1 3

    7 15

    1 5

    101000 200000

    '
  - '5

    1 1

    1 8

    7 8

    1 10

    100010 186611

    '
  - '5

    1 2

    1 4

    7 9

    1 14

    101001 200000

    '
  - '5

    1 4

    1 3

    9 9

    1 7

    110001 200000

    '
  - '5

    1 4

    1 8

    7 9

    1 7

    111001 200000

    '
  - '5

    1 4

    3 6

    7 9

    1 9

    111001 200000

    '
  - '5

    2 3

    1 8

    4 5

    2 5

    100100 185068

    '
  - '5

    1 2

    1 13

    4 5

    1 10

    110000 200000

    '
  - '5

    2 2

    2 14

    4 6

    2 5

    000100 138386

    '
  - '5

    1 2

    2 14

    3 8

    4 5

    110000 200000

    '
  - '5

    1 2

    2 5

    4 11

    4 5

    110000 200000

    '
  - '5

    1 4

    2 5

    4 5

    2 7

    100101 200000

    '
  - '5

    1 2

    2 7

    7 9

    1 8

    100001 200000

    '
  - '5

    2 2

    2 3

    2 4

    4 5

    110000 200000

    '
  - '5

    1 2

    2 8

    3 9

    1 14

    100010 200000

    '
  - '5

    1 1

    2 5

    4 5

    4 15

    110000 200000

    '
  - '5

    2 2

    3 9

    4 5

    6 10

    110000 200000

    '
  - '5

    1 2

    4 8

    7 9

    3 5

    101011 188450

    '
  - '5

    1 4

    4 7

    4 5

    6 20

    100000 200000

    '
  - '5

    2 3

    1 2

    1 6

    2 5

    111100 200000

    '
  - '5

    1 1

    1 8

    7 8

    2 10

    100010 186611

    '
  - '5

    1 2

    1 4

    7 9

    1 14

    100001 200000

    '
  - '5

    1 4

    1 3

    9 9

    2 7

    110001 200000

    '
  - '5

    1 4

    1 8

    7 9

    1 2

    111001 200000

    '
  - '5

    1 2

    3 14

    3 8

    4 5

    110000 200000

    '
  - '5

    1 4

    2 5

    4 5

    2 8

    100101 200000

    '
  - '5

    1 2

    2 12

    7 9

    1 8

    100001 200000

    '
  - '5

    2 2

    2 3

    2 4

    4 5

    110100 200000

    '
  - '5

    1 1

    4 5

    4 5

    4 15

    110000 200000

    '
  - '5

    1 4

    1 16

    4 7

    3 7

    100100 200000

    '
  - '5

    1 2

    3 9

    4 5

    6 10

    110000 200000

    '
  - '5

    2 3

    1 2

    1 6

    2 5

    101100 200000

    '
  - '5

    1 4

    1 3

    9 9

    2 7

    111001 200000

    '
  - '5

    1 4

    1 5

    7 9

    1 2

    111001 200000

    '
  - '5

    2 2

    2 5

    3 5

    2 5

    101000 129464

    '
  - '5

    1 2

    2 12

    4 9

    1 8

    100001 200000

    '
  - '5

    2 2

    2 3

    2 8

    4 5

    110100 200000

    '
  - '5

    1 2

    4 8

    3 5

    4 7

    110001 200000

    '
  - '5

    2 3

    2 8

    3 5

    4 12

    110000 200000

    '
  - '5

    1 1

    4 5

    4 5

    4 15

    110010 200000

    '
  - '5

    1 1

    1 8

    7 14

    2 16

    100010 186611

    '
  - '5

    1 6

    1 5

    7 9

    1 2

    111001 200000

    '
  - '5

    2 2

    2 5

    3 9

    2 5

    101000 129464

    '
  - '5

    1 1

    2 12

    4 9

    1 8

    100001 200000

    '
  - '5

    1 2

    4 8

    3 5

    1 7

    110001 200000

    '
  - '5

    2 3

    2 8

    3 5

    4 12

    010000 200000

    '
  - '5

    2 3

    1 3

    1 6

    2 8

    101100 200000

    '
  - '5

    1 1

    1 8

    6 14

    2 16

    100010 186611

    '
  - '5

    1 6

    1 10

    7 9

    1 2

    111001 200000

    '
  - '5

    1 1

    2 12

    4 13

    1 8

    100001 200000

    '
  - '5

    1 2

    4 4

    3 5

    1 7

    110001 200000

    '
  - '5

    2 3

    1 5

    1 6

    2 8

    101100 200000

    '
  - '5

    1 6

    1 10

    9 9

    1 2

    111001 200000

    '
  - '5

    1 1

    2 12

    4 13

    1 8

    100000 200000

    '
  - '5

    1 2

    4 4

    3 8

    1 7

    110001 200000

    '
  - '5

    1 2

    4 4

    3 8

    2 7

    110001 200000

    '
  - '5

    2 3

    2 5

    1 6

    2 8

    101101 200000

    '
  - '5

    1 2

    2 10

    4 5

    1 5

    100000 121445

    '
  - '5

    1 2

    2 8

    4 5

    4 5

    110010 200000

    '
  - '5

    1 2

    2 10

    4 5

    4 12

    110000 200000

    '
  - '5

    2 2

    4 8

    3 6

    2 5

    100100 200000

    '
  - '5

    2 2

    2 7

    1 5

    2 5

    100000 200000

    '
  - '5

    2 4

    2 7

    4 5

    2 13

    100100 200000

    '
  - '5

    1 2

    2 8

    7 9

    1 1

    101000 200000

    '
  - '5

    1 2

    2 7

    7 9

    1 5

    111100 200000

    '
  output:
  - '1

    3

    0

    2

    31072

    '
  - '1

    3

    0

    2

    31072

    '
  - '1

    3

    0

    0

    31072

    '
  - '1

    4

    0

    2

    31072

    '
  - '0

    3

    0

    2

    31072

    '
  - '1

    3

    0

    0

    21072

    '
  - '0

    3

    0

    2

    30972

    '
  - '1

    3

    0

    3

    21072

    '
  - '1

    3

    0

    2

    31071

    '
  - '1

    3

    0

    0

    0

    '
  - '0

    3

    2

    2

    31072

    '
  - '1

    3

    0

    4

    21072

    '
  - '0

    3

    1

    2

    30972

    '
  - '1

    3

    2

    2

    31072

    '
  - '0

    5

    2

    2

    31072

    '
  - '2

    3

    0

    0

    21072

    '
  - '1

    3

    0

    2

    30972

    '
  - '0

    3

    1

    2

    29972

    '
  - '1

    3

    1

    2

    31072

    '
  - '1

    2

    0

    2

    30972

    '
  - '1

    3

    1

    2

    30072

    '
  - '1

    2

    1

    2

    30072

    '
  - '1

    4

    0

    2

    30972

    '
  - '1

    2

    1

    2

    29972

    '
  - '1

    3

    0

    1

    31072

    '
  - '0

    3

    0

    0

    31072

    '
  - '1

    4

    0

    0

    31072

    '
  - '0

    3

    0

    0

    21072

    '
  - '0

    7

    0

    2

    30972

    '
  - '1

    2

    0

    3

    21072

    '
  - '0

    2

    0

    2

    30972

    '
  - '0

    3

    2

    0

    31072

    '
  - '1

    3

    0

    0

    21071

    '
  - '0

    3

    0

    2

    30962

    '
  - '1

    3

    0

    1

    21072

    '
  - '0

    3

    1

    1

    30972

    '
  - '1

    3

    3

    2

    31072

    '
  - '2

    3

    0

    0

    91697

    '
  - '1

    1

    0

    4

    21072

    '
  - '0

    4

    1

    2

    29972

    '
  - '1

    3

    1

    5

    31072

    '
  - '2

    3

    0

    2

    30972

    '
  - '2

    4

    0

    2

    30972

    '
  - '1

    2

    0

    2

    0

    '
  - '1

    2

    0

    2

    21072

    '
  - '0

    3

    3

    0

    31072

    '
  - '0

    4

    0

    2

    30962

    '
  - '0

    3

    1

    1

    30971

    '
  - '0

    0

    1

    2

    29972

    '
  - '1

    4

    1

    5

    31072

    '
  - '1

    3

    1

    2

    30062

    '
  - '1

    2

    0

    7

    21072

    '
  - '0

    3

    1

    0

    31072

    '
  - '0

    2

    1

    1

    30971

    '
  - '1

    3

    1

    2

    30061

    '
  - '1

    1

    1

    2

    30072

    '
  - '1

    3

    3

    2

    30061

    '
  - '1

    1

    1

    2

    30071

    '
  - '0

    4

    1

    5

    31072

    '
  - '1

    3

    3

    1

    30061

    '
  - '1

    1

    1

    3

    30071

    '
  - '2

    1

    1

    3

    30071

    '
  - '2

    1

    1

    3

    20071

    '
  - '2

    3

    1

    3

    20071

    '
  - '2

    2

    1

    3

    20071

    '
  - '1

    1

    1

    3

    20071

    '
  - '3

    1

    1

    3

    20071

    '
  - '1

    3

    0

    0

    31071

    '
  - '0

    3

    0

    2

    0

    '
  - '1

    1

    0

    0

    21072

    '
  - '1

    4

    0

    3

    21072

    '
  - '0

    6

    0

    2

    30972

    '
  - '1

    1

    0

    2

    31072

    '
  - '0

    3

    2

    2

    30333

    '
  - '1

    3

    1

    0

    21072

    '
  - '1

    3

    0

    4

    30972

    '
  - '0

    3

    0

    4

    21072

    '
  - '0

    3

    1

    2

    30971

    '
  - '0

    3

    1

    2

    31072

    '
  - '2

    3

    4

    0

    21072

    '
  - '1

    3

    0

    2

    30971

    '
  - '1

    3

    2

    4

    21072

    '
  - '0

    3

    4

    2

    29972

    '
  - '1

    6

    1

    2

    31072

    '
  - '1

    2

    0

    2

    99933

    '
  - '1

    3

    1

    2

    4101

    '
  - '1

    2

    1

    2

    31072

    '
  - '2

    2

    1

    2

    29972

    '
  - '0

    4

    0

    0

    31072

    '
  - '1

    7

    0

    2

    30972

    '
  - '1

    0

    0

    2

    31072

    '
  - '0

    4

    2

    0

    31072

    '
  - '0

    3

    1

    0

    30972

    '
  - '1

    3

    3

    4

    31072

    '
  - '2

    3

    0

    0

    91696

    '
  - '0

    7

    1

    2

    29972

    '
  - '2

    4

    0

    0

    30972

    '
  - '0

    2

    0

    2

    0

    '
  - '1

    1

    0

    2

    21072

    '
  - '0

    2

    0

    4

    30972

    '
  - '0

    4

    0

    0

    30962

    '
  - '0

    4

    1

    1

    30971

    '
  - '1

    2

    0

    7

    31072

    '
  - '0

    2

    1

    1

    0

    '
  - '0

    0

    1

    2

    19972

    '
  - '1

    3

    1

    5

    30061

    '
  - '1

    1

    1

    7

    30071

    '
  - '2

    1

    1

    3

    21071

    '
  - '2

    1

    1

    6

    20071

    '
  - '1

    6

    0

    1

    31072

    '
  - '0

    3

    1

    2

    0

    '
  - '1

    6

    0

    3

    21072

    '
  - '0

    6

    0

    2

    7315

    '
  - '1

    3

    2

    0

    21072

    '
  - '0

    0

    1

    2

    30971

    '
  - '2

    2

    4

    0

    21072

    '
  - '2

    3

    0

    2

    30971

    '
  - '0

    4

    4

    2

    29972

    '
  - '1

    2

    0

    3

    99933

    '
  - '1

    1

    1

    2

    4101

    '
  - '1

    2

    1

    2

    31071

    '
  - '0

    3

    1

    0

    21072

    '
  - '1

    8

    0

    2

    30972

    '
  - '0

    4

    2

    0

    19622

    '
  - '1

    3

    1

    0

    21071

    '
  - '1

    3

    0

    5

    21072

    '
  - '1

    3

    3

    4

    31062

    '
  - '0

    1

    0

    4

    21072

    '
  - '2

    4

    0

    1

    30972

    '
  - '0

    1

    0

    2

    21072

    '
  - '0

    3

    3

    0

    30972

    '
  - '0

    4

    0

    0

    29962

    '
  - '1

    1

    1

    2

    30061

    '
  - '1

    0

    0

    7

    31072

    '
  - '0

    1

    1

    2

    19972

    '
  - '1

    3

    1

    5

    30062

    '
  - '2

    1

    1

    2

    30072

    '
  - '0

    4

    1

    5

    31062

    '
  - '1

    2

    1

    7

    30071

    '
  - '2

    1

    0

    3

    21071

    '
  - '2

    4

    1

    3

    20071

    '
  - '2

    1

    1

    4

    20071

    '
  - '0

    4

    0

    2

    30972

    '
  - '1

    6

    0

    5

    21072

    '
  - '0

    6

    0

    2

    69139

    '
  - '1

    6

    2

    0

    21072

    '
  - '1

    2

    4

    0

    21072

    '
  - '2

    2

    0

    2

    30971

    '
  - '1

    2

    1

    4

    31071

    '
  - '0

    0

    1

    0

    21072

    '
  - '1

    3

    3

    7

    31062

    '
  - '0

    2

    0

    4

    21072

    '
  - '0

    3

    0

    2

    21072

    '
  - '1

    1

    1

    1

    30061

    '
  - '2

    0

    0

    7

    31072

    '
  - '0

    1

    3

    2

    19972

    '
  - '0

    4

    1

    4

    31062

    '
  - '1

    2

    1

    7

    31071

    '
  - '2

    1

    0

    2

    21071

    '
  - '2

    4

    1

    1

    20071

    '
  - '1

    5

    2

    0

    21072

    '
  - '2

    2

    0

    3

    30971

    '
  - '1

    5

    1

    4

    31071

    '
  - '0

    0

    1

    0

    20972

    '
  - '0

    0

    0

    4

    21072

    '
  - '2

    8

    0

    1

    30972

    '
  - '1

    3

    0

    2

    21072

    '
  - '0

    1

    3

    2

    29972

    '
  - '2

    1

    0

    2

    20071

    '
  - '2

    2

    1

    1

    20071

    '
  - '0

    2

    1

    2

    0

    '
  - '1

    5

    2

    4

    31071

    '
  - '0

    0

    3

    0

    20972

    '
  - '1

    1

    1

    0

    21071

    '
  - '0

    3

    1

    4

    21072

    '
  - '0

    0

    0

    4

    21062

    '
  - '0

    4

    1

    7

    31062

    '
  - '3

    2

    1

    1

    20071

    '
  - '0

    2

    3

    2

    0

    '
  - '0

    5

    2

    4

    31071

    '
  - '1

    1

    1

    3

    21071

    '
  - '0

    3

    1

    4

    91697

    '
  - '0

    1

    3

    3

    29972

    '
  - '0

    4

    2

    7

    31062

    '
  - '3

    5

    1

    1

    20071

    '
  - '0

    5

    4

    4

    31071

    '
  - '1

    0

    1

    3

    21071

    '
  - '0

    2

    3

    3

    29972

    '
  - '3

    5

    0

    1

    20071

    '
  - '0

    5

    4

    4

    31072

    '
  - '1

    0

    2

    3

    21071

    '
  - '1

    0

    2

    2

    21071

    '
  - '0

    2

    3

    3

    29971

    '
  - '1

    4

    0

    2

    0

    '
  - '1

    3

    0

    0

    21062

    '
  - '1

    4

    0

    4

    21072

    '
  - '0

    1

    1

    2

    30972

    '
  - '0

    2

    2

    2

    31072

    '
  - '1

    2

    0

    6

    30972

    '
  - '1

    3

    1

    0

    30072

    '
  - '1

    2

    1

    2

    19972

    '
timeout: 2.0
