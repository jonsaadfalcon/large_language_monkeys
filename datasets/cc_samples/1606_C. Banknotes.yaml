prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nPolycarp has\
  \ guessed three positive integers a, b and c. He keeps these numbers in secret,\
  \ but he writes down four numbers on a board in arbitrary order \u2014 their pairwise\
  \ sums (three numbers) and sum of all three numbers (one number). So, there are\
  \ four numbers on a board in random order: a+b, a+c, b+c and a+b+c.\n\nYou have\
  \ to guess three numbers a, b and c using given numbers. Print three guessed integers\
  \ in any order.\n\nPay attention that some given numbers a, b and c can be equal\
  \ (it is also possible that a=b=c).\n\nInput\n\nThe only line of the input contains\
  \ four positive integers x_1, x_2, x_3, x_4 (2 \u2264 x_i \u2264 10^9) \u2014 numbers\
  \ written on a board in random order. It is guaranteed that the answer exists for\
  \ the given number x_1, x_2, x_3, x_4.\n\nOutput\n\nPrint such positive integers\
  \ a, b and c that four numbers written on a board are values a+b, a+c, b+c and a+b+c\
  \ written in some order. Print a, b and c in any order. If there are several answers,\
  \ you can print any. It is guaranteed that the answer exists.\n\nExamples\n\nInput\n\
  \n\n3 6 5 4\n\n\nOutput\n\n\n2 1 3\n\n\nInput\n\n\n40 40 40 60\n\n\nOutput\n\n\n\
  20 20 20\n\n\nInput\n\n\n201 101 101 200\n\n\nOutput\n\n\n1 100 100\nA: ```x,y,z,w\
  \ = (int(i) for i in input().split())\ns = (x+y+z+w)//3\nfor i in x,y,z,w:\n   \
  \ temp = s - i\n    if s - i > 0:\n        print(s-i, end=' ')```\nQ: Write python\
  \ code to solve the following coding problem that obeys the constraints and passes\
  \ the example test cases. The output code needs to read from and write to standard\
  \ IO. Please wrap your code answer using ```:\nSlime and his n friends are at a\
  \ party. Slime has designed a game for his friends to play.\n\nAt the beginning\
  \ of the game, the i-th player has a_i biscuits. At each second, Slime will choose\
  \ a biscuit randomly uniformly among all a_1 + a_2 + \u2026 + a_n biscuits, and\
  \ the owner of this biscuit will give it to a random uniform player among n-1 players\
  \ except himself. The game stops when one person will have all the biscuits.\n\n\
  As the host of the party, Slime wants to know the expected value of the time that\
  \ the game will last, to hold the next activity on time.\n\nFor convenience, as\
  \ the answer can be represented as a rational number p/q for coprime p and q, you\
  \ need to find the value of (p \u22C5 q^{-1})mod 998 244 353. You can prove that\
  \ qmod 998 244 353 \u2260 0.\n\nInput\n\nThe first line contains one integer n\\\
  \ (2\u2264 n\u2264 100 000): the number of people playing the game.\n\nThe second\
  \ line contains n non-negative integers a_1,a_2,...,a_n\\ (1\u2264 a_1+a_2+...+a_n\u2264\
  \ 300 000), where a_i represents the number of biscuits the i-th person own at the\
  \ beginning.\n\nOutput\n\nPrint one integer: the expected value of the time that\
  \ the game will last, modulo 998 244 353.\n\nExamples\n\nInput\n\n\n2\n1 1\n\n\n\
  Output\n\n\n1\n\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n5\n0 0 0\
  \ 0 35\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n5\n8 4 2 0 1\n\n\nOutput\n\n\n801604029\n\
  \nNote\n\nFor the first example, in the first second, the probability that player\
  \ 1 will give the player 2 a biscuit is 1/2, and the probability that player 2 will\
  \ give the player 1 a biscuit is 1/2. But anyway, the game will stop after exactly\
  \ 1 second because only one player will occupy all biscuits after 1 second, so the\
  \ answer is 1.\nA: ```import os\nimport sys\ninput = sys.stdin.buffer.readline\n\
  #sys.setrecursionlimit(int(2e5)) \nfrom collections import deque\nimport math\n\
  #  list(map(int, input().split()))\n#####################################################################################\n\
  \nclass CF(object):\n    def __init__(self):\n        self.mod = 998244353\n   \
  \     self.n = int(input())\n        self.a = list(map(int, input().split()))\n\
  \        self.tot = sum(self.a)\n        self.dp = [[0,0] for _ in range(self.tot+1)]\n\
  \n    def inv(self, x):\n        return pow(x, self.mod - 2, self.mod)\n\n    def\
  \ gao(self):\n        self.dp[0] = [0,1]\n        self.dp[1] = [(1-self.n+self.mod)%self.mod,\
  \ 1]\n        for k in range(1, self.tot):\n            temp = self.inv(self.tot-k)\n\
  \            self.dp[k+1][0] = -self.tot*(self.n - 1) - self.dp[k][0] * (2*k - self.tot-\
  \ k*self.n) - self.dp[k-1][0] *k*(self.n-1)\n            self.dp[k+1][0] *= temp\n\
  \            self.dp[k+1][0] = (self.dp[k+1][0] %self.mod+self.mod)%self.mod   \
  \         \n            self.dp[k+1][1] = -self.dp[k][1]*(2*k - self.tot- k*self.n)\
  \ - self.dp[k-1][1]*k*(self.n-1)\n            self.dp[k+1][1] *= temp\n        \
  \    self.dp[k+1][1] = (self.dp[k+1][1] %self.mod+self.mod)%self.mod\n        \n\
  \        alpha = -self.dp[self.tot][0]*self.inv(self.dp[self.tot][1])\n        alpha\
  \ = (alpha%self.mod + self.mod)%self.mod\n        #print(alpha)\n        ans=0\n\
  \        for i in range(self.n):\n            ans += self.dp[self.a[i]][0] + self.dp[self.a[i]][1]\
  \ * alpha\n            ans = (ans%self.mod+self.mod)%self.mod\n        ans -= alpha\
  \ * (self.n - 1)\n        ans = (ans%self.mod+self.mod)%self.mod\n        ans *=\
  \ self.inv(self.n)\n        ans = (ans%self.mod+self.mod)%self.mod\n        print(ans)\n\
  \n\n    def main(self):            \n        self.gao()\n        pass\n\nif __name__\
  \ == \"__main__\":\n    cf = CF()\n    cf.main()\n    pass\n\n'''\ndp[k+1] *(tot-k)\
  \ = -tot*(n-1) - dp[k]*(2*k - tot- k*n ) - dp[k-1] *k*(n-1)\n\n'''```\nQ: Write\
  \ python code to solve the following coding problem that obeys the constraints and\
  \ passes the example test cases. The output code needs to read from and write to\
  \ standard IO. Please wrap your code answer using ```:\nIn Berland, n different\
  \ types of banknotes are used. Banknotes of the i-th type have denomination 10^{a_i}\
  \ burles (burles are the currency used in Berland); the denomination of banknotes\
  \ of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of\
  \ banknotes required to represent exactly s burles. For example, if the denominations\
  \ of banknotes used in Berland are 1, 10 and 100, then f(59) = 14: 9 banknotes with\
  \ denomination of 1 burle and 5 banknotes with denomination of 10 burles can be\
  \ used to represent exactly 9 \u22C5 1 + 5 \u22C5 10 = 59 burles, and there's no\
  \ way to do it with fewer banknotes.\n\nFor a given integer k, find the minimum\
  \ positive number of burles s that cannot be represented with k or fewer banknotes\
  \ (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1\
  \ \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test\
  \ case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\
  \nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n\
  \ \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum\
  \ positive number of burles s that cannot be represented with k or fewer banknotes.\n\
  \nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n\
  0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999\nA:"
question: "In Berland, n different types of banknotes are used. Banknotes of the i-th\
  \ type have denomination 10^{a_i} burles (burles are the currency used in Berland);\
  \ the denomination of banknotes of the first type is exactly 1.\n\nLet's denote\
  \ f(s) as the minimum number of banknotes required to represent exactly s burles.\
  \ For example, if the denominations of banknotes used in Berland are 1, 10 and 100,\
  \ then f(59) = 14: 9 banknotes with denomination of 1 burle and 5 banknotes with\
  \ denomination of 10 burles can be used to represent exactly 9 \u22C5 1 + 5 \u22C5\
  \ 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given\
  \ integer k, find the minimum positive number of burles s that cannot be represented\
  \ with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains\
  \ a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe\
  \ first line of each test case contains two integers n and k (1 \u2264 n \u2264\
  \ 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ...,\
  \ a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print\
  \ one integer \u2014 the minimum positive number of burles s that cannot be represented\
  \ with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n\
  3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n\
  999999920999999999"
samples:
- " ```import os\nimport sys\ninput = sys.stdin.buffer.readline\n#sys.setrecursionlimit(int(2e5))\
  \ \nfrom collections import deque\nimport math\n#  list(map(int, input().split()))\n\
  #####################################################################################\n\
  \nclass CF(object):\n    def __init__(self):\n        self.mod = 998244353\n   \
  \     self.t = int(input())\n        self.res = []\n        for _ in range(self.t):\n\
  \            self.n, self.k = map(int, input().split())\n            self.a = list(map(int,\
  \ input().split()))\n            self.lim = 10**9 + 7\n            self.lim2 = 10**9\
  \ + 8\n            self.ans = 0\n            for i in range(self.n):\n         \
  \       self.ans += self.lim2 ** self.a[i]\n            self.ans = (self.ans % self.mod\
  \ + self.mod) % self.mod\n            self.ans = (self.ans * self.inv(self.lim2))\
  \ % self.mod\n            self.ans = (self.ans * self.inv(self.lim)) % self.mod\n\
  \            self.res.append(self.ans)\n\n    def inv(self, x):\n        return\
  \ pow(x, self.mod - 2, self.mod)\n\n    def main(self):            \n        self.gao()\n\
  \        pass\n\n    def gao(self):\n        for ans in self.res:\n            print(ans)\n\
  \n\n    def main(self):            \n        self.gao()\n        pass\n\nif __name__\
  \ == \"__main__\":\n    cf = CF()\n    cf.main()\n    pass\n\n# 1e9 + 7\n# 1e9 +\
  \ 8\n# 10^9 + 7\n# 10^9 + 8\n# 10^9 + 9\n# 10^9 + 10\n# 10^9 + 11\n# 10^9 + 12\n\
  # 10^9 + 13\n# 10^9 + 14\n# 10^9 + 15\n# 10^9 + 16\n# 10^9 + 17\n# 10^9 + 18\n#\
  \ 10^9 + 19\n# 10^9 + 20\n# 10^9 + 21\n# 10^9 + 22\n# 10^9 + 23\n# 10^9 + 24\n#\
  \ 10^9 + 25\n# 10^9 + 26\n# 10^9 + 27\n# 10^9 + 28\n# 10^9 + 29\n# 10^9 + 30\n#\
  \ 10^9 + 31\n# 10^9 + 32\n# 10^9 + 33\n# 10^9 + 34\n# 10^9 + 35\n# 10^9 + 36\n#\
  \ 10^9 + 37\n# 10^9 + 38\n# 10^9 + 39\n# 10^9 + 40\n# 10^9 + 41\n# 10^9 + 42\n#\
  \ 10^9 + 43\n# 10^9 + 44\n# 10^9 + 45\n# 10^9 + 46\n# 10^9 + 47\n# 10^9 + 48\n#\
  \ 10^9 + 49\n# 10^9 + 50\n# 10^9 + 51\n# 10^9 + 52\n# 10^9 + 53\n# 10^9 + 54\n#\
  \ 10^9 + 55\n# 10^9 + 56\n# 10^9 + 57\n# 10^9 + 58\n# 10^9 + 59\n# 10^9 + 60\n#\
  \ 10^9 + 61\n# 10^9 + 62\n# 10^9 + 63\n# 10^9 + 64\n# 10^9 + 65\n# 10^9 + 66\n#\
  \ 10^9 + 67\n# 10^9 + 68\n# 10^9 + 69\n# 10^9 + 70\n# 10^9 + 71\n# 10^9 + 72\n#\
  \ 10^9 + 73\n# 10^9 + 74\n# 10^9 + 75\n# 10^9 + 76\n# 10^9 + 77\n# 10^9 + 78\n#\
  \ 10^9 + 79\n# 10^9 + 80\n# 10^9 + 81\n# 10^9"
- " ```import os\nimport sys\ninput = sys.stdin.buffer.readline\n#sys.setrecursionlimit(int(2e5))\
  \ \nfrom collections import deque\nimport math\n#  list(map(int, input().split()))\n\
  #####################################################################################\n\
  \nclass CF(object):\n    def __init__(self):\n        self.n = int(input())\n  \
  \      self.k = int(input())\n        self.a = list(map(int, input().split()))\n\
  \        self.tot = 0\n        for i in self.a:\n            self.tot += 10**i\n\
  \        self.res = 0\n        self.f = [0] * (self.tot + 1)\n        self.f[0]\
  \ = 0\n        for i in range(self.tot + 1):\n            if self.f[i] > k:\n  \
  \              self.res = i\n                break\n            for j in self.a:\n\
  \                if i + 10**j > self.tot:\n                    break\n         \
  \       self.f[i + 10**j] = min(self.f[i + 10**j], self.f[i] + 1)\n        print(self.res)\n\
  \n    def main(self):            \n        self.main()\n        pass\n\nif __name__\
  \ == \"__main__\":\n    cf = CF()\n    cf.main()\n    pass\n```\nQ:"
test_cases:
  input:
  - '4

    3 13

    0 1 2

    2 777

    0 4

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1272

    0 4

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 4

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 4

    3 235

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 15

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 1

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1071

    0 4

    3 235

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 777

    0 2

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 1

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 19

    0 1 2

    2 777

    0 4

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 192

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 650

    0 2

    3 60

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 8

    2 777

    0 2

    3 255

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 4

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 5

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 1063

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 4

    2 777

    0 1

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 2

    3 96

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 34

    0 1 2

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 955

    0 5

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 768

    0 5

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 331

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 777

    0 2

    3 375

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 650

    0 1

    3 60

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 55

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 4

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 768

    0 5

    3 128

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 572

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 5

    2 857

    0 1

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 1121

    0 2

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 1000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 5

    2 857

    0 1

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 8

    0 1 5

    2 857

    0 1

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 667

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 777

    0 1

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 2

    10 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 2

    3 108

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 336

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 768

    0 5

    3 232

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 3

    2 777

    0 2

    3 293

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 53

    0 1 2

    10 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000000011

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 21

    0 1 2

    2 768

    0 5

    3 232

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 4

    2 777

    0 2

    3 471

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 15

    0 1 2

    2 777

    0 3

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 16

    0 1 2

    2 777

    0 2

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 8

    2 777

    0 2

    3 255

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 2

    3 96

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 32

    0 1 2

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 331

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 2

    2 777

    0 2

    3 375

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 4

    2 1121

    0 2

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 223

    0 2

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 2

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 18

    0 1 2

    2 777

    0 2

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 4

    2 117

    0 2

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 17

    0 1 2

    2 777

    0 2

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 17

    0 1 3

    2 287

    0 2

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 11

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 8

    2 777

    0 2

    3 255

    0 2 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 73

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 12

    0 1 2

    2 777

    0 2

    3 572

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 5

    2 25

    0 1

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 667

    0 2

    3 479

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 3

    2 1392

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 1028

    0 4

    3 255

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 2

    0 1 4

    2 777

    0 1

    3 255

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 2

    3 108

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 21

    0 1 2

    2 768

    0 5

    3 217

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 8

    2 777

    0 2

    3 255

    0 2 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 2

    0 1 2

    2 983

    0 2

    3 60

    0 1 3

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 2

    0 1 2

    2 235

    0 2

    3 60

    0 1 3

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 4

    2 777

    0 1

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 4

    3 235

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 777

    0 2

    3 139

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 40

    0 1 2

    2 777

    0 4

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 20

    0 1 2

    2 777

    0 5

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 955

    0 5

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 768

    0 5

    3 206

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 5

    2 777

    0 1

    3 456

    0 1 4

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000100010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 21

    0 1 5

    2 857

    0 1

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 16

    0 1 2

    2 667

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 16

    0 1 4

    2 777

    0 2

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 284

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0000000110

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 17

    0 1 2

    2 768

    0 5

    3 232

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 3

    3 53

    0 1 2

    10 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 2

    2 777

    0 2

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 2

    3 117

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 2

    2 1215

    0 2

    3 375

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 17

    0 1 3

    2 287

    0 2

    3 276

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 2

    0 1 5

    2 777

    0 1

    3 456

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 12

    0 1 2

    2 777

    0 2

    3 56

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 2

    2 667

    0 2

    3 479

    0 1 3

    10 1000000001

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 20

    0 1 2

    2 777

    0 4

    3 235

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 1

    3 60

    0 1 3

    10 0000100010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 4

    3 284

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 2

    2 1215

    0 2

    3 266

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 12

    0 1 2

    2 777

    0 2

    3 44

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 15

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 1

    3 142

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1149

    0 4

    3 235

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 15

    0 1 2

    2 777

    0 2

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 4

    3 217

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1131

    0 2

    3 331

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 328

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 20

    0 1 4

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 572

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 8

    0 1 5

    2 857

    0 1

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 1949

    0 2

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 1250

    0 4

    3 255

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 3

    2 777

    0 2

    3 367

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 53

    0 1 2

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 4

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 15

    0 1 2

    2 777

    0 3

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 19

    0 1 2

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 4

    2 117

    0 1

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 11

    0 1 2

    2 1034

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 3

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 768

    0 5

    3 206

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 4

    3 60

    0 1 3

    10 0000100010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 16

    0 1 2

    2 1224

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 11

    0 1 2

    2 768

    0 5

    3 232

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 19

    0 1 2

    2 777

    0 3

    3 53

    0 1 2

    10 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 18

    0 2 4

    2 651

    0 2

    3 117

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 5

    2 777

    0 1

    3 456

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 40

    0 1 4

    2 777

    0 7

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 15

    0 1 2

    2 777

    0 2

    3 255

    0 1 3

    10 0000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 19

    0 1 2

    2 777

    0 2

    3 572

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 19

    0 1 4

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 3

    2 180

    0 2

    3 108

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 19

    0 1 2

    2 777

    0 3

    3 31

    0 1 2

    3 0000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 1

    3 255

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 10

    0 1 2

    2 1071

    0 4

    3 235

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 777

    0 2

    3 421

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 12

    0 1 2

    2 777

    0 2

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 34

    0 1 2

    2 777

    0 4

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 2

    3 255

    0 1 4

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 28

    0 1 2

    2 777

    0 4

    3 406

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1261

    0 5

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 60

    0 1 3

    10 0010000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 9

    0 1 4

    2 1121

    0 2

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 3

    2 777

    0 2

    3 386

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 2

    3 545

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 2

    2 1332

    0 2

    3 60

    0 1 3

    10 0000000011

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 768

    0 5

    3 232

    0 2 4

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 8

    2 777

    0 2

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 4

    2 651

    0 4

    3 96

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 4

    2 1121

    0 2

    3 248

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 8

    0 1 9

    2 857

    0 2

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 0

    0 1 3

    2 1392

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 390

    0 2

    3 456

    0 1 5

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 3

    2 777

    0 2

    3 301

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 21

    0 1 5

    2 857

    0 1

    3 574

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 2

    2 641

    0 2

    3 60

    0 1 3

    10 0000000110

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 2

    2 777

    0 2

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 7

    2 318

    0 2

    3 255

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1306

    0 4

    3 284

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 777

    0 7

    3 141

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1149

    0 4

    3 235

    0 1 3

    10 1000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 8

    0 1 5

    2 857

    0 2

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 675

    0 4

    3 545

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 16

    0 1 4

    2 117

    0 1

    3 192

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 3

    2 651

    0 4

    3 108

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 8

    0 1 2

    2 768

    0 5

    3 206

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 403

    0 4

    3 60

    0 1 3

    10 0000100010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 4

    3 255

    0 1 4

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 4

    2 777

    0 4

    3 336

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 9

    0 1 2

    2 777

    0 2

    3 545

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 4

    2 1121

    0 2

    3 248

    0 1 4

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 3

    2 1014

    0 2

    3 301

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 1

    0 1 2

    2 641

    0 2

    3 60

    0 1 3

    10 0000010110

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 7

    2 318

    0 2

    3 58

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 2

    2 1149

    0 4

    3 338

    0 1 3

    10 1000000010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 2 3

    2 266

    0 4

    3 108

    0 1 6

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 22

    0 1 2

    2 403

    0 4

    3 60

    0 1 3

    10 0000100010

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 4

    2 1474

    0 4

    3 336

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 2 4

    2 1474

    0 4

    3 336

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 13

    0 1 4

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 8

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 4

    2 777

    0 2

    3 255

    0 1 2

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 14

    0 1 5

    2 777

    0 1

    3 456

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 7

    0 1 3

    2 777

    0 2

    3 255

    0 1 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  - '4

    3 27

    0 1 2

    2 777

    0 4

    3 255

    0 2 3

    10 1000000000

    0 1 2 3 4 5 6 7 8 9

    '
  output:
  - '59

    778

    148999

    999999920999999999

    '
  - '59

    67999

    148999

    999999920999999999

    '
  - '69

    67999

    148999

    999999920999999999

    '
  - '59

    1273

    148999

    999999920999999999

    '
  - '8

    67999

    148999

    999999920999999999

    '
  - '59

    67999

    529

    999999920999999999

    '
  - '59

    778

    128999

    999999920999999999

    '
  - '79

    67999

    148999

    999999920999999999

    '
  - '69

    7699

    148999

    999999920999999999

    '
  - '59

    1072

    128999

    999999920999999999

    '
  - '15

    67999

    148999

    999999920999999999

    '
  - '69

    67999

    23899

    999999920999999999

    '
  - '69

    7699

    349999

    999999920999999999

    '
  - '299

    778

    148999

    999999920999999999

    '
  - '69

    67999

    85999

    999999920999999999

    '
  - '59

    55299

    529

    999999920999999999

    '
  - '1099

    67999

    148999

    999999920999999999

    '
  - '15

    55399

    148999

    999999920999999999

    '
  - '69

    67999

    2479

    999999920999999999

    '
  - '1099

    778

    148999

    999999920999999999

    '
  - '1099

    778

    299999

    999999920999999999

    '
  - '59

    778

    148999

    999999920999999999

    '
  - '69

    96599

    148999

    999999920999999999

    '
  - '59

    67999

    529

    1

    '
  - '2

    7699

    148999

    999999920999999999

    '
  - '15

    55399

    889

    999999920999999999

    '
  - '1799

    778

    299999

    999999920999999999

    '
  - '59

    956

    148999

    999999920999999999

    '
  - '59

    769

    148999

    999999920999999999

    '
  - '59

    67999

    224999

    999999920999999999

    '
  - '69

    67999

    35899

    999999920999999999

    '
  - '69

    67999

    17599

    999999920999999999

    '
  - '59

    6429

    529

    999999920999999999

    '
  - '15

    56

    148999

    999999920999999999

    '
  - '199

    778

    299999

    999999920999999999

    '
  - '59

    67999

    529

    29

    '
  - '59

    769

    21999

    999999920999999999

    '
  - '59

    67999

    465999

    999999920999999999

    '
  - '69

    8499

    349999

    999999920999999999

    '
  - '69

    102399

    17599

    999999920999999999

    '
  - '59

    67999

    529

    999999930999999999

    '
  - '69

    8499

    4489

    999999920999999999

    '
  - '9

    8499

    4489

    999999920999999999

    '
  - '69

    56999

    148999

    999999920999999999

    '
  - '15

    7699

    148999

    999999920999999999

    '
  - '69

    67999

    349999

    999999920999999999

    '
  - '59

    67999

    4399

    1

    '
  - '15

    55399

    1999

    999999920999999999

    '
  - '59

    67999

    229999

    999999920999999999

    '
  - '2

    67999

    529

    29

    '
  - '59

    769

    125999

    999999920999999999

    '
  - '8

    67999

    186999

    999999920999999999

    '
  - '59

    67999

    3699

    1

    '
  - '59

    67999

    438999

    999999920999999999

    '
  - '2

    67999

    529

    39

    '
  - '499

    769

    125999

    999999920999999999

    '
  - '59

    67999

    61

    999999920999999999

    '
  - '59

    67999

    364999

    999999920999999999

    '
  - '79

    778

    148999

    999999920999999999

    '
  - '89

    67999

    23899

    999999920999999999

    '
  - '149

    67999

    2479

    999999920999999999

    '
  - '15

    55399

    7999

    999999920999999999

    '
  - '1599

    778

    299999

    999999920999999999

    '
  - '59

    67999

    3239

    999999920999999999

    '
  - '8

    67999

    35899

    999999920999999999

    '
  - '149

    102399

    17599

    999999920999999999

    '
  - '69

    12599

    349999

    999999920999999999

    '
  - '3

    67999

    529

    29

    '
  - '199

    67999

    438999

    999999920999999999

    '
  - '149

    1999

    17599

    999999920999999999

    '
  - '99

    67999

    438999

    999999920999999999

    '
  - '99

    18999

    438999

    999999920999999999

    '
  - '39

    67999

    148999

    999999920999999999

    '
  - '69

    67999

    15799

    999999920999999999

    '
  - '15

    74

    148999

    999999920999999999

    '
  - '49

    67999

    465999

    999999920999999999

    '
  - '69

    179

    4489

    999999920999999999

    '
  - '69

    56999

    372999

    999999920999999999

    '
  - '8

    129499

    148999

    999999920999999999

    '
  - '69

    67999

    4489

    999999920999999999

    '
  - '1099

    1029

    148999

    999999920999999999

    '
  - '3

    7699

    148999

    999999920999999999

    '
  - '15

    55399

    1009

    999999920999999999

    '
  - '499

    769

    110999

    999999920999999999

    '
  - '149

    67999

    15799

    999999920999999999

    '
  - '3

    88599

    529

    29

    '
  - '3

    13799

    529

    29

    '
  - '8

    7699

    148999

    999999920999999999

    '
  - '59

    778

    21899

    999999920999999999

    '
  - '69

    67999

    12299

    999999920999999999

    '
  - '2399

    778

    148999

    999999920999999999

    '
  - '399

    778

    148999

    999999920999999999

    '
  - '59

    956

    23899

    999999920999999999

    '
  - '59

    769

    99999

    999999920999999999

    '
  - '69

    7699

    4489

    999999920999999999

    '
  - '59

    67999

    529

    99930999999999

    '
  - '139

    8499

    349999

    999999920999999999

    '
  - '89

    56999

    148999

    999999920999999999

    '
  - '89

    67999

    349999

    999999920999999999

    '
  - '59

    67999

    177999

    999999920999999999

    '
  - '2

    67999

    529

    30999999999

    '
  - '99

    769

    125999

    999999920999999999

    '
  - '59

    778

    3699

    1

    '
  - '599

    67999

    438999

    999999920999999999

    '
  - '15

    55399

    10099

    999999920999999999

    '
  - '8

    111799

    35899

    999999920999999999

    '
  - '99

    18999

    169999

    999999920999999999

    '
  - '3

    7699

    349999

    999999920999999999

    '
  - '49

    67999

    489

    999999920999999999

    '
  - '69

    56999

    372999

    999999921999999999

    '
  - '399

    778

    21899

    999999920999999999

    '
  - '59

    7699

    529

    99930999999999

    '
  - '59

    778

    177999

    999999920999999999

    '
  - '8

    111799

    24999

    999999920999999999

    '
  - '49

    67999

    369

    999999920999999999

    '
  - '79

    67999

    148999

    1

    '
  - '69

    7699

    35999

    999999920999999999

    '
  - '59

    1150

    128999

    999999920999999999

    '
  - '79

    67999

    23899

    999999920999999999

    '
  - '1099

    778

    110999

    999999920999999999

    '
  - '59

    103399

    224999

    999999920999999999

    '
  - '69

    67999

    31199

    999999920999999999

    '
  - '129

    778

    299999

    999999920999999999

    '
  - '59

    67999

    55599

    999999920999999999

    '
  - '9

    8499

    349999

    999999920999999999

    '
  - '69

    185199

    17599

    999999920999999999

    '
  - '1099

    1251

    148999

    999999920999999999

    '
  - '8

    67999

    260999

    999999920999999999

    '
  - '59

    67999

    3699

    29

    '
  - '59

    778

    438999

    999999920999999999

    '
  - '79

    778

    23899

    999999920999999999

    '
  - '299

    778

    299999

    999999920999999999

    '
  - '149

    1099

    17599

    999999920999999999

    '
  - '39

    93699

    148999

    999999920999999999

    '
  - '69

    778

    4489

    999999920999999999

    '
  - '59

    769

    1989

    999999920999999999

    '
  - '59

    778

    529

    99930999999999

    '
  - '89

    112699

    148999

    999999920999999999

    '
  - '39

    769

    125999

    999999920999999999

    '
  - '299

    778

    3699

    1

    '
  - '19

    55399

    10099

    999999920999999999

    '
  - '2

    7699

    349999

    999999920999999999

    '
  - '329

    778

    148999

    999999920999999999

    '
  - '79

    67999

    148999

    29

    '
  - '299

    67999

    55599

    999999920999999999

    '
  - '119

    778

    299999

    999999920999999999

    '
  - '15

    8299

    1009

    999999920999999999

    '
  - '299

    778

    1499

    1

    '
  - '69

    7699

    2479

    999999920999999999

    '
  - '29

    1072

    128999

    999999920999999999

    '
  - '15

    67999

    314999

    999999920999999999

    '
  - '49

    67999

    23899

    999999920999999999

    '
  - '1799

    778

    148999

    999999920999999999

    '
  - '1099

    67999

    2479

    999999920999999999

    '
  - '1199

    778

    299999

    999999920999999999

    '
  - '59

    1262

    148999

    999999920999999999

    '
  - '59

    67999

    529

    9999930999999999

    '
  - '19

    102399

    17599

    999999920999999999

    '
  - '8

    67999

    279999

    999999920999999999

    '
  - '59

    67999

    52899

    999999920999999999

    '
  - '2

    123499

    529

    39

    '
  - '59

    769

    359999

    999999920999999999

    '
  - '149

    67999

    23899

    999999920999999999

    '
  - '15

    652

    7999

    999999920999999999

    '
  - '149

    102399

    23199

    999999920999999999

    '
  - '9

    75999

    4489

    999999920999999999

    '
  - '1

    129499

    148999

    999999920999999999

    '
  - '69

    29299

    4489

    999999920999999999

    '
  - '69

    67999

    28499

    999999920999999999

    '
  - '139

    8499

    467999

    999999920999999999

    '
  - '2

    54399

    529

    30999999999

    '
  - '8

    67999

    438999

    999999920999999999

    '
  - '69

    22099

    2479

    999999920999999999

    '
  - '59

    1307

    177999

    999999920999999999

    '
  - '59

    778

    34999

    999999920999999999

    '
  - '59

    1150

    128999

    999999930999999999

    '
  - '9

    75999

    349999

    999999920999999999

    '
  - '59

    676

    438999

    999999920999999999

    '
  - '89

    1099

    17599

    999999920999999999

    '
  - '15

    652

    1009

    999999920999999999

    '
  - '9

    769

    1989

    999999920999999999

    '
  - '59

    404

    529

    99930999999999

    '
  - '1099

    778

    2479

    999999920999999999

    '
  - '59

    778

    229999

    999999920999999999

    '
  - '19

    67999

    52899

    999999920999999999

    '
  - '149

    102399

    2409

    999999920999999999

    '
  - '69

    91699

    28499

    999999920999999999

    '
  - '2

    54399

    529

    10030999999999

    '
  - '69

    22099

    509

    999999920999999999

    '
  - '59

    1150

    231999

    999999930999999999

    '
  - '15

    267

    1009

    999999920999999999

    '
  - '599

    404

    529

    99930999999999

    '
  - '59

    1475

    229999

    999999920999999999

    '
  - '14

    1475

    229999

    999999920999999999

    '
  - '69

    67999

    148999

    999999920999999999

    '
  - '59

    67999

    148999

    999999920999999999

    '
  - '69

    67999

    148999

    999999920999999999

    '
  - '69

    67999

    23899

    999999920999999999

    '
  - '69

    7699

    349999

    999999920999999999

    '
  - '8

    67999

    148999

    999999920999999999

    '
  - '1099

    778

    148999

    999999920999999999

    '
timeout: 2.0
