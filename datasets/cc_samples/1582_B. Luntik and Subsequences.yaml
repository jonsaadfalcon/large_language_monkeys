prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nPolycarp has\
  \ recently got himself a new job. He now earns so much that his old wallet can't\
  \ even store all the money he has.\n\nBerland bills somehow come in lots of different\
  \ sizes. However, all of them are shaped as rectangles (possibly squares). All wallets\
  \ are also produced in form of rectangles (possibly squares).\n\nA bill x \xD7 y\
  \ fits into some wallet h \xD7 w if either x \u2264 h and y \u2264 w or y \u2264\
  \ h and x \u2264 w. Bills can overlap with each other in a wallet and an infinite\
  \ amount of bills can fit into a wallet. That implies that all the bills Polycarp\
  \ currently have fit into a wallet if every single one of them fits into it independently\
  \ of the others.\n\nNow you are asked to perform the queries of two types:\n\n \
  \ 1. +~x~y \u2014 Polycarp earns a bill of size x \xD7 y; \n  2. ?~h~w \u2014 Polycarp\
  \ wants to check if all the bills he has earned to this moment fit into a wallet\
  \ of size h \xD7 w. \n\n\n\nIt is guaranteed that there is at least one query of\
  \ type 1 before the first query of type 2 and that there is at least one query of\
  \ type 2 in the input data.\n\nFor each query of type 2 print \"YES\" if all the\
  \ bills he has earned to this moment fit into a wallet of given size. Print \"NO\"\
  \ otherwise.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n\
  \ \u2264 5 \u22C5 10^5) \u2014 the number of queries.\n\nEach of the next n lines\
  \ contains a query of one of these two types:\n\n  1. +~x~y (1 \u2264 x, y \u2264\
  \ 10^9) \u2014 Polycarp earns a bill of size x \xD7 y; \n  2. ?~h~w (1 \u2264 h,\
  \ w \u2264 10^9) \u2014 Polycarp wants to check if all the bills he has earned to\
  \ this moment fit into a wallet of size h \xD7 w. \n\n\n\nIt is guaranteed that\
  \ there is at least one query of type 1 before the first query of type 2 and that\
  \ there is at least one query of type 2 in the input data.\n\nOutput\n\nFor each\
  \ query of type 2 print \"YES\" if all the bills he has earned to this moment fit\
  \ into a wallet of given size. Print \"NO\" otherwise.\n\nExample\n\nInput\n\n\n\
  9\n+ 3 2\n+ 2 3\n? 1 20\n? 3 3\n? 2 3\n+ 1 5\n? 10 10\n? 1 5\n+ 1 1\n\n\nOutput\n\
  \n\nNO\nYES\nYES\nYES\nNO\n\nNote\n\nThe queries of type 2 of the example:\n\n \
  \ 1. Neither bill fits; \n  2. Both bills fit (just checking that you got that bills\
  \ can overlap); \n  3. Both bills fit (both bills are actually the same); \n  4.\
  \ All bills fit (too much of free space in a wallet is not a problem); \n  5. Only\
  \ bill 1 \xD7 5 fit (all the others don't, thus it's \"NO\"). \nA: ```import sys\n\
  amount = int(input())\nmax_1 = -1\nmax_2 = -1\nans = \"\"\nfor i in range(amount):\n\
  \    inputs = [s for s in input().split()]\n    x = int(inputs[1])\n    y = int(inputs[2])\n\
  \    if x > y:\n        x,y = y,x\n    if inputs[0] == '+':\n        if max_1 <\
  \ x:\n            max_1 = x\n        if max_2 < y:\n            max_2 = y\n    else:\n\
  \        if (max_1 <= x and max_2 <= y) or (max_1 <= y and max_2 <= x):\n      \
  \      ans += \"YES\\n\"\n        else:\n            ans += \"NO\\n\"\nprint(ans)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nFor a dictionary $M$\
  \ that stores elements formed by a pair of a string key and an integer value, perform\
  \ a sequence of the following operations. Note that multiple elements can have equivalent\
  \ keys.\n\n* insert($key$, $x$): Insert an element formed by a pair of $key$ and\
  \ $x$ to $M$.\n* get($key$): Print all values with the specified $key$.\n* delete($key$):\
  \ Delete all elements with the specified $key$.\n* dump($L$, $R$): Print all elements\
  \ formed by a pair of the key and the value such that the key is greater than or\
  \ equal to $L$ and less than or equal to $R$ in lexicographic order.\n\nConstraints\n\
  \n* $1 \\leq q \\leq 200,000$\n* $1 \\leq x \\leq 1,000,000,000$\n* $1 \\leq $ length\
  \ of $key$ $ \\leq 20$\n* $key$ consists of lower-case letters\n* $L \\leq R$ in\
  \ lexicographic order\n* The total number of elements printed by get operations\
  \ does not exceed $500,000$\n* The total number of elements printed by dump operations\
  \ does not exceed $500,000$\n\nInput\n\nThe input is given in the following format.\n\
  \n\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n\n\nEach query $query_i$ is given by\n\
  \n\n0 $key$ $x$\n\n\nor\n\n\n1 $key$\n\n\nor\n\n\n2 $key$\n\n\nor\n\n\n3 $L$ $R$\n\
  \n\nwhere the first digits 0, 1, 2 and 3 represent insert, get, delete and dump\
  \ operations.\n\nOutput\n\nFor each get operation, print the corresponding values\
  \ in the order of insertions.\nFor each dump operation, print the corresponding\
  \ elements formed by a pair of the key and the value. For the dump operation, print\
  \ the elements in ascending order of the keys, in case of a tie, in the order of\
  \ insertions.\n\nExample\n\nInput\n\n10\n0 blue 6\n0 red 1\n0 blue 4\n0 white 5\n\
  1 red\n1 blue\n2 red\n1 black\n1 red\n3 w z\n\n\nOutput\n\n1\n6\n4\nwhite 5\nA:\
  \ ```# -*- coding: utf-8 -*-\n\"\"\"\nDictionary - Multi-Map\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP2_8_D&lang=jp\n\
  \n\"\"\"\nfrom bisect import insort, bisect_right, bisect_left\n\nclass Multi_map:\n\
  \    def __init__(self):\n        self.mm = dict()\n        self.lr = []\n\n   \
  \ def insert(self, x, y):\n        if x in self.mm:\n            self.mm[x].append(y)\n\
  \        else:\n            self.mm[x] = [y]\n            insort(self.lr, x)\n\n\
  \    def get(self, x):\n        if x in self.mm and self.mm[x] != []:\n        \
  \    print(*self.mm[x], sep='\\n')\n\n    def delete(self, x):\n        if x in\
  \ self.mm:\n            self.mm[x] = []\n\n    def dump(self, l, r):\n        lb\
  \ = bisect_left(self.lr, l)\n        ub = bisect_right(self.lr, r)\n        for\
  \ i in range(lb, ub):\n            k = self.lr[i]\n            for v in self.mm[k]:\n\
  \                print(f'{k} {v}')\n\n\nmm = Multi_map()\nfor _ in range(int(input())):\n\
  \    op, x, y = (input() + ' 1').split()[:3]\n    if op == '0':\n        mm.insert(x,\
  \ int(y))\n    elif op == '1':\n        mm.get(x)\n    elif op == '2':\n       \
  \ mm.delete(x)\n    else:\n        mm.dump(x, y)```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nLuntik came out for a morning stroll and found\
  \ an array a of length n. He calculated the sum s of the elements of the array (s=\
  \ \u2211_{i=1}^{n} a_i). Luntik calls a subsequence of the array a nearly full if\
  \ the sum of the numbers in that subsequence is equal to s-1.\n\nLuntik really wants\
  \ to know the number of nearly full subsequences of the array a. But he needs to\
  \ come home so he asks you to solve that problem!\n\nA sequence x is a subsequence\
  \ of a sequence y if x can be obtained from y by deletion of several (possibly,\
  \ zero or all) elements.\n\nInput\n\nThe first line contains a single integer t\
  \ (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2 \u22C5 t\
  \ lines contain descriptions of test cases. The description of each test case consists\
  \ of two lines.\n\nThe first line of each test case contains a single integer n\
  \ (1 \u2264 n \u2264 60) \u2014 the length of the array.\n\nThe second line contains\
  \ n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements\
  \ of the array a.\n\nOutput\n\nFor each test case print the number of nearly full\
  \ subsequences of the array.\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n2\n1000 1000\n\
  2\n1 0\n5\n3 0 2 1 1\n5\n2 1 0 3 0\n\n\nOutput\n\n\n1\n0\n2\n4\n4\n\nNote\n\nIn\
  \ the first test case, s=1+2+3+4+5=15, only (2,3,4,5) is a nearly full subsequence\
  \ among all subsequences, the sum in it is equal to 2+3+4+5=14=15-1.\n\nIn the second\
  \ test case, there are no nearly full subsequences.\n\nIn the third test case, s=1+0=1,\
  \ the nearly full subsequences are (0) and () (the sum of an empty subsequence is\
  \ 0).\nA:"
question: "Luntik came out for a morning stroll and found an array a of length n.\
  \ He calculated the sum s of the elements of the array (s= \u2211_{i=1}^{n} a_i).\
  \ Luntik calls a subsequence of the array a nearly full if the sum of the numbers\
  \ in that subsequence is equal to s-1.\n\nLuntik really wants to know the number\
  \ of nearly full subsequences of the array a. But he needs to come home so he asks\
  \ you to solve that problem!\n\nA sequence x is a subsequence of a sequence y if\
  \ x can be obtained from y by deletion of several (possibly, zero or all) elements.\n\
  \nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014\
  \ the number of test cases. The next 2 \u22C5 t lines contain descriptions of test\
  \ cases. The description of each test case consists of two lines.\n\nThe first line\
  \ of each test case contains a single integer n (1 \u2264 n \u2264 60) \u2014 the\
  \ length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026,\
  \ a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nOutput\n\
  \nFor each test case print the number of nearly full subsequences of the array.\n\
  \nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n2\n1000 1000\n2\n1 0\n5\n3 0 2 1 1\n5\n\
  2 1 0 3 0\n\n\nOutput\n\n\n1\n0\n2\n4\n4\n\nNote\n\nIn the first test case, s=1+2+3+4+5=15,\
  \ only (2,3,4,5) is a nearly full subsequence among all subsequences, the sum in\
  \ it is equal to 2+3+4+5=14=15-1.\n\nIn the second test case, there are no nearly\
  \ full subsequences.\n\nIn the third test case, s=1+0=1, the nearly full subsequences\
  \ are (0) and () (the sum of an empty subsequence is 0)."
samples:
- " ```import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n  \
  \  a = list(map(int, input().split()))\n    s = sum(a)\n    ans = 0\n    for i in\
  \ range(1 << n):\n        sub = 0\n        for j in range(n):\n            if (i\
  \ & (1 << j)):\n                sub += a[j]\n        if sub == s - 1:\n        \
  \    ans += 1\n    print(ans)``` Q:"
- " ``````python\nimport sys\n\ndef nearly_full_subsequences():\n    t = int(sys.stdin.readline())\n\
  \    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int,\
  \ sys.stdin.readline().split()))\n        s = sum(a)\n        count = 0\n      \
  \  for i in range(1 << n):\n            subsequence_sum = 0\n            for j in\
  \ range(n):\n                if (i & (1 << j)):\n                    subsequence_sum\
  \ += a[j]\n            if subsequence_sum == s - 1:\n                count += 1\n\
  \        print(count)\n\nnearly_full_subsequences()```````\nQ:"
test_cases:
  input:
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 1 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1100 1000

    2

    1 0

    5

    0 0 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1000 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    0 4 6 4 8

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    0 2 3 6 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 2 1 0

    5

    2 2 0 4 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    2 0

    5

    4 0 4 1 1

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    2 0

    5

    4 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 2 3 4 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 -1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 6 4 1

    2

    1110 1010

    2

    2 1

    5

    4 0 4 1 0

    5

    1 1 0 6 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1100 1000

    2

    1 0

    5

    3 0 4 0 0

    5

    2 1 0 3 0

    '
  - '5

    5

    0 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    5

    0 0 0 3 0

    '
  - '5

    5

    1 2 3 6 5

    2

    1000 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 1

    5

    0 0 4 1 0

    5

    0 1 0 3 1

    '
  - '5

    5

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    5 0 4 0 0

    5

    1 1 0 3 1

    '
  - '5

    5

    2 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    0 0 2 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    0 0

    5

    4 0 4 1 0

    5

    1 2 1 6 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 0 1

    5

    1 1 1 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1111 1010

    2

    2 0

    5

    1 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    0 4 3 4 5

    2

    1000 1001

    2

    0 0

    5

    3 0 4 1 1

    5

    0 1 1 3 -1

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 8 1 0

    5

    0 1 0 1 0

    '
  - '5

    5

    1 4 6 4 0

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 1 3 4 2

    2

    1000 1010

    2

    2 0

    5

    4 0 8 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    0 2 3 4 2

    2

    1001 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 2 1 0

    5

    2 1 1 4 -1

    '
  - '5

    5

    1 2 3 0 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 0 1

    5

    1 1 1 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1001 1000

    2

    1 0

    5

    3 -1 2 -1 1

    5

    2 2 0 3 0

    '
  - '5

    5

    1 7 3 4 5

    2

    0000 1010

    2

    1 0

    5

    6 -1 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    0 2 5 4 5

    2

    1100 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 1 3 0

    '
  - '5

    5

    2 2 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 2 1 0

    5

    2 1 1 4 -1

    '
  - '5

    5

    1 2 3 0 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 0 1

    5

    0 1 1 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1001 1000

    2

    1 0

    5

    3 -1 2 -1 2

    5

    2 2 0 3 0

    '
  - '5

    5

    1 4 5 6 2

    2

    1110 1010

    2

    2 1

    5

    4 0 5 1 1

    5

    1 1 1 3 1

    '
  - '5

    5

    1 4 3 4 2

    2

    1111 1010

    2

    2 0

    5

    1 0 7 1 1

    5

    2 1 0 6 1

    '
  - '5

    5

    2 4 3 8 1

    2

    1110 1110

    2

    0 0

    5

    4 -1 4 1 0

    5

    1 2 1 6 0

    '
  - '5

    5

    1 1 3 4 1

    2

    1001 1000

    2

    1 0

    5

    3 -1 1 -1 2

    5

    2 2 0 3 0

    '
  - '5

    5

    0 2 5 4 5

    2

    1100 0001

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 1 3 0

    '
  - '5

    5

    1 0 0 6 5

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 0 1

    5

    2 1 1 2 0

    '
  - '5

    5

    1 4 3 7 2

    2

    1111 1010

    2

    2 0

    5

    1 0 7 0 1

    5

    2 1 0 6 1

    '
  - '5

    5

    1 4 3 4 1

    2

    1010 1010

    2

    1 0

    5

    3 1 6 1 0

    5

    0 0 0 3 -1

    '
  - '5

    5

    1 0 3 4 1

    2

    1010 0010

    2

    1 0

    5

    3 1 6 1 0

    5

    1 0 0 3 -1

    '
  - '5

    5

    0 4 3 7 3

    2

    1111 1010

    2

    2 0

    5

    1 0 12 0 1

    5

    2 1 0 6 1

    '
  - '5

    5

    0 4 3 7 3

    2

    1111 1010

    2

    2 1

    5

    1 0 12 0 1

    5

    2 1 0 6 1

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 1 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    2 0

    5

    3 -1 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 1 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1000 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 0 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    2 0

    5

    1 0 4 1 1

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 1

    5

    4 0 4 1 -1

    5

    1 1 0 6 0

    '
  - '5

    5

    0 4 5 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 0 7 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    0 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 1

    5

    0 0 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    0 0 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 1

    5

    4 0 1 1 1

    5

    1 1 0 6 0

    '
  - '5

    5

    1 4 3 4 0

    2

    1100 1010

    2

    1 0

    5

    5 0 4 0 0

    5

    1 1 0 3 1

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1100

    2

    1 0

    5

    3 1 2 1 1

    5

    2 2 0 3 0

    '
  - '5

    5

    2 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    0 0 2 1 0

    5

    2 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 6

    2

    1000 1010

    2

    1 1

    5

    3 0 1 1 1

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 8 2 0

    5

    0 1 0 1 0

    '
  - '5

    5

    1 2 3 0 1

    2

    1001 1000

    2

    1 0

    5

    3 -1 2 -1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 7 3 4 5

    2

    0000 1010

    2

    2 0

    5

    6 -1 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 6 0 0

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 -1

    5

    1 1 0 3 0

    '
  - '5

    5

    2 5 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    0

    0 0 0 3 0

    '
  - '5

    5

    1 1 3 4 2

    2

    1000 1010

    2

    2 0

    5

    4 0 8 0 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 8 1

    2

    1110 1110

    2

    0 0

    5

    4 0 4 1 0

    5

    1 2 2 6 0

    '
  - '5

    5

    1 2 3 0 1

    2

    1010 1000

    2

    1 0

    5

    3 0 2 0 1

    5

    0 1 1 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1111 1010

    2

    2 0

    5

    1 0 7 1 1

    5

    1 1 -1 6 1

    '
  - '5

    5

    1 4 5 6 2

    2

    1110 1010

    2

    2 1

    5

    4 1 5 1 1

    5

    1 1 1 3 1

    '
  - '5

    5

    1 4 3 4 2

    2

    1111 1010

    2

    2 0

    5

    1 0 7 1 1

    5

    2 1 0 6 2

    '
  - '5

    5

    1 4 3 8 4

    2

    1100 1000

    2

    0 0

    5

    4 0 8 2 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    0 2 5 4 5

    2

    1100 0000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 1 3 -1

    '
  - '5

    5

    1 2 0 6 5

    2

    1010 1000

    2

    0 0

    5

    3 -1 2 0 1

    5

    2 1 1 2 0

    '
  - '5

    5

    0 2 5 4 5

    2

    1100 0001

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 2 3 0

    '
  - '5

    5

    1 4 3 0 2

    2

    1000 1010

    2

    2 0

    5

    3 -1 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1000 1000

    2

    2 0

    5

    3 -1 2 1 1

    5

    2 0 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1100 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 8

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 6 4 8

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 -1 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 1 6 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 1 10 0

    '
  - '5

    5

    1 2 3 4 0

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 6 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 1

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 0 4 0

    '
  - '5

    5

    1 4 3 4 4

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    5

    0 1 1 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 1

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 6 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1100 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 1 10 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 1

    5

    3 0 4 1 0

    5

    0 1 0 3 1

    '
  - '5

    5

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    3 0 4 0 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 4

    2

    1001 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    4 0 4 2 0

    5

    0 1 1 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 1

    5

    4 0 4 1 0

    5

    1 1 0 6 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 4 1 1

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    5 0 4 0 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 2 3 4 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 0 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1010 1000

    2

    0 0

    5

    3 0 2 1 0

    5

    2 2 0 4 0

    '
  - '5

    5

    1 4 3 4 4

    2

    1001 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 6 4 1

    2

    1110 1010

    2

    1 1

    5

    4 0 4 1 0

    5

    1 1 0 6 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 4 1 1

    5

    0 1 1 3 -1

    '
  - '5

    5

    1 2 3 4 5

    2

    1010 1000

    2

    0 0

    5

    3 1 2 1 0

    5

    2 2 0 4 0

    '
  - '5

    5

    1 4 3 4 4

    2

    1001 1000

    2

    1 0

    5

    3 0 8 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 5 4 2

    2

    1110 1010

    2

    2 0

    5

    4 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 4 1 1

    5

    0 0 1 3 -1

    '
  - '5

    5

    1 4 3 6 4

    2

    1001 1000

    2

    1 0

    5

    3 0 8 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 5 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 4 3 6 4

    2

    1001 0000

    2

    1 0

    5

    3 0 8 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 7 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 4 7 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    2 1 0 3 1

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    0 0 2 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    2 1 1 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 1 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 8 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 7 3 4 5

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    0 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 4 0

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 5 5

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    4 0 8 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 5 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 -1 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    3

    1 4 3 4 2

    2

    1100 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    2 4 3 4 2

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 2 1 6 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 1 13 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1100 1000

    2

    1 0

    5

    0 0 4 1 0

    5

    2 1 0 6 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 4 2 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 1

    5

    3 0 4 1 1

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 3 5 2

    2

    1100 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    0 2 3 4 1

    2

    1000 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 8 3 4 4

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 0 0

    5

    0 1 1 3 0

    '
  - '5

    5

    0 4 6 4 8

    2

    1001 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 5 4 2

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 1

    5

    1 1 0 3 0

    '
  - '5

    5

    0 2 3 6 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 1

    5

    2 1 0 5 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 2 1 0

    5

    2 1 0 4 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    2 0

    5

    4 0 4 0 1

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 1

    5

    4 0 4 1 1

    5

    1 1 0 6 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1010 1000

    2

    0 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 2 3 4 1

    2

    1010 1000

    2

    1 0

    5

    3 -1 2 0 1

    5

    2 1 1 3 0

    '
  - '5

    5

    1 2 3 4 5

    2

    1010 1000

    2

    0 0

    5

    3 1 2 1 0

    5

    2 3 0 4 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1111 1010

    2

    2 0

    5

    4 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 4 6 4 1

    2

    1110 1110

    2

    1 1

    5

    4 0 4 1 0

    5

    1 1 0 6 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1001

    2

    0 0

    5

    3 0 4 1 1

    5

    0 1 1 3 -1

    '
  - '5

    5

    1 2 3 4 1

    2

    1000 1000

    2

    1 0

    5

    3 -1 2 -1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 4

    2

    1000 1000

    2

    1 0

    5

    3 0 8 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 5 4 2

    2

    1110 1010

    2

    2 0

    5

    4 0 5 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    -1 0

    5

    3 0 4 1 1

    5

    0 0 1 3 -1

    '
  - '5

    5

    1 4 5 5 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    1 1 0 3 1

    '
  - '5

    5

    1 4 0 6 4

    2

    1001 0000

    2

    1 0

    5

    3 0 8 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 7 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 7 4 2

    2

    1110 1010

    2

    2 0

    5

    2 0 4 1 1

    5

    2 0 0 3 1

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1100

    2

    1 0

    5

    3 1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    1 0

    5

    3 1 4 2 0

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1100 1000

    2

    1 0

    5

    3 0 4 0 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 8 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 7 3 4 5

    2

    0000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    0 4 3 4 2

    2

    1010 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 6 4 0

    2

    1000 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    0 2 5 4 5

    2

    1000 1000

    2

    1 0

    5

    3 0 2 1 0

    5

    2 2 0 3 0

    '
  - '5

    5

    1 4 3 5 5

    2

    1100 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 3 3 4 2

    2

    1000 1010

    2

    1 0

    5

    3 0 4 2 0

    5

    0 0 0 3 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1000 1010

    2

    2 0

    5

    4 0 8 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 5 3 4 2

    2

    1001 1010

    2

    1 0

    5

    3 -1 4 2 0

    5

    0 1 0 3 0

    '
  - '5

    3

    1 4 3 4 2

    2

    1100 0010

    2

    1 0

    5

    4 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 1

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 0

    5

    2 1 1 13 0

    '
  - '5

    5

    1 2 0 6 5

    2

    1000 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    1 4 3 4 6

    2

    1000 1010

    2

    1 1

    5

    3 0 4 1 1

    5

    0 1 0 3 0

    '
  - '5

    5

    1 4 5 5 2

    2

    1100 1010

    2

    1 0

    5

    3 0 4 1 0

    5

    1 1 0 3 0

    '
  - '5

    5

    0 2 3 4 1

    2

    1001 1000

    2

    1 0

    5

    3 -1 2 1 1

    5

    2 1 0 3 0

    '
  - '5

    5

    0 4 6 4 8

    2

    1001 1000

    2

    1 0

    5

    3 0 4 1 0

    5

    -1 1 0 3 0

    '
  - '5

    5

    1 4 5 5 2

    2

    1110 1010

    2

    1 0

    5

    4 0 4 1 1

    5

    1 1 0 3 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1000 1010

    2

    1 1

    5

    0 0 4 1 0

    5

    0 1 0 4 1

    '
  - '5

    5

    1 2 3 4 5

    2

    1000 1000

    2

    0 0

    5

    3 0 2 1 0

    5

    2 1 1 4 0

    '
  - '5

    5

    1 4 3 4 2

    2

    1110 1010

    2

    2 0

    5

    4 0 4 0 1

    5

    1 1 0 2 0

    '
  - '5

    5

    1 4 3 4 5

    2

    1010 1000

    2

    0 0

    5

    3 1 4 1 0

    5

    0 1 0 3 -1

    '
  - '5

    5

    1 4 6 4 1

    2

    0110 1110

    2

    1 1

    5

    4 0 4 1 0

    5

    1 1 0 6 0

    '
  output:
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    0

    '
  - '1

    0

    2

    0

    8

    '
  - '2

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    6

    '
  - '1

    0

    2

    8

    4

    '
  - '2

    0

    2

    2

    4

    '
  - '0

    0

    2

    4

    8

    '
  - '0

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    0

    4

    0

    '
  - '1

    0

    0

    4

    8

    '
  - '1

    0

    0

    4

    6

    '
  - '2

    0

    2

    1

    4

    '
  - '2

    0

    1

    4

    8

    '
  - '1

    0

    2

    3

    4

    '
  - '1

    0

    2

    0

    4

    '
  - '0

    0

    2

    4

    0

    '
  - '1

    0

    2

    0

    0

    '
  - '1

    0

    2

    2

    4

    '
  - '1

    0

    2

    8

    8

    '
  - '1

    0

    2

    0

    6

    '
  - '0

    0

    2

    8

    4

    '
  - '2

    0

    0

    4

    4

    '
  - '2

    0

    2

    2

    6

    '
  - '1

    0

    0

    6

    6

    '
  - '0

    0

    0

    4

    4

    '
  - '1

    0

    0

    4

    16

    '
  - '2

    0

    2

    0

    8

    '
  - '2

    0

    0

    4

    8

    '
  - '0

    0

    2

    2

    4

    '
  - '1

    0

    0

    4

    2

    '
  - '4

    0

    2

    2

    6

    '
  - '2

    0

    2

    1

    0

    '
  - '1

    0

    2

    2

    8

    '
  - '0

    0

    2

    4

    2

    '
  - '0

    0

    0

    4

    2

    '
  - '4

    0

    2

    2

    8

    '
  - '2

    0

    2

    0

    0

    '
  - '1

    0

    1

    4

    4

    '
  - '1

    0

    0

    6

    4

    '
  - '1

    0

    0

    2

    4

    '
  - '3

    0

    2

    1

    0

    '
  - '0

    1

    2

    4

    2

    '
  - '4

    0

    2

    2

    4

    '
  - '1

    0

    0

    8

    4

    '
  - '2

    0

    2

    4

    0

    '
  - '4

    0

    2

    4

    4

    '
  - '0

    0

    0

    8

    4

    '
  - '0

    0

    1

    8

    4

    '
  - '1

    0

    2

    4

    6

    '
  - '1

    0

    0

    0

    8

    '
  - '1

    0

    2

    4

    12

    '
  - '2

    0

    2

    2

    0

    '
  - '1

    0

    0

    6

    8

    '
  - '2

    0

    2

    2

    8

    '
  - '0

    0

    0

    4

    6

    '
  - '2

    0

    0

    4

    6

    '
  - '0

    0

    2

    0

    8

    '
  - '1

    0

    2

    2

    0

    '
  - '2

    0

    2

    8

    4

    '
  - '2

    0

    2

    6

    8

    '
  - '2

    0

    2

    0

    6

    '
  - '1

    0

    2

    3

    0

    '
  - '0

    0

    2

    8

    2

    '
  - '1

    0

    2

    6

    8

    '
  - '1

    0

    0

    0

    16

    '
  - '4

    0

    2

    1

    4

    '
  - '1

    0

    0

    2

    8

    '
  - '4

    0

    2

    0

    8

    '
  - '0

    0

    2

    0

    0

    '
  - '2

    0

    0

    0

    4

    '
  - '2

    0

    0

    4

    2

    '
  - '4

    0

    2

    4

    8

    '
  - '1

    0

    0

    6

    3

    '
  - '1

    0

    1

    3

    4

    '
  - '1

    0

    0

    6

    2

    '
  - '1

    0

    0

    0

    4

    '
  - '0

    0

    2

    4

    1

    '
  - '2

    0

    0

    2

    4

    '
  - '0

    1

    2

    4

    0

    '
  - '2

    0

    0

    0

    8

    '
  - '2

    0

    0

    2

    0

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    0

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    6

    '
  - '2

    0

    2

    4

    6

    '
  - '2

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    0

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    0

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    6

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    0

    8

    '
  - '2

    0

    2

    2

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    0

    8

    '
  - '2

    0

    2

    4

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    2

    0

    8

    '
  - '2

    0

    2

    2

    4

    '
  - '1

    0

    0

    4

    0

    '
  - '1

    0

    2

    4

    4

    '
  - '2

    0

    2

    4

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    0

    4

    0

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    6

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    6

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    6

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    2

    8

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '0

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    0

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '0

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    4

    '
  - '2

    0

    2

    4

    4

    '
  - '2

    0

    2

    4

    6

    '
  - '1

    0

    2

    8

    4

    '
  - '1

    0

    2

    0

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '2

    0

    2

    2

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    0

    8

    '
  - '0

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '0

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    0

    4

    8

    '
  - '2

    0

    2

    4

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '2

    0

    2

    2

    4

    '
  - '1

    0

    0

    4

    0

    '
  - '1

    0

    0

    4

    6

    '
  - '2

    0

    2

    4

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '2

    0

    2

    1

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    6

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    0

    4

    6

    '
  - '2

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    2

    3

    4

    '
  - '1

    0

    2

    2

    4

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    0

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '0

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    8

    '
  - '0

    0

    2

    4

    0

    '
  - '1

    0

    2

    4

    4

    '
  - '1

    0

    2

    0

    0

    '
  - '1

    0

    0

    4

    8

    '
  - '1

    0

    2

    0

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '2

    0

    2

    4

    4

    '
  - '2

    0

    2

    2

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    4

    8

    '
  - '2

    0

    2

    2

    4

    '
  - '0

    0

    2

    4

    4

    '
  - '1

    0

    2

    4

    8

    '
  - '1

    0

    2

    8

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '1

    0

    0

    4

    8

    '
  - '1

    0

    0

    4

    4

    '
  - '2

    0

    2

    4

    8

    '
timeout: 1.0
