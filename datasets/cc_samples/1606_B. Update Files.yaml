prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou are given\
  \ two integers x and y. You can perform two types of operations: \n\n  1. Pay a\
  \ dollars and increase or decrease any of these integers by 1. For example, if x\
  \ = 0 and y = 7 there are four possible outcomes after this operation: \n    * x\
  \ = 0, y = 6; \n    * x = 0, y = 8; \n    * x = -1, y = 7; \n    * x = 1, y = 7.\
  \ \n\n  2. Pay b dollars and increase or decrease both integers by 1. For example,\
  \ if x = 0 and y = 7 there are two possible outcomes after this operation: \n  \
  \  * x = -1, y = 6; \n    * x = 1, y = 8. \n\n\n\nYour goal is to make both given\
  \ integers equal zero simultaneously, i.e. x = y = 0. There are no other requirements.\
  \ In particular, it is possible to move from x=1, y=0 to x=y=0.\n\nCalculate the\
  \ minimum amount of dollars you have to spend on it.\n\nInput\n\nThe first line\
  \ contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\
  \nThe first line of each test case contains two integers x and y (0 \u2264 x, y\
  \ \u2264 10^9).\n\nThe second line of each test case contains two integers a and\
  \ b (1 \u2264 a, b \u2264 10^9).\n\nOutput\n\nFor each test case print one integer\
  \ \u2014 the minimum amount of dollars you have to spend.\n\nExample\n\nInput\n\n\
  \n2\n1 3\n391 555\n0 0\n9 4\n\n\nOutput\n\n\n1337\n0\n\nNote\n\nIn the first test\
  \ case you can perform the following sequence of operations: first, second, first.\
  \ This way you spend 391 + 555 + 391 = 1337 dollars.\n\nIn the second test case\
  \ both integers are equal to zero initially, so you dont' have to spend money.\n\
  A: ```def to_list(s):\n    return list(map(lambda x: int(x), s.split(' ')))\n\n\
  def solve(x,y,a,b):\n    cost = 0\n    if b <= 2*a:\n        min_val = min(x,y)\n\
  \        cost += b*min_val\n        x -= min_val\n        y -= min_val\n       \
  \ max_val = max(x,y)\n        cost += max_val*a\n    else:\n        cost = (x+y)*a\n\
  \    print(cost)\n    \nt = int(input())\n\nfor i in range(t):\n    x, y = to_list(input())\n\
  \    a, b = to_list(input())\n    solve(x,y,a,b)```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nWhen new students come to the Specialized Educational\
  \ and Scientific Centre (SESC) they need to start many things from the beginning.\
  \ Sometimes the teachers say (not always unfairly) that we cannot even count. So\
  \ our teachers decided to teach us arithmetics from the start. And what is the best\
  \ way to teach students add and subtract? \u2014 That's right, using counting sticks!\
  \ An here's our new task: \n\nAn expression of counting sticks is an expression\
  \ of type:\n\n[ A sticks][sign +][B sticks][sign =][C sticks] (1 \u2264 A, B, C).\
  \ \n\nSign + consists of two crossed sticks: one vertical and one horizontal. Sign\
  \ = consists of two horizontal sticks. The expression is arithmetically correct\
  \ if A + B = C.\n\nWe've got an expression that looks like A + B = C given by counting\
  \ sticks. Our task is to shift at most one stick (or we can shift nothing) so that\
  \ the expression became arithmetically correct. Note that we cannot remove the sticks\
  \ from the expression, also we cannot shift the sticks from the signs + and =.\n\
  \nWe really aren't fabulous at arithmetics. Can you help us?\n\nInput\n\nThe single\
  \ line contains the initial expression. It is guaranteed that the expression looks\
  \ like A + B = C, where 1 \u2264 A, B, C \u2264 100.\n\nOutput\n\nIf there isn't\
  \ a way to shift the stick so the expression becomes correct, print on a single\
  \ line \"Impossible\" (without the quotes). If there is a way, print the resulting\
  \ expression. Follow the format of the output from the test samples. Don't print\
  \ extra space characters.\n\nIf there are multiple correct answers, print any of\
  \ them. For clarifications, you are recommended to see the test samples.\n\nExamples\n\
  \nInput\n\n||+|=|||||\n\n\nOutput\n\n|||+|=||||\n\n\nInput\n\n|||||+||=||\n\n\n\
  Output\n\nImpossible\n\n\nInput\n\n|+|=||||||\n\n\nOutput\n\nImpossible\n\n\nInput\n\
  \n||||+||=||||||\n\n\nOutput\n\n||||+||=||||||\n\nNote\n\nIn the first sample we\
  \ can shift stick from the third group of sticks to the first one.\n\nIn the second\
  \ sample we cannot shift vertical stick from + sign to the second group of sticks.\
  \ So we cannot make a - sign.\n\nThere is no answer in the third sample because\
  \ we cannot remove sticks from the expression.\n\nIn the forth sample the initial\
  \ expression is already arithmetically correct and that is why we don't have to\
  \ shift sticks.\nA: ```v = input().split('+')\na = len(v[0])\nv = v[1].split('=')\n\
  b = len(v[0])\nc = len(v[1])\n\ndef good(a, b, c):\n    return a+b==c and a>0 and\
  \ b>0 and c>0\n\nif good(a-1, b, c+1):\n    a = a-1\n    c = c+1\n\nif good(a, b-1,\
  \ c+1):\n    b = b-1\n    c = c+1\n\nif good(a+1, b, c-1):\n    a = a+1\n    c =\
  \ c-1\n\nif good(a, b+1, c-1):\n    b = b+1\n    c = c-1\n\nif a+b==c:\n    print('|'*a+'+'+'|'*b+'='+'|'*c)\n\
  else:\n    print(\"Impossible\")```\nQ: Write python code to solve the following\
  \ coding problem that obeys the constraints and passes the example test cases. The\
  \ output code needs to read from and write to standard IO. Please wrap your code\
  \ answer using ```:\nBerland State University has received a new update for the\
  \ operating system. Initially it is installed only on the 1-st computer.\n\nUpdate\
  \ files should be copied to all n computers. The computers are not connected to\
  \ the internet, so the only way to transfer update files from one computer to another\
  \ is to copy them using a patch cable (a cable connecting two computers directly).\
  \ Only one patch cable can be connected to a computer at a time. Thus, from any\
  \ computer where the update files are installed, they can be copied to some other\
  \ computer in exactly one hour.\n\nYour task is to find the minimum number of hours\
  \ required to copy the update files to all n computers if there are only k patch\
  \ cables in Berland State University.\n\nInput\n\nThe first line contains a single\
  \ integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nEach test\
  \ case consists of a single line that contains two integers n and k (1 \u2264 k\
  \ \u2264 n \u2264 10^{18}) \u2014 the number of computers and the number of patch\
  \ cables.\n\nOutput\n\nFor each test case print one integer \u2014 the minimum number\
  \ of hours required to copy the update files to all n computers.\n\nExample\n\n\
  Input\n\n\n4\n8 3\n6 6\n7 1\n1 1\n\n\nOutput\n\n\n4\n3\n6\n0\n\nNote\n\nLet's consider\
  \ the test cases of the example:\n\n  * n=8, k=3: \n    1. during the first hour,\
  \ we copy the update files from the computer 1 to the computer 2; \n    2. during\
  \ the second hour, we copy the update files from the computer 1 to the computer\
  \ 3, and from the computer 2 to the computer 4; \n    3. during the third hour,\
  \ we copy the update files from the computer 1 to the computer 5, from the computer\
  \ 2 to the computer 6, and from the computer 3 to the computer 7; \n    4. during\
  \ the fourth hour, we copy the update files from the computer 2 to the computer\
  \ 8. \n  * n=6, k=6: \n    1. during the first hour, we copy the update files from\
  \ the computer 1 to the computer 2; \n    2. during the second hour, we copy the\
  \ update files from the computer 1 to the computer 3, and from the computer 2 to\
  \ the computer 4; \n    3. during the third hour, we copy the update files from\
  \ the computer 1 to the computer 5, and from the computer 2 to the computer 6. \n\
  \  * n=7, k=1: \n    1. during the first hour, we copy the update files from the\
  \ computer 1 to the computer 2; \n    2. during the second hour, we copy the update\
  \ files from the computer 1 to the computer 3; \n    3. during the third hour, we\
  \ copy the update files from the computer 1 to the computer 4; \n    4. during the\
  \ fourth hour, we copy the update files from the computer 4 to the computer 5; \n\
  \    5. during the fifth hour, we copy the update files from the computer 4 to the\
  \ computer 6; \n    6. during the sixth hour, we copy the update files from the\
  \ computer 3 to the computer 7. \nA:"
question: "Berland State University has received a new update for the operating system.\
  \ Initially it is installed only on the 1-st computer.\n\nUpdate files should be\
  \ copied to all n computers. The computers are not connected to the internet, so\
  \ the only way to transfer update files from one computer to another is to copy\
  \ them using a patch cable (a cable connecting two computers directly). Only one\
  \ patch cable can be connected to a computer at a time. Thus, from any computer\
  \ where the update files are installed, they can be copied to some other computer\
  \ in exactly one hour.\n\nYour task is to find the minimum number of hours required\
  \ to copy the update files to all n computers if there are only k patch cables in\
  \ Berland State University.\n\nInput\n\nThe first line contains a single integer\
  \ t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nEach test case\
  \ consists of a single line that contains two integers n and k (1 \u2264 k \u2264\
  \ n \u2264 10^{18}) \u2014 the number of computers and the number of patch cables.\n\
  \nOutput\n\nFor each test case print one integer \u2014 the minimum number of hours\
  \ required to copy the update files to all n computers.\n\nExample\n\nInput\n\n\n\
  4\n8 3\n6 6\n7 1\n1 1\n\n\nOutput\n\n\n4\n3\n6\n0\n\nNote\n\nLet's consider the\
  \ test cases of the example:\n\n  * n=8, k=3: \n    1. during the first hour, we\
  \ copy the update files from the computer 1 to the computer 2; \n    2. during the\
  \ second hour, we copy the update files from the computer 1 to the computer 3, and\
  \ from the computer 2 to the computer 4; \n    3. during the third hour, we copy\
  \ the update files from the computer 1 to the computer 5, from the computer 2 to\
  \ the computer 6, and from the computer 3 to the computer 7; \n    4. during the\
  \ fourth hour, we copy the update files from the computer 2 to the computer 8. \n\
  \  * n=6, k=6: \n    1. during the first hour, we copy the update files from the\
  \ computer 1 to the computer 2; \n    2. during the second hour, we copy the update\
  \ files from the computer 1 to the computer 3, and from the computer 2 to the computer\
  \ 4; \n    3. during the third hour, we copy the update files from the computer\
  \ 1 to the computer 5, and from the computer 2 to the computer 6. \n  * n=7, k=1:\
  \ \n    1. during the first hour, we copy the update files from the computer 1 to\
  \ the computer 2; \n    2. during the second hour, we copy the update files from\
  \ the computer 1 to the computer 3; \n    3. during the third hour, we copy the\
  \ update files from the computer 1 to the computer 4; \n    4. during the fourth\
  \ hour, we copy the update files from the computer 4 to the computer 5; \n    5.\
  \ during the fifth hour, we copy the update files from the computer 4 to the computer\
  \ 6; \n    6. during the sixth hour, we copy the update files from the computer\
  \ 3 to the computer 7. "
samples:
- " ```t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n\
  \    res = 0\n    computers = [0]*n\n    computers[0] = 1\n    while computers.count(0)\
  \ > 0:\n        res += 1\n        for i in range(n-1):\n            if computers[i]\
  \ == 1 and computers[i+1] == 0 and k > 0:\n                computers[i+1] = 1\n\
  \                k -= 1\n    print(res)``` Q:"
- " ```t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n\
  \    res = 0\n    while n > 0:\n        res += 1\n        n -= k\n    print(res)```\
  \  Q:"
test_cases:
  input:
  - '4

    8 3

    6 6

    7 1

    1 1

    '
  - '1

    576460752303423489 576460752303423489

    '
  - '1

    36028797018963968 18014398509481983

    '
  - '4

    576460752303423488 288230376151711743

    576460752303423488 288230376151711744

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '4

    576460752303423487 576460752303423487

    796131459065721 796131459065721

    777 777

    64 64

    '
  - '8

    576460752303423488 288230376151711743

    576460752303423489 288230376151711743

    576460752303423489 288230376151711742

    576460752303423489 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 288230376151711742

    576460752303423487 288230376151711743

    576460752303423487 288230376151711744

    '
  - '7

    576460752303423487 576460752303423486

    576460752303423488 576460752303423486

    576460752303423489 576460752303423486

    1 1

    576460752303423487 576460752303423487

    576460752303423488 576460752303423487

    576460752303423489 576460752303423487

    '
  - '1

    12342 122

    '
  - '2

    576460752303423487 576460752303423487

    576460752303423488 288230376151711743

    '
  - '3

    576460752303423487 576460752303423487

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '2

    576460752303423487 576460752303423487

    765228007342234864 765228007342234864

    '
  - '3

    576460752303423487 576460752303423487

    796131459065721 796131459065721

    777 777

    '
  - '5

    576460752303423487 576460752303423487

    765228007342234864 765228007342234864

    576460752303423489 576460752303423489

    576460752303423486 576460752303423486

    576460752303423488 576460752303423488

    '
  - '5

    576460752303423486 576460752303423486

    576460752303423487 576460752303423487

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    576460752303423490 576460752303423490

    '
  - '10

    576460752303423486 576460752303423486

    576460752303423487 576460752303423487

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    576460752303423490 576460752303423490

    576460752303423486 576460752303423485

    576460752303423487 576460752303423486

    576460752303423488 576460752303423487

    576460752303423489 576460752303423488

    576460752303423490 576460752303423489

    '
  - '13

    576460752303423486 576460752303423486

    576460752303423487 576460752303423487

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    576460752303423490 576460752303423490

    576460752303423488 288230376151711743

    576460752303423488 288230376151711744

    576460752303423488 288230376151711745

    576460752303423486 576460752303423485

    576460752303423487 576460752303423486

    576460752303423488 576460752303423487

    576460752303423489 576460752303423488

    576460752303423490 576460752303423489

    '
  - '1

    9999999999999999 1

    '
  - '5

    576460752303423487 576460752303423487

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    '
  - '1

    288230376151711745 288230376151711744

    '
  - '1

    576460752303423497 576460752303423487

    '
  - '2

    576460752303423488 288230376151711743

    576460752303423488 288230376151711744

    '
  - '1

    576460752303423487 576460752303423457

    '
  - '3

    100000000000000007 1

    1000000000000000000 1

    999999999999999997 1

    '
  - '1

    2147483654 2147483653

    '
  - '1

    72057594037927935 1

    '
  - '11

    576460752303423487 576460752303423486

    576460752303423488 576460752303423486

    576460752303423489 576460752303423486

    1 1

    576460752303423487 576460752303423487

    576460752303423488 576460752303423487

    576460752303423489 576460752303423487

    1 1

    576460752303423487 144115188075855872

    576460752303423488 144115188075855872

    576460752303423489 144115188075855872

    '
  - '1

    100000000000000007 1

    '
  - '1

    576460752303423489 576460752303423488

    '
  - '6

    576460752303423487 576460752303423486

    576460752303423488 576460752303423486

    576460752303423489 576460752303423486

    576460752303423487 576460752303423487

    576460752303423488 576460752303423487

    576460752303423489 576460752303423487

    '
  - '1

    18014398509481984 9007199254740990

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 576460752303423487

    576460752303423487 33333333333

    576460752303423487 777

    576460752303423487 7777

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    123141 123

    33333 33

    1231456 45

    '
  - '2

    576460752303423488 288230376151711743

    1 1

    '
  - '4

    576460752303423488 288230376151711743

    576460752303423488 288230376151711742

    576460752303423487 288230376151711743

    576460752303423487 288230376151711744

    '
  - '5

    576460752303423488 288230376151711743

    576460752303423488 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '1

    576460752303423488 288230376151711743

    '
  - '5

    576460752303423487 576460752303423487

    796131459065721 796131459065721

    777 777

    64 64

    3333333 3333333

    '
  - '2

    100000000000000007 1

    1000000000000000000 1

    '
  - '1

    576460752303423487 576460752303423487

    '
  - '1

    18014398509481984 9007199254740992

    '
  - '1

    99999999999999999 1

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 576460752303423487

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    576460752303423487 7777

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    123141 123

    33333 33

    1231456 45

    '
  - '1

    576460752303423489 84973324920187615

    '
  - '1

    36028797018963968 8102337475949069

    '
  - '4

    576460752303423488 296012779728373882

    576460752303423488 288230376151711744

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '4

    576460752303423487 576460752303423487

    796131459065721 498859015141152

    777 777

    64 64

    '
  - '8

    576460752303423488 288230376151711743

    573610360983926747 288230376151711743

    576460752303423489 288230376151711742

    576460752303423489 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 288230376151711742

    576460752303423487 288230376151711743

    576460752303423487 288230376151711744

    '
  - '1

    12342 63

    '
  - '2

    576460752303423487 576460752303423487

    576460752303423488 422467438778286354

    '
  - '3

    1006979826740564192 576460752303423487

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '2

    756938896424164016 576460752303423487

    765228007342234864 765228007342234864

    '
  - '5

    576460752303423487 576460752303423487

    765228007342234864 765228007342234864

    576460752303423489 576460752303423489

    576460752303423486 576460752303423486

    600364161260234987 576460752303423488

    '
  - '5

    338745042019210614 576460752303423486

    576460752303423487 576460752303423487

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    576460752303423490 576460752303423490

    '
  - '1

    5584498670471405 1

    '
  - '1

    288230376151711745 347545725867297739

    '
  - '2

    576460752303423488 288230376151711743

    576460752303423488 406739505644339647

    '
  - '3

    100000000000000007 1

    1000000000000000000 2

    999999999999999997 1

    '
  - '1

    92665515207040975 1

    '
  - '1

    576460752303423489 1072549921921277544

    '
  - '1

    22345759006646480 9007199254740990

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 576460752303423487

    576460752303423487 33333333333

    576460752303423487 777

    576460752303423487 7777

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    156178 123

    33333 33

    1231456 45

    '
  - '2

    576460752303423488 441052198306143857

    1 1

    '
  - '4

    576460752303423488 288230376151711743

    576460752303423488 288230376151711742

    576460752303423487 478137135568980376

    576460752303423487 288230376151711744

    '
  - '5

    576460752303423488 288230376151711743

    576460752303423488 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '5

    576460752303423487 576460752303423487

    796131459065721 796131459065721

    777 180

    64 64

    3333333 3333333

    '
  - '2

    198133109352003863 1

    1000000000000000000 1

    '
  - '1

    18014398509481984 9952236807356478

    '
  - '1

    99999999999999999 2

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 576460752303423487

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    731384734814868399 7777

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    123141 123

    33333 33

    1231456 45

    '
  - '1

    665082269836926802 84973324920187615

    '
  - '8

    576460752303423488 288230376151711743

    573610360983926747 288230376151711743

    576460752303423489 288230376151711742

    576460752303423489 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 288230376151711744

    '
  - '1

    23692 63

    '
  - '2

    756938896424164016 576460752303423487

    765228007342234864 193473259907647950

    '
  - '3

    100000000000000007 1

    1000000000000000000 2

    999999999999999997 2

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 576460752303423487

    576460752303423487 33333333333

    576460752303423487 777

    576460752303423487 15525

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    156178 123

    33333 33

    1231456 45

    '
  - '4

    438686910129423284 288230376151711743

    576460752303423488 288230376151711742

    576460752303423487 478137135568980376

    576460752303423487 288230376151711744

    '
  - '5

    1052189008578792529 288230376151711743

    576460752303423488 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 576460752303423489

    '
  - '1

    1393473992317131375 288230376151711743

    '
  - '2

    198133109352003863 1

    1000000000000000000 2

    '
  - '1

    99999999999999999 3

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 576460752303423487

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    731384734814868399 7777

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    123141 123

    33333 33

    958538 45

    '
  - '1

    665082269836926802 73971205690569066

    '
  - '1

    57955413354258842 2708956478981140

    '
  - '4

    576460752303423487 576460752303423487

    796131459065721 106312181976715

    777 328

    64 64

    '
  - '8

    576460752303423488 288230376151711743

    1069986173455979449 288230376151711743

    576460752303423489 288230376151711742

    576460752303423489 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 288230376151711744

    '
  - '1

    21218 63

    '
  - '3

    100000000000000007 1

    1000000000000000000 2

    199439626409461275 2

    '
  - '1

    17889148574973178 4361573159614382

    '
  - '1

    2707831306838620402 288230376151711743

    '
  - '2

    330294356489090543 1

    1000000000000000000 2

    '
  - '1

    576460752303423487 5721986239919536

    '
  - '1

    186706612067897621 1

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 145169272165547619

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    731384734814868399 7777

    576460752303423487 7777

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    123141 123

    33333 33

    958538 45

    '
  - '1

    419386657744848258 73971205690569066

    '
  - '1

    57955413354258842 1278845837856780

    '
  - '8

    576460752303423488 288230376151711743

    1069986173455979449 288230376151711743

    273910326631851516 288230376151711742

    576460752303423489 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 288230376151711744

    '
  - '1

    21218 81

    '
  - '3

    100000000000000007 1

    1000000000000000000 1

    199439626409461275 2

    '
  - '4

    438686910129423284 288230376151711743

    576460752303423488 26090557950303498

    576460752303423487 381081233129599352

    576460752303423487 288230376151711744

    '
  - '5

    1052189008578792529 288230376151711743

    576460752303423488 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '2

    279582984614204037 1

    1000000000000000000 2

    '
  - '1

    999699869714122666 5721986239919536

    '
  - '1

    136909694156800206 1

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 145169272165547619

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    731384734814868399 7777

    576460752303423487 4547

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    123141 123

    33333 33

    958538 45

    '
  - '1

    57955413354258842 1517253810256635

    '
  - '1

    35339 81

    '
  - '3

    100000000000000007 1

    1000000000000000100 1

    199439626409461275 2

    '
  - '5

    1052189008578792529 288230376151711743

    1066238918077413163 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    999699869714122666 752297434688247

    '
  - '1

    57955413354258842 48716484110037

    '
  - '8

    576460752303423488 288230376151711743

    1069986173455979449 288230376151711743

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    58230 81

    '
  - '1

    288230376151711745 19606871141413551

    '
  - '2

    576460752303423488 288230376151711743

    1392068768167769068 387679987103285534

    '
  - '3

    100000000000000007 1

    1000000000000000100 1

    199439626409461275 4

    '
  - '1

    33792069632611585 253880061566968

    '
  - '5

    2069571903025448853 288230376151711743

    1066238918077413163 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    999699869714122666 822710958033122

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 184127442999364106

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    731384734814868399 7777

    576460752303423487 4547

    1024 1024

    1024 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    72754 123

    33333 33

    958538 45

    '
  - '1

    419386657744848258 7347822429145502

    '
  - '1

    57076349527960488 48716484110037

    '
  - '8

    576460752303423488 288230376151711743

    1069986173455979449 129071833086796819

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    58230 1

    '
  - '2

    576460752303423488 288230376151711743

    1392068768167769068 31577938236661935

    '
  - '3

    100000000000000007 1

    1000000000000000100 1

    254301973049161347 4

    '
  - '4

    438686910129423284 288230376151711743

    651373332023772467 26090557950303498

    566320110449317895 381081233129599352

    385474274844613548 288230376151711744

    '
  - '5

    3871917438495213381 288230376151711743

    1066238918077413163 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    999699869714122666 1226036705637709

    '
  - '15

    576460752303423488 576460752303423488

    576460752303423487 184127442999364106

    576460752303423487 33333333333

    576460752303423489 576460752303423489

    731384734814868399 7777

    576460752303423487 4547

    1024 1024

    1638 2

    796131459065721 796131459065721

    777 777

    33333333333 33333333333

    33333 33333

    72754 123

    33333 33

    958538 45

    '
  - '1

    812335908517298458 7347822429145502

    '
  - '1

    98749634775277678 48716484110037

    '
  - '8

    576460752303423488 288230376151711743

    1069986173455979449 89490628233531170

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    101998 1

    '
  - '2

    576460752303423488 288230376151711743

    1289557564884543096 31577938236661935

    '
  - '1

    61182983424718011 253880061566968

    '
  - '5

    3871917438495213381 240023209444334543

    1066238918077413163 20699890969173725

    576460752303423489 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    1166894255962327616 1226036705637709

    '
  - '1

    812335908517298458 8992843827973634

    '
  - '1

    98749634775277678 77057287822349

    '
  - '8

    576460752303423488 288230376151711743

    218248843413266996 89490628233531170

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    576460752303423489 288230376151711745

    576460752303423488 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    101998 2

    '
  - '2

    398808134325693770 288230376151711743

    1289557564884543096 31577938236661935

    '
  - '1

    99526492766582228 253880061566968

    '
  - '5

    3871917438495213381 240023209444334543

    1066238918077413163 20699890969173725

    396991437981072709 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    1433062929759090723 1226036705637709

    '
  - '1

    596151828658909685 8992843827973634

    '
  - '1

    98749634775277678 119089166489817

    '
  - '8

    576460752303423488 288230376151711743

    218248843413266996 89490628233531170

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    576460752303423489 288230376151711745

    733829421368580235 562541851040015235

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    9423 2

    '
  - '2

    398808134325693770 288230376151711743

    479664966115353731 31577938236661935

    '
  - '1

    172331973449829844 253880061566968

    '
  - '5

    3871917438495213381 240023209444334543

    940745807470419331 20699890969173725

    396991437981072709 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    1411407187308097965 1226036705637709

    '
  - '1

    253754615532981015 8992843827973634

    '
  - '1

    98749634775277678 168557399333740

    '
  - '1

    11250 2

    '
  - '2

    398808134325693770 288230376151711743

    916639445257333012 31577938236661935

    '
  - '1

    172331973449829844 449490257352445

    '
  - '5

    3871917438495213381 138162529340364912

    940745807470419331 20699890969173725

    396991437981072709 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 38296780938869285

    '
  - '1

    535913951516986686 1226036705637709

    '
  - '1

    253754615532981015 9992473776640431

    '
  - '1

    117334342290022150 168557399333740

    '
  - '1

    11250 1

    '
  - '1

    164189539283238225 449490257352445

    '
  - '5

    3871917438495213381 138162529340364912

    940745807470419331 20699890969173725

    396991437981072709 288230376151711745

    576460752303423488 576460752303423488

    576460752303423489 61487331566890148

    '
  - '1

    353385980066963150 1226036705637709

    '
  - '1

    253754615532981015 3487890671910834

    '
  - '1

    117334342290022150 252272792050

    '
  - '8

    576460752303423488 288230376151711743

    218248843413266996 28804335975490037

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    744433853909444746 288230376151711745

    733829421368580235 554457258097152028

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    17716 1

    '
  - '1

    391191359024542848 6004274336980858

    '
  - '1

    164189539283238225 223609507610989

    '
  - '1

    353385980066963150 69833371073510

    '
  - '1

    212416322283211918 3487890671910834

    '
  - '1

    192803572573544521 252272792050

    '
  - '8

    576460752303423488 288230376151711743

    218248843413266996 47631649680562510

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    744433853909444746 288230376151711745

    733829421368580235 554457258097152028

    576460752303423487 288230376151711743

    576460752303423487 408171183242036941

    '
  - '1

    17716 2

    '
  - '1

    391191359024542848 885533905281406

    '
  - '1

    186147947419773459 223609507610989

    '
  - '1

    463663992935083403 69833371073510

    '
  - '1

    232868782628632177 3487890671910834

    '
  - '1

    39000411735058801 252272792050

    '
  - '8

    576460752303423488 288230376151711743

    218248843413266996 47631649680562510

    273910326631851516 288230376151711742

    1093556076853264403 288230376151711744

    744433853909444746 288230376151711745

    733829421368580235 554457258097152028

    576460752303423487 138929521020704400

    576460752303423487 408171183242036941

    '
  - '1

    20387 2

    '
  - '1

    391191359024542848 1309469318063754

    '
  - '2

    618096702150599042 227401921372805554

    916639445257333012 31577938236661935

    '
  - '1

    186147947419773459 127929358410122

    '
  - '1

    2475292206270613933 139156731950569205

    '
  - '1

    578268005446605589 69833371073510

    '
  - '1

    232868782628632177 6013194441457039

    '
  - '1

    23578440000186850 252272792050

    '
  - '1

    20044 2

    '
  - '1

    391191359024542848 1781384608308305

    '
  - '1

    128534644102189536 127929358410122

    '
  - '1

    2475292206270613933 172213360249442380

    '
  - '1

    69829392370167030 69833371073510

    '
  - '1

    232868782628632177 11357628458976513

    '
  - '1

    23578440000186850 64969954881

    '
  - '1

    21094 2

    '
  - '1

    51399027142288335 127929358410122

    '
  - '1

    2475292206270613933 117065079815599074

    '
  - '1

    69829392370167030 55448130862260

    '
  - '1

    232868782628632177 3899799444837417

    '
  - '1

    23578440000186850 37343420742

    '
  - '1

    206142813593990108 1781384608308305

    '
  - '1

    31686459966420414 127929358410122

    '
  - '1

    68879391454700147 55448130862260

    '
  - '1

    232868782628632177 2839161475378505

    '
  - '1

    20120389496277875 37343420742

    '
  - '1

    405349515230169534 1781384608308305

    '
  - '2

    233587754783332418 214599373899924602

    894131717907755719 31577938236661935

    '
  - '1

    31686459966420414 11392624248028

    '
  - '1

    79421984294132518 55448130862260

    '
  - '1

    42318569672425292 2839161475378505

    '
  - '1

    20120389496277875 54127331315

    '
  - '1

    84709683584033592 1781384608308305

    '
  - '1

    31686459966420414 9653721324634

    '
  - '1

    52896639562307991 55448130862260

    '
  - '1

    25562679825225156 54127331315

    '
  - '1

    84709683584033592 2208956515559990

    '
  - '2

    229919224778780547 214599373899924602

    1187163437005029455 31577938236661935

    '
  - '1

    31686459966420414 11600291986760

    '
  - '1

    52896639562307991 60061581740986

    '
  - '1

    35289074767609387 54127331315

    '
  - '2

    229919224778780547 214599373899924602

    1187163437005029455 52365950894462239

    '
  - '1

    31686459966420414 11322480608714

    '
  - '1

    41114992980847182 60061581740986

    '
  - '1

    35289074767609387 1020197956

    '
  - '1

    1854319917209536 2208956515559990

    '
  - '2

    229919224778780547 8804185761153695

    1187163437005029455 52365950894462239

    '
  - '1

    37278079257133250 11322480608714

    '
  - '1

    41114992980847182 86699861831000

    '
  - '1

    35289074767609387 1693893804

    '
  - '2

    229919224778780547 8804185761153695

    1187163437005029455 15208149467321295

    '
  - '1

    48189304917061982 11322480608714

    '
  - '1

    41114992980847182 11619833137893

    '
  - '1

    23230978051654278 1693893804

    '
  - '2

    229919224778780547 11617370083376628

    1187163437005029455 15208149467321295

    '
  - '1

    48189304917061982 14199771832757

    '
  - '1

    41114992980847182 3307194259454

    '
  - '1

    5901895745588267 1693893804

    '
  - '2

    229919224778780547 5734246424470119

    1187163437005029455 15208149467321295

    '
  output:
  - '4

    3

    6

    0

    '
  - '60

    '
  - '56

    '
  - '60

    59

    59

    60

    '
  - '59

    50

    10

    6

    '
  - '60

    60

    60

    60

    60

    60

    59

    59

    '
  - '59

    59

    60

    0

    59

    59

    60

    '
  - '108

    '
  - '59

    60

    '
  - '59

    59

    60

    '
  - '59

    60

    '
  - '59

    50

    10

    '
  - '59

    60

    60

    59

    59

    '
  - '59

    59

    59

    60

    60

    '
  - '59

    59

    59

    60

    60

    59

    59

    59

    60

    60

    '
  - '59

    59

    59

    60

    60

    60

    59

    59

    59

    59

    59

    60

    60

    '
  - '9999999999999998

    '
  - '59

    50

    10

    35

    16

    '
  - '59

    '
  - '60

    '
  - '60

    59

    '
  - '59

    '
  - '100000000000000006

    999999999999999999

    999999999999999996

    '
  - '32

    '
  - '72057594037927934

    '
  - '59

    59

    60

    0

    59

    59

    60

    0

    60

    60

    61

    '
  - '100000000000000006

    '
  - '60

    '
  - '59

    59

    60

    59

    59

    60

    '
  - '55

    '
  - '59

    59

    17293857

    741905730120245

    74123794818506

    74123794818506

    10

    512

    50

    10

    35

    16

    1008

    1015

    27371

    '
  - '60

    0

    '
  - '60

    60

    59

    59

    '
  - '60

    59

    60

    59

    60

    '
  - '60

    '
  - '59

    50

    10

    6

    22

    '
  - '100000000000000006

    999999999999999999

    '
  - '59

    '
  - '54

    '
  - '99999999999999998

    '
  - '59

    59

    17293857

    60

    74123794818506

    74123794818506

    10

    512

    50

    10

    35

    16

    1008

    1015

    27371

    '
  - '63

    '
  - '57

    '
  - '59

    59

    59

    60

    '
  - '59

    50

    10

    6

    '
  - '60

    59

    60

    60

    60

    60

    59

    59

    '
  - '201

    '
  - '59

    59

    '
  - '60

    59

    60

    '
  - '60

    60

    '
  - '59

    60

    60

    59

    60

    '
  - '59

    59

    59

    60

    60

    '
  - '5584498670471404

    '
  - '59

    '
  - '60

    59

    '
  - '100000000000000006

    500000000000000000

    999999999999999996

    '
  - '92665515207040974

    '
  - '60

    '
  - '55

    '
  - '59

    59

    17293857

    741905730120245

    74123794818506

    74123794818506

    10

    512

    50

    10

    35

    16

    1276

    1015

    27371

    '
  - '59

    0

    '
  - '60

    60

    59

    59

    '
  - '60

    82

    60

    59

    60

    '
  - '59

    50

    11

    6

    22

    '
  - '198133109352003862

    999999999999999999

    '
  - '54

    '
  - '50000000000000000

    '
  - '59

    59

    17293857

    60

    94044584648960

    74123794818506

    10

    512

    50

    10

    35

    16

    1008

    1015

    27371

    '
  - '64

    '
  - '60

    59

    60

    60

    60

    59

    59

    59

    '
  - '382

    '
  - '60

    61

    '
  - '100000000000000006

    500000000000000000

    499999999999999999

    '
  - '59

    59

    17293857

    741905730120245

    37131127362553

    74123794818506

    10

    512

    50

    10

    35

    16

    1276

    1015

    27371

    '
  - '59

    60

    59

    59

    '
  - '61

    82

    60

    59

    60

    '
  - '62

    '
  - '198133109352003862

    500000000000000000

    '
  - '33333333333333334

    '
  - '59

    59

    17293857

    60

    94044584648960

    74123794818506

    10

    512

    50

    10

    35

    16

    1008

    1015

    21306

    '
  - '65

    '
  - '72

    '
  - '59

    54

    10

    6

    '
  - '60

    61

    60

    60

    60

    59

    59

    59

    '
  - '342

    '
  - '100000000000000006

    500000000000000000

    99719813204730638

    '
  - '56

    '
  - '67

    '
  - '330294356489090542

    500000000000000000

    '
  - '153

    '
  - '186706612067897620

    '
  - '59

    60

    17293857

    60

    94044584648960

    74123794818506

    10

    512

    50

    10

    35

    16

    1008

    1015

    21306

    '
  - '61

    '
  - '95

    '
  - '60

    61

    58

    60

    60

    59

    59

    59

    '
  - '268

    '
  - '100000000000000006

    999999999999999999

    99719813204730638

    '
  - '59

    76

    59

    59

    '
  - '61

    82

    60

    59

    70

    '
  - '279582984614204036

    500000000000000000

    '
  - '227

    '
  - '136909694156800205

    '
  - '59

    60

    17293857

    60

    94044584648960

    126778260898060

    10

    512

    50

    10

    35

    16

    1008

    1015

    21306

    '
  - '88

    '
  - '442

    '
  - '100000000000000006

    1000000000000000099

    99719813204730638

    '
  - '61

    105

    60

    59

    70

    '
  - '1378

    '
  - '1235

    '
  - '60

    61

    58

    61

    60

    59

    59

    59

    '
  - '725

    '
  - '68

    '
  - '60

    62

    '
  - '100000000000000006

    1000000000000000099

    49859906602365320

    '
  - '180

    '
  - '65

    105

    60

    59

    70

    '
  - '1264

    '
  - '59

    60

    17293857

    60

    94044584648960

    126778260898060

    10

    512

    50

    10

    35

    16

    598

    1015

    21306

    '
  - '109

    '
  - '1217

    '
  - '60

    65

    58

    61

    60

    59

    59

    59

    '
  - '58229

    '
  - '60

    98

    '
  - '100000000000000006

    1000000000000000099

    63575493262290338

    '
  - '59

    79

    59

    59

    '
  - '71

    105

    60

    59

    70

    '
  - '865

    '
  - '59

    60

    17293857

    60

    94044584648960

    126778260898060

    10

    819

    50

    10

    35

    16

    598

    1015

    21306

    '
  - '163

    '
  - '2072

    '
  - '60

    68

    58

    61

    60

    59

    59

    59

    '
  - '101997

    '
  - '60

    95

    '
  - '288

    '
  - '73

    105

    60

    59

    70

    '
  - '1001

    '
  - '143

    '
  - '1327

    '
  - '60

    58

    58

    61

    60

    59

    59

    59

    '
  - '50999

    '
  - '59

    95

    '
  - '439

    '
  - '73

    105

    59

    59

    70

    '
  - '1219

    '
  - '119

    '
  - '876

    '
  - '60

    58

    58

    61

    60

    60

    59

    59

    '
  - '4712

    '
  - '59

    70

    '
  - '726

    '
  - '73

    99

    59

    59

    70

    '
  - '1201

    '
  - '81

    '
  - '633

    '
  - '5625

    '
  - '59

    83

    '
  - '432

    '
  - '84

    99

    59

    59

    70

    '
  - '487

    '
  - '78

    '
  - '743

    '
  - '11249

    '
  - '414

    '
  - '84

    99

    59

    59

    65

    '
  - '338

    '
  - '124

    '
  - '465146

    '
  - '60

    62

    58

    61

    60

    60

    59

    59

    '
  - '17715

    '
  - '117

    '
  - '782

    '
  - '5106

    '
  - '112

    '
  - '764304

    '
  - '60

    60

    58

    61

    60

    60

    59

    59

    '
  - '8858

    '
  - '491

    '
  - '880

    '
  - '6685

    '
  - '118

    '
  - '154634

    '
  - '60

    60

    58

    61

    60

    60

    61

    59

    '
  - '10194

    '
  - '349

    '
  - '60

    83

    '
  - '1501

    '
  - '74

    '
  - '8326

    '
  - '91

    '
  - '93501

    '
  - '10022

    '
  - '270

    '
  - '1051

    '
  - '71

    '
  - '1045

    '
  - '73

    '
  - '362948

    '
  - '10547

    '
  - '448

    '
  - '77

    '
  - '1305

    '
  - '111

    '
  - '631429

    '
  - '166

    '
  - '294

    '
  - '1287

    '
  - '133

    '
  - '538828

    '
  - '278

    '
  - '58

    83

    '
  - '2824

    '
  - '1478

    '
  - '66

    '
  - '371759

    '
  - '98

    '
  - '3325

    '
  - '999

    '
  - '472305

    '
  - '89

    '
  - '58

    92

    '
  - '2775

    '
  - '926

    '
  - '651999

    '
  - '58

    78

    '
  - '2841

    '
  - '730

    '
  - '34590448

    '
  - '51

    '
  - '79

    78

    '
  - '3335

    '
  - '520

    '
  - '20833140

    '
  - '79

    131

    '
  - '4299

    '
  - '3581

    '
  - '13714572

    '
  - '73

    131

    '
  - '3437

    '
  - '12473

    '
  - '3484249

    '
  - '92

    131

    '
timeout: 2.0
