prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nA priority\
  \ queue is a data structure which maintains a set $S$ of elements, each of with\
  \ an associated value (key), and supports the following operations:\n\n* $insert(S,\
  \ k)$: insert an element $k$ into the set $S$\n* $extractMax(S)$: remove and return\
  \ the element of $S$ with the largest key\n\n\n\nWrite a program which performs\
  \ the $insert(S, k)$ and $extractMax(S)$ operations to a priority queue $S$. The\
  \ priority queue manages a set of integers, which are also keys for the priority.\n\
  \nConstraints\n\n* The number of operations $\\leq 2,000,000$\n* $0 \\leq k \\leq\
  \ 2,000,000,000$\n\nInput\n\nMultiple operations to the priority queue $S$ are given.\
  \ Each operation is given by \"insert $k$\", \"extract\" or \"end\" in a line. Here,\
  \ $k$ represents an integer element to be inserted to the priority queue.\n\nThe\
  \ input ends with \"end\" operation.\n\nOutput\n\nFor each \"extract\" operation,\
  \ print the element extracted from the priority queue $S$ in a line.\n\nExample\n\
  \nInput\n\ninsert 8\ninsert 2\nextract\ninsert 10\nextract\ninsert 11\nextract\n\
  extract\nend\n\n\nOutput\n\n8\n10\n11\n2\nA: ```#coding:utf-8\n#1_9_C\nimport heapq\n\
  \nh = []\nwhile True:\n    cmd = input().split()\n    if cmd[0] == \"end\":\n  \
  \      break\n    elif cmd[0] == \"insert\":\n        heapq.heappush(h, -int(cmd[1]))\n\
  \    else:\n        print(-heapq.heappop(h))```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nYou have n gifts and you want to give all of them\
  \ to children. Of course, you don't want to offend anyone, so all gifts should be\
  \ equal between each other. The i-th gift consists of a_i candies and b_i oranges.\n\
  \nDuring one move, you can choose some gift 1 \u2264 i \u2264 n and do one of the\
  \ following operations:\n\n  * eat exactly one candy from this gift (decrease a_i\
  \ by one); \n  * eat exactly one orange from this gift (decrease b_i by one); \n\
  \  * eat exactly one candy and exactly one orange from this gift (decrease both\
  \ a_i and b_i by one). \n\n\n\nOf course, you can not eat a candy or orange if it's\
  \ not present in the gift (so neither a_i nor b_i can become less than zero).\n\n\
  As said above, all gifts should be equal. This means that after some sequence of\
  \ moves the following two conditions should be satisfied: a_1 = a_2 = ... = a_n\
  \ and b_1 = b_2 = ... = b_n (and a_i equals b_i is not necessary).\n\nYour task\
  \ is to find the minimum number of moves required to equalize all the given gifts.\n\
  \nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the\
  \ input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test\
  \ cases. Then t test cases follow.\n\nThe first line of the test case contains one\
  \ integer n (1 \u2264 n \u2264 50) \u2014 the number of gifts. The second line of\
  \ the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9),\
  \ where a_i is the number of candies in the i-th gift. The third line of the test\
  \ case contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9), where\
  \ b_i is the number of oranges in the i-th gift.\n\nOutput\n\nFor each test case,\
  \ print one integer: the minimum number of moves required to equalize all the given\
  \ gifts.\n\nExample\n\nInput\n\n\n5\n3\n3 5 6\n3 2 3\n5\n1 2 3 4 5\n5 4 3 2 1\n\
  3\n1 1 1\n2 2 2\n6\n1 1000000000 1000000000 1000000000 1000000000 1000000000\n1\
  \ 1 1 1 1 1\n3\n10 12 8\n7 5 4\n\n\nOutput\n\n\n6\n16\n0\n4999999995\n7\n\nNote\n\
  \nIn the first test case of the example, we can perform the following sequence of\
  \ moves:\n\n  * choose the first gift and eat one orange from it, so a = [3, 5,\
  \ 6] and b = [2, 2, 3]; \n  * choose the second gift and eat one candy from it,\
  \ so a = [3, 4, 6] and b = [2, 2, 3]; \n  * choose the second gift and eat one candy\
  \ from it, so a = [3, 3, 6] and b = [2, 2, 3]; \n  * choose the third gift and eat\
  \ one candy and one orange from it, so a = [3, 3, 5] and b = [2, 2, 2]; \n  * choose\
  \ the third gift and eat one candy from it, so a = [3, 3, 4] and b = [2, 2, 2];\
  \ \n  * choose the third gift and eat one candy from it, so a = [3, 3, 3] and b\
  \ = [2, 2, 2]. \nA: ```# Gifts Fixing\n# https://codeforces.com/problemset/problem/1399/B\n\
  \n\nt = int(input())\n\nfor _ in range(t):\n\t\n\tn = int(input())\n\ta = list(map(int,\
  \ input().split()))\n\tb = list(map(int, input().split()))\n\t\n\tmin_a = min(a)\n\
  \tmin_b = min(b)\n\n\tcount = 0\n\t\n\tfor i in range(n):\n\t\tdiff_a = a[i] - min_a\n\
  \t\tdiff_b = b[i] - min_b\n\t\t\n\t\tcount += max(diff_a, diff_b)\n\t\n\tprint(count)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nDenote a cyclic sequence\
  \ of size n as an array s such that s_n is adjacent to s_1. The segment s[r, l]\
  \ where l < r is the concatenation of s[r, n] and s[1, l].\n\nYou are given an array\
  \ a consisting of n integers. Define b as the cyclic sequence obtained from concatenating\
  \ m copies of a. Note that b has size n \u22C5 m.\n\nYou are given an integer k\
  \ where k = 1 or k is a prime number. Find the number of different segments in b\
  \ where the sum of elements in the segment is divisible by k.\n\nTwo segments are\
  \ considered different if the set of indices of the segments are different. For\
  \ example, when n = 3 and m = 2, the set of indices for segment s[2, 5] is \\{2,\
  \ 3, 4, 5\\}, and for segment s[5, 2] is \\{5, 6, 1, 2\\}. In particular, the segments\
  \ s[1, 6], s[2,1], \u2026, s[6, 5] are considered as the same segment.\n\nOutput\
  \ the answer modulo 10^9 + 7.\n\nInput\n\nThe first line contains three integers\
  \ n, m, and k (1 \u2264 n, m, k \u2264 2 \u22C5 10^5, k = 1 or k is a prime number).\n\
  \nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264\
  \ 2 \u22C5 10^5).\n\nOutput\n\nOutput an integer denoting the number of different\
  \ segments in b where the sum of elements in the segment is divisible by k, modulo\
  \ 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 1 5\n1 2 3 4 3\n\n\nOutput\n\n\n4\n\n\n\
  Input\n\n\n5 1 5\n1 2 3 4 5\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n5 4 5\n1 2 3 4 5\n\
  \n\nOutput\n\n\n125\n\nNote\n\nIn the first example, all valid segments are [1,4],\
  \ [2, 3], [3, 5], and [4, 2].\n\nIn the second example, one of the valid segments\
  \ is [1, 5].\nA:"
question: "Denote a cyclic sequence of size n as an array s such that s_n is adjacent\
  \ to s_1. The segment s[r, l] where l < r is the concatenation of s[r, n] and s[1,\
  \ l].\n\nYou are given an array a consisting of n integers. Define b as the cyclic\
  \ sequence obtained from concatenating m copies of a. Note that b has size n \u22C5\
  \ m.\n\nYou are given an integer k where k = 1 or k is a prime number. Find the\
  \ number of different segments in b where the sum of elements in the segment is\
  \ divisible by k.\n\nTwo segments are considered different if the set of indices\
  \ of the segments are different. For example, when n = 3 and m = 2, the set of indices\
  \ for segment s[2, 5] is \\{2, 3, 4, 5\\}, and for segment s[5, 2] is \\{5, 6, 1,\
  \ 2\\}. In particular, the segments s[1, 6], s[2,1], \u2026, s[6, 5] are considered\
  \ as the same segment.\n\nOutput the answer modulo 10^9 + 7.\n\nInput\n\nThe first\
  \ line contains three integers n, m, and k (1 \u2264 n, m, k \u2264 2 \u22C5 10^5,\
  \ k = 1 or k is a prime number).\n\nThe second line contains n integers a_1, a_2,\
  \ \u2026, a_n (0 \u2264 a_i \u2264 2 \u22C5 10^5).\n\nOutput\n\nOutput an integer\
  \ denoting the number of different segments in b where the sum of elements in the\
  \ segment is divisible by k, modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 1 5\n\
  1 2 3 4 3\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n5 1 5\n1 2 3 4 5\n\n\nOutput\n\n\n\
  5\n\n\nInput\n\n\n5 4 5\n1 2 3 4 5\n\n\nOutput\n\n\n125\n\nNote\n\nIn the first\
  \ example, all valid segments are [1,4], [2, 3], [3, 5], and [4, 2].\n\nIn the second\
  \ example, one of the valid segments is [1, 5]."
samples:
- " ```# Cyclic Segments\n# https://codeforces.com/problemset/problem/1399/C\n\n\n\
  n, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ntotal_sum\
  \ = sum(a)\ncount = 0\n\nfor i in range(1, m+1):\n\tfor j in range(1, n+1):\n\t\t\
  if (sum(a[j-1:j+i]) % k == 0):\n\t\t\tcount += 1\n\nprint(count % (10**9 + 7))````\n\
  Q:"
- " ```# Cyclic Segments\n# https://codeforces.com/problemset/problem/1399/C\n\n\n\
  import math\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\
  \nprefix_sum = [0]\nfor i in range(n):\n\tprefix_sum.append(prefix_sum[-1] + a[i])\n\
  \ndef count_segments(prefix_sum):\n\tcnt = 0\n\tfor i in range(len(prefix_sum) -\
  \ 1):\n\t\tfor j in range(i + 1, len(prefix_sum)):\n\t\t\tif (prefix_sum[j] - prefix_sum[i])\
  \ % k == 0:\n\t\t\t\tcnt += 1\n\treturn cnt\n\nmod = 10**9 + 7\nprint(count_segments(prefix_sum)\
  \ % mod)````\nQ:"
test_cases:
  input:
  - '5 1 5

    1 2 3 4 3

    '
  - '5 1 5

    1 2 3 4 5

    '
  - '5 4 5

    1 2 3 4 5

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 4 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 4
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 2 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  - '1 200000 103231

    3

    '
  - '1 1 3

    3

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 4
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 2 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  - '1 200000 122519

    3

    '
  - '6 1 5

    1 2 3 4 3

    '
  - '5 1 4

    1 2 3 4 5

    '
  - '5 4 7

    1 2 3 4 5

    '
  - '1 200000 25003

    3

    '
  - '6 1 5

    1 2 3 4 1

    '
  - '5 1 4

    1 4 3 4 5

    '
  - '5 4 7

    1 2 3 5 5

    '
  - '1 157539 25003

    3

    '
  - '5 2 4

    1 4 3 4 5

    '
  - '5 4 7

    1 2 1 5 5

    '
  - '2 157539 25003

    1

    '
  - '5 4 7

    1 2 1 7 5

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 5 5 1 5 5 5 4

    '
  - '2 157539 9896

    1

    '
  - '5 4 2

    1 2 1 7 5

    '
  - '2 11490 9896

    1

    '
  - '5 4 2

    1 2 1 7 0

    '
  - '2 11490 3948

    1

    '
  - '1 4 2

    1 2 1 7 0

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '1 8 2

    1 2 1 7 0

    '
  - '2 13514 4655

    1

    '
  - '1 15 2

    1 2 1 7 0

    '
  - '1 13514 4655

    1

    '
  - '1 13514 168

    1

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '1 24185 168

    1

    '
  - '1 24185 135

    1

    '
  - '2 15 2

    1 1 2 12 0

    '
  - '1 24185 237

    1

    '
  - '2 15 2

    1 0 1 12 -1

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 6 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 7 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '5 1 2

    1 2 3 4 3

    '
  - '6 4 5

    1 2 3 4 5

    '
  - '1 200000 2888

    3

    '
  - '5 1 4

    1 2 3 4 10

    '
  - '5 4 7

    0 2 3 4 5

    '
  - '6 1 2

    1 2 3 4 1

    '
  - '1 53910 25003

    3

    '
  - '11 1 5

    1 1 3 4 1

    '
  - '5 2 5

    1 4 3 4 5

    '
  - '1 157539 44233

    1

    '
  - '4 1 5

    1 1 3 4 2

    '
  - '2 157539 30107

    1

    '
  - '5 4 7

    1 2 1 7 6

    '
  - '2 157539 9896

    0

    '
  - '2 4620 9896

    1

    '
  - '1 11490 3948

    1

    '
  - '2 11490 3200

    1

    '
  - '1 11 2

    1 2 1 7 0

    '
  - '100 101 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '2 24163 4655

    1

    '
  - '1 23 2

    1 2 1 7 0

    '
  - '1 10824 168

    1

    '
  - '1 41725 168

    1

    '
  - '1 16270 135

    1

    '
  - '1 24185 92

    1

    '
  - '2 8 2

    1 1 1 12 -1

    '
  - '2 15 2

    2 0 1 12 -1

    '
  - '2 1 2

    1 0 1 1 -1

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 0 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '6 4 5

    0 2 3 4 5

    '
  - '1 97832 2888

    3

    '
  - '1 239816 25003

    1

    '
  - '5 2 5

    1 4 3 4 8

    '
  - '8 4 7

    1 2 1 5 3

    '
  - '2 157539 55161

    1

    '
  - '5 7 2

    1 2 1 11 5

    '
  - '2 4620 337

    1

    '
  - '1 11490 7563

    1

    '
  - '1 11 2

    0 2 1 7 0

    '
  - '110 100 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 3 2 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '1 16790 4901

    1

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 0 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 4 4 1 5 4 1 4
    2 2 1 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '2 16270 135

    1

    '
  - '1 24185 94

    1

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 0 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 0 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '1 200000 128069

    0

    '
  - '5 1 2

    1 0 3 5 3

    '
  - '6 4 5

    0 2 3 4 6

    '
  - '6 1 5

    2 0 3 0 3

    '
  - '1 239816 11429

    1

    '
  - '8 4 7

    1 2 2 5 3

    '
  - '2 200474 55161

    1

    '
  - '5 7 2

    2 2 1 11 5

    '
  - '2 4620 389

    1

    '
  - '100 101 126611

    5 5 3 1 1 5 3 3 4 6 0 5 1 2 1 4 4 1 5 1 6 1 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '1 16790 9518

    1

    '
  - '1 29023 135

    1

    '
  - '6 4 5

    0 2 3 2 6

    '
  - '1 239816 18916

    1

    '
  - '2 200474 55161

    0

    '
  - '5 7 2

    2 2 2 11 5

    '
  - '2 4620 151

    1

    '
  - '4 11490 7563

    1

    '
  - '1 16790 5777

    1

    '
  - '2 28 2

    0 1 3 12 0

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 0 4 1 4 3 1 5 5 0 2 4 4 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 1 1 2 3 2 1 5 0 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 5 0 10 1 3 1 4 6 0 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 0 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 0 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '1 171674 153195

    0

    '
  - '6 4 4

    0 2 3 2 6

    '
  - '2 135820 55161

    0

    '
  - '2 3956 151

    1

    '
  - '7 11490 7563

    1

    '
  - '1 50 2

    1 5 0 12 0

    '
  - '2 38 2

    0 1 3 12 0

    '
  - '2 2 2

    2 0 1 26 -1

    '
  - '100 100 126611

    7 5 3 1 1 5 3 4 4 3 0 8 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 0 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 7
    2 2 3 5 0 3 4 -1 3 3 1 1 2 3 0 1 5 1 5 5 5 2

    '
  - '6 4 4

    0 2 6 2 6

    '
  - '5 2 4

    2 0 3 0 3

    '
  - '2 135820 55161

    1

    '
  - '1 3956 151

    1

    '
  - '3 38 2

    0 1 3 12 0

    '
  - '3 10 2

    1 1 2 8 -2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 5 0 10 1 3 1 4 6 0 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 0 0 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 0 1 1 2 3 2 1 5 1 5 5 8 2

    '
  - '6 2 4

    0 2 6 2 6

    '
  - '1 3956 14

    1

    '
  - '100 101 126611

    5 5 3 1 1 5 3 3 4 6 0 5 1 2 1 4 4 1 5 1 6 1 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 0 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 1 2 4 5 5 1 3 4 4 4 3 4 4 1 5 4 0 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '3 38 2

    0 0 3 12 0

    '
  - '1 10 2

    1 1 2 8 -2

    '
  - '6 2 4

    0 2 6 2 3

    '
  - '4 4 5

    2 2 2 1 6

    '
  - '2 7 2

    2 1 2 19 5

    '
  - '1 3956 24

    1

    '
  - '3 38 2

    0 0 6 12 0

    '
  - '110 100 126611

    5 10 3 1 1 5 3 4 4 5 0 10 1 3 1 4 6 0 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 0 1 5 1 2 0 0 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 0 1 1 2 3 2 1 5 1 5 5 8 2

    '
  - '2 9 2

    2 1 2 19 5

    '
  - '1 7707 24

    1

    '
  - '1 25 4

    1 4 2 12 1

    '
  - '100 100 126611

    7 8 3 1 1 4 3 4 4 3 0 8 1 3 0 4 6 1 5 1 6 11 3 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 0 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 7
    2 2 3 5 0 3 4 -1 3 3 1 1 2 3 0 1 5 1 5 5 5 2

    '
  - '100 101 126611

    5 5 3 1 1 5 1 3 4 6 0 5 1 2 1 4 4 1 5 1 6 1 4 4 1 1 4 4 2 5 2 2 0 5 1 5 4 5 11
    3 3 0 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 1 2 4 5 5 1 3 4 4 4 3 4 4 1 5 4 0 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 1 5 1 2 5 5 4

    '
  - '110 100 126611

    5 10 3 1 1 5 3 4 4 5 0 10 1 3 1 4 6 0 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 0 1 5 1 2 0 0 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 0 5 1 5 1 1
    4 2 2 3 5 3 4 4 -1 3 0 1 1 2 3 2 1 5 1 5 5 8 2

    '
  - '100 101 126611

    7 8 3 1 1 4 3 4 4 3 1 8 1 3 0 4 6 1 5 1 6 11 3 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 0 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 7
    2 2 3 5 0 3 4 -1 3 3 1 1 2 3 -1 1 5 1 5 5 5 2

    '
  - '100 101 126611

    7 8 3 1 1 4 3 4 4 3 1 8 1 3 1 4 6 1 5 1 6 11 3 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 0 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 7
    2 2 3 5 0 3 4 -1 3 3 1 1 2 3 -1 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 5 4 4 4 0 8 1 3 1 4 1 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 0 2 0 3 2 1 1 5 1 3 4 4 4 3 1 5 5 5 2 4 6 5 1 2 0 4 4 3 2 4 0 5 0 1 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 0 1 2 5 0 2

    '
  - '100 100 126611

    4 5 3 1 1 5 3 4 4 4 0 8 0 3 0 4 7 1 5 1 6 3 4 4 1 1 4 1 1 5 0 2 1 5 1 6 7 5 11
    0 3 0 2 2 2 1 3 2 1 1 5 1 2 4 1 6 3 0 3 5 5 2 4 5 5 1 2 1 4 4 3 0 4 1 5 4 1 1
    2 2 3 5 3 4 4 1 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '110 101 126611

    5 5 3 1 1 5 5 4 4 4 0 8 1 3 1 4 1 1 5 1 6 5 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 0 2 0 3 2 1 1 5 1 3 4 4 4 3 1 5 5 5 2 4 6 5 1 2 0 4 4 3 2 4 0 5 0 1 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 0 1 2 5 0 2

    '
  - '110 110 126611

    1 5 6 1 1 5 3 4 4 3 1 8 1 3 1 4 6 1 5 1 6 6 4 4 0 1 5 4 1 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 0 1 3 2 0 1 2 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 8 4 3 2 4 1 5 5 2 4
    3 2 4 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 0 5 5 9 2

    '
  - '100 100 126611

    4 5 3 1 1 5 3 4 4 4 0 8 0 3 0 4 7 1 5 1 6 3 4 4 1 1 4 1 1 5 0 2 1 5 1 6 7 5 11
    0 3 0 2 2 2 1 2 2 1 1 5 1 2 4 1 6 3 0 3 5 5 2 4 5 5 0 2 1 4 4 3 0 4 1 5 4 1 1
    2 2 3 5 3 4 4 1 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '100 101 126611

    7 8 3 1 1 4 3 4 4 3 1 8 1 3 1 4 6 1 5 1 6 11 3 4 0 1 5 4 2 5 0 2 1 5 1 3 8 5 11
    3 3 2 2 2 2 1 3 2 1 0 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 7
    2 2 6 5 0 0 4 -1 3 3 1 1 2 3 -1 1 5 1 5 5 5 2

    '
  - '110 101 126611

    5 5 3 1 1 5 5 4 4 4 0 7 1 3 1 4 1 1 5 1 6 5 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 0 2 0 3 2 1 1 5 1 3 4 4 4 3 1 5 5 5 2 0 6 5 1 2 0 4 4 3 2 4 0 5 0 2 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 0 1 2 5 0 2

    '
  - '100 101 126611

    7 8 3 1 1 4 3 4 4 3 1 8 1 3 1 4 6 1 5 1 6 11 3 4 0 1 5 4 2 5 0 2 1 5 1 3 8 5 11
    3 3 2 2 2 2 1 3 2 1 0 5 1 2 4 1 1 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 7
    2 2 6 5 0 0 4 -1 3 2 0 1 2 3 -1 1 5 1 5 5 5 2

    '
  - '110 110 126611

    1 5 6 1 1 5 3 4 4 3 1 8 1 3 1 4 6 1 5 1 6 6 4 4 0 1 5 4 1 5 -1 2 1 5 1 3 4 5 11
    3 3 1 2 0 0 1 3 1 0 2 2 0 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 8 4 3 2 4 1 5 5 2 4
    3 2 4 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 0 5 5 9 2

    '
  - '100 100 126611

    7 1 3 1 1 5 3 3 4 7 0 5 1 2 1 7 4 1 5 1 6 5 4 4 1 1 4 4 2 0 2 2 1 9 0 3 4 5 11
    3 3 1 2 2 0 1 3 1 1 0 5 1 2 6 1 4 3 1 10 3 5 2 3 5 6 1 2 4 4 4 6 7 4 1 5 5 0 4
    2 1 3 5 3 4 4 0 0 3 0 1 2 3 2 1 5 1 5 5 5 4

    '
  - '110 100 126611

    5 6 3 1 1 4 2 4 -1 4 -1 15 1 3 1 4 4 0 5 1 6 3 4 4 2 2 4 4 2 5 1 4 1 5 1 1 4 5
    11 3 1 1 2 2 2 2 3 2 1 1 5 1 2 5 1 4 3 1 5 5 5 2 4 5 5 1 2 -1 4 4 3 4 4 1 5 4
    2 4 2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 4
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 8
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  - '6 1 5

    1 1 3 4 1

    '
  - '5 4 7

    1 2 5 5 5

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 8
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 5 5 1 5 5 5 4

    '
  - '1 157539 25003

    1

    '
  - '6 1 5

    1 1 3 4 2

    '
  - '5 2 4

    1 4 3 4 9

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 5 5 1 5 5 5 4

    '
  - '6 1 5

    2 1 3 4 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '2 11490 4655

    1

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '1 15 2

    1 2 1 12 0

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '1 15 2

    1 2 2 12 0

    '
  - '1 15 2

    1 1 2 12 0

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 0 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 5 1 5 5 5 4

    '
  - '2 15 2

    1 1 2 12 -1

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 5 1 5 5 5 2

    '
  - '2 15 2

    1 1 1 12 -1

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 5 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 2 1 2 3 2 1 5 1 5 5 5 2

    '
  - '2 15 2

    1 0 1 1 -1

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 6 1 5 1 6 3 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 4 0 8 1 3 1 4 6 1 5 1 6 6 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 3 0 8 1 3 1 4 6 1 5 1 6 6 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 4 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 3 0 8 1 3 1 4 6 1 5 1 6 6 4 4 1 1 4 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 3 0 8 1 3 1 4 6 1 5 1 6 6 4 4 1 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 3 0 8 1 3 1 4 6 1 5 1 6 6 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 3 0 8 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 6 0 8 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5 11
    3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1 4
    2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 4 4 6 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 4 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 6 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 7 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 1 2 1 4 4 3 2 7 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 2 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 5 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 0 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 1 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 4 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 1 10 1 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 8 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '110 100 126611

    5 5 3 1 1 5 3 4 4 12 1 10 2 3 1 4 6 1 5 1 6 11 4 4 0 1 5 4 2 5 0 2 1 5 1 3 4 5
    11 3 3 1 2 2 0 1 3 2 1 1 5 1 2 4 1 4 3 1 5 5 5 2 4 6 5 0 2 1 8 4 3 2 5 1 5 4 1
    4 2 2 3 5 3 3 4 -1 3 3 1 1 2 3 2 1 5 1 5 5 10 2

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 4 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 4
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 3 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 2 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  - '1 200000 103231

    5

    '
  - '1 1 6

    3

    '
  - '5 1 5

    1 2 3 5 5

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 5 4
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 1 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 2 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  - '6 1 5

    1 2 3 0 3

    '
  - '100 100 126611

    5 5 3 1 1 5 3 3 4 4 2 5 1 2 1 4 4 1 5 1 6 3 4 4 1 1 4 4 2 5 2 2 1 5 1 3 4 0 4
    3 3 1 2 2 2 1 3 2 1 1 5 1 1 4 1 4 3 1 5 5 5 2 4 5 5 1 2 4 4 4 3 4 4 1 5 4 1 4
    2 2 3 5 3 4 4 2 3 3 2 1 2 3 2 3 5 1 5 5 5 4

    '
  output:
  - '4

    '
  - '5

    '
  - '125

    '
  - '0

    '
  - '200000

    '
  - '1

    '
  - '0

    '
  - '200000

    '
  - '7

    '
  - '4

    '
  - '44

    '
  - '1400000

    '
  - '8

    '
  - '6

    '
  - '48

    '
  - '945234

    '
  - '20

    '
  - '61

    '
  - '3938475

    '
  - '52

    '
  - '100

    '
  - '9609879

    '
  - '189

    '
  - '57450

    '
  - '181

    '
  - '103410

    '
  - '5

    '
  - '200

    '
  - '25

    '
  - '121626

    '
  - '105

    '
  - '27028

    '
  - '1081120

    '
  - '300

    '
  - '3458455

    '
  - '4329115

    '
  - '421

    '
  - '2466870

    '
  - '435

    '
  - '5800

    '
  - '5900

    '
  - '6000

    '
  - '10

    '
  - '201

    '
  - '13800000

    '
  - '3

    '
  - '125

    '
  - '15

    '
  - '107820

    '
  - '57

    '
  - '16

    '
  - '472617

    '
  - '2

    '
  - '3308319

    '
  - '40

    '
  - '273830314

    '
  - '4620

    '
  - '22980

    '
  - '149370

    '
  - '55

    '
  - '202

    '
  - '507423

    '
  - '253

    '
  - '692736

    '
  - '10347800

    '
  - '1952400

    '
  - '6336470

    '
  - '113

    '
  - '871

    '
  - '1

    '
  - '6100

    '
  - '80

    '
  - '3228456

    '
  - '2158344

    '
  - '19

    '
  - '116

    '
  - '1417851

    '
  - '603

    '
  - '244860

    '
  - '11490

    '
  - '111

    '
  - '5700

    '
  - '50370

    '
  - '400

    '
  - '7825870

    '
  - '6215545

    '
  - '6200

    '
  - '999799728

    '
  - '9

    '
  - '265

    '
  - '11

    '
  - '4796320

    '
  - '144

    '
  - '2606162

    '
  - '595

    '
  - '207900

    '
  - '101

    '
  - '16790

    '
  - '6210922

    '
  - '88

    '
  - '2877792

    '
  - '758896637

    '
  - '799

    '
  - '559020

    '
  - '252780

    '
  - '33580

    '
  - '1513

    '
  - '500

    '
  - '6300

    '
  - '471790400

    '
  - '121

    '
  - '788017450

    '
  - '415380

    '
  - '804300

    '
  - '1201

    '
  - '2813

    '
  - '13

    '
  - '600

    '
  - '297

    '
  - '27

    '
  - '1222380

    '
  - '102856

    '
  - '7107

    '
  - '471

    '
  - '6500

    '
  - '69

    '
  - '1115592

    '
  - '303

    '
  - '6385

    '
  - '41

    '
  - '30

    '
  - '36

    '
  - '91

    '
  - '648784

    '
  - '12883

    '
  - '6600

    '
  - '153

    '
  - '2473947

    '
  - '150

    '
  - '700

    '
  - '404

    '
  - '6700

    '
  - '606

    '
  - '505

    '
  - '6400

    '
  - '800

    '
  - '6464

    '
  - '6710

    '
  - '900

    '
  - '707

    '
  - '6565

    '
  - '808

    '
  - '6930

    '
  - '1000

    '
  - '5600

    '
  - '0

    '
  - '0

    '
  - '7

    '
  - '44

    '
  - '0

    '
  - '945234

    '
  - '6

    '
  - '20

    '
  - '0

    '
  - '6

    '
  - '100

    '
  - '100

    '
  - '103410

    '
  - '200

    '
  - '200

    '
  - '105

    '
  - '200

    '
  - '105

    '
  - '105

    '
  - '300

    '
  - '200

    '
  - '421

    '
  - '200

    '
  - '421

    '
  - '200

    '
  - '200

    '
  - '435

    '
  - '200

    '
  - '200

    '
  - '200

    '
  - '200

    '
  - '200

    '
  - '200

    '
  - '300

    '
  - '300

    '
  - '300

    '
  - '300

    '
  - '5800

    '
  - '5800

    '
  - '5900

    '
  - '6000

    '
  - '5900

    '
  - '5900

    '
  - '5900

    '
  - '0

    '
  - '200000

    '
  - '0

    '
  - '6

    '
  - '0

    '
  - '4

    '
  - '100

    '
timeout: 3.0
