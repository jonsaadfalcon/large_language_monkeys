prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nThe only difference\
  \ between easy and hard versions is the size of the input.\n\nYou are given a string\
  \ s consisting of n characters, each character is 'R', 'G' or 'B'.\n\nYou are also\
  \ given an integer k. Your task is to change the minimum number of characters in\
  \ the initial string s so that after the changes there will be a string of length\
  \ k that is a substring of s, and is also a substring of the infinite string \"\
  RGBRGBRGB ...\".\n\nA string a is a substring of string b if there exists a positive\
  \ integer i such that a_1 = b_i, a_2 = b_{i + 1}, a_3 = b_{i + 2}, ..., a_{|a|}\
  \ = b_{i + |a| - 1}. For example, strings \"GBRG\", \"B\", \"BR\" are substrings\
  \ of the infinite string \"RGBRGBRGB ...\" while \"GR\", \"RGR\" and \"GGG\" are\
  \ not.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of\
  \ the input contains one integer q (1 \u2264 q \u2264 2 \u22C5 10^5) \u2014 the\
  \ number of queries. Then q queries follow.\n\nThe first line of the query contains\
  \ two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22C5 10^5) \u2014 the length\
  \ of the string s and the length of the substring.\n\nThe second line of the query\
  \ contains a string s consisting of n characters 'R', 'G' and 'B'.\n\nIt is guaranteed\
  \ that the sum of n over all queries does not exceed 2 \u22C5 10^5 (\u2211 n \u2264\
  \ 2 \u22C5 10^5).\n\nOutput\n\nFor each query print one integer \u2014 the minimum\
  \ number of characters you need to change in the initial string s so that after\
  \ changing there will be a substring of length k in s that is also a substring of\
  \ the infinite string \"RGBRGBRGB ...\".\n\nExample\n\nInput\n\n\n3\n5 2\nBGGGG\n\
  5 3\nRBRGR\n5 5\nBBBRR\n\n\nOutput\n\n\n1\n0\n3\n\nNote\n\nIn the first example,\
  \ you can change the first character to 'R' and obtain the substring \"RG\", or\
  \ change the second character to 'R' and obtain \"BR\", or change the third, fourth\
  \ or fifth character to 'B' and obtain \"GB\".\n\nIn the second example, the substring\
  \ is \"BRG\".\nA: ```import sys,math,itertools\nfrom collections import Counter,deque,defaultdict\n\
  from bisect import bisect_left,bisect_right \nfrom heapq import heappop,heappush,heapify\n\
  mod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\n\
  def inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_1(): return\
  \ list(map(lambda x:int(x)-1, sys.stdin.readline().split()))\ndef inps(): return\
  \ sys.stdin.readline()\ndef inpsl(x): tmp = sys.stdin.readline(); return list(tmp[:x])\n\
  def err(x): print(x); exit()\n\nST = 'RGB'*(10**5)\nfor _ in range(inp()):\n   \
  \ n,k = inpl()\n    s = inpsl(n)\n    res = INF\n    for stj in range(3):\n    \
  \    a = [0]*n\n        for i in range(n):\n            if s[i] != ST[stj+i]:\n\
  \                a[i] = 1\n        ans = sum(a[i] for i in range(k-1))\n       \
  \ for i in range(k-1,n):\n            ans += a[i]\n            res = min(res, ans)\n\
  \            ans -= a[i-k+1]\n    print(res)```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nMany computer strategy games require building cities,\
  \ recruiting army, conquering tribes, collecting resources. Sometimes it leads to\
  \ interesting problems. \n\nLet's suppose that your task is to build a square city.\
  \ The world map uses the Cartesian coordinates. The sides of the city should be\
  \ parallel to coordinate axes. The map contains mines with valuable resources, located\
  \ at some points with integer coordinates. The sizes of mines are relatively small,\
  \ i.e. they can be treated as points. The city should be built in such a way that\
  \ all the mines are inside or on the border of the city square. \n\nBuilding a city\
  \ takes large amount of money depending on the size of the city, so you have to\
  \ build the city with the minimum area. Given the positions of the mines find the\
  \ minimum possible area of the city.\n\nInput\n\nThe first line of the input contains\
  \ number n \u2014 the number of mines on the map (2 \u2264 n \u2264 1000). Each\
  \ of the next n lines contains a pair of integers xi and yi \u2014 the coordinates\
  \ of the corresponding mine ( - 109 \u2264 xi, yi \u2264 109). All points are pairwise\
  \ distinct.\n\nOutput\n\nPrint the minimum area of the city that can cover all the\
  \ mines with valuable resources.\n\nExamples\n\nInput\n\n2\n0 0\n2 2\n\n\nOutput\n\
  \n4\n\n\nInput\n\n2\n0 0\n0 3\n\n\nOutput\n\n9\nA: ```# This is a sample Python\
  \ script.\n\n# Press Shift+F10 to execute it or replace it with your code.\n# Press\
  \ Double Shift to search everywhere for classes, files, tool windows, actions, and\
  \ settings.\nmx = -10 ** 10\nmix = 10 ** 10\nmy = mx\nmiy = mix\nfor _ in range(int(input())):\n\
  \    a, b = map(int, input().split())\n    mx = max(mx, a)\n    mix = min(mix, a)\n\
  \    my = max(my, b)\n    miy = min(miy, b)\nans = max(mx - mix, my - miy)\nprint(ans\
  \ * ans)\n\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/```\nQ:\
  \ Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nMonocarp is the coach\
  \ of the Berland State University programming teams. He decided to compose a problemset\
  \ for a training session for his teams.\n\nMonocarp has n problems that none of\
  \ his students have seen yet. The i-th problem has a topic a_i (an integer from\
  \ 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different,\
  \ that is, there are no two tasks that have the same topic and difficulty at the\
  \ same time.\n\nMonocarp decided to select exactly 3 problems from n problems for\
  \ the problemset. The problems should satisfy at least one of two conditions (possibly,\
  \ both):\n\n  * the topics of all three selected problems are different; \n  * the\
  \ difficulties of all three selected problems are different. \n\n\n\nYour task is\
  \ to determine the number of ways to select three problems for the problemset.\n\
  \nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000)\
  \ \u2014 the number of testcases.\n\nThe first line of each testcase contains an\
  \ integer n (3 \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number of problems that\
  \ Monocarp have.\n\nIn the i-th of the following n lines, there are two integers\
  \ a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of\
  \ the i-th problem.\n\nIt is guaranteed that there are no two problems that have\
  \ the same topic and difficulty at the same time.\n\nThe sum of n over all testcases\
  \ doesn't exceed 2 \u22C5 10^5.\n\nOutput\n\nPrint the number of ways to select\
  \ three training problems that meet either of the requirements described in the\
  \ statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n\
  4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the\
  \ following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3,\
  \ 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\
  A:"
question: "Monocarp is the coach of the Berland State University programming teams.\
  \ He decided to compose a problemset for a training session for his teams.\n\nMonocarp\
  \ has n problems that none of his students have seen yet. The i-th problem has a\
  \ topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to\
  \ n). All problems are different, that is, there are no two tasks that have the\
  \ same topic and difficulty at the same time.\n\nMonocarp decided to select exactly\
  \ 3 problems from n problems for the problemset. The problems should satisfy at\
  \ least one of two conditions (possibly, both):\n\n  * the topics of all three selected\
  \ problems are different; \n  * the difficulties of all three selected problems\
  \ are different. \n\n\n\nYour task is to determine the number of ways to select\
  \ three problems for the problemset.\n\nInput\n\nThe first line contains a single\
  \ integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first\
  \ line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22C5 10^5)\
  \ \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following\
  \ n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014\
  \ the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there\
  \ are no two problems that have the same topic and difficulty at the same time.\n\
  \nThe sum of n over all testcases doesn't exceed 2 \u22C5 10^5.\n\nOutput\n\nPrint\
  \ the number of ways to select three training problems that meet either of the requirements\
  \ described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n\
  5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example,\
  \ you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n\
  \  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways\
  \ is equal to three."
samples:
- " ```# This is a sample Python script.\n\n# Press Shift+F10 to execute it or replace\
  \ it with your code.\n# Press Double Shift to search everywhere for classes, files,\
  \ tool windows, actions, and settings.\nimport sys\nfrom collections import defaultdict\n\
  \ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n\
  \        topics = defaultdict(set)\n        difficulties = defaultdict(set)\n  \
  \      for _ in range(n):\n            a, b = map(int, input().split())\n      \
  \      topics[a].add(b)\n            difficulties[b].add(a)\n        ans = 0\n \
  \       for a in topics:\n            for b in topics:\n                if a !=\
  \ b and b in difficulties[a]:\n                    ans += len(topics[a] & difficulties[b])\n\
  \        print(ans)\n\nsolve()```\n\n\n\n```python\n```\nQ:"
- " ```# This is a sample Python script.\n\n# Press Shift+F10 to execute it or replace\
  \ it with your code.\n# Press Double Shift to search everywhere for classes, files,\
  \ tool windows, actions, and settings.\nfrom collections import Counter\nt = int(input())\n\
  for _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\
  \    b = list(map(int, input().split()))\n    counter_a = Counter(a)\n    counter_b\
  \ = Counter(b)\n    ans = 0\n    for i in range(n):\n        for j in range(i +\
  \ 1, n):\n            for k in range(j + 1, n):\n                if counter_a[a[i]]\
  \ > 0 and counter_a[a[j]] > 0 and counter_a[a[k]] > 0:\n                    ans\
  \ += 1\n                if counter_b[b[i]] > 0 and counter_b[b[j]] > 0 and counter_b[b[k]]\
  \ > 0:\n                    ans += 1\n    print(ans)\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/```\n\
  Q:"
test_cases:
  input:
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 3

    3 3

    4 2

    2 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 3

    3 3

    4 2

    2 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    3 4

    3 3

    4 4

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    2 3

    5

    2 5

    2 4

    2 1

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    3 3

    5

    2 5

    2 4

    2 1

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    0

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    2 4

    2 2

    2 3

    5

    1 1

    2 2

    1 4

    1 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 3

    3 3

    5

    2 5

    2 4

    3 2

    4 2

    5 1

    '
  - '2

    4

    4 4

    2 4

    2 2

    2 3

    5

    1 1

    2 4

    1 4

    2 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    2 5

    2 2

    3 3

    3 2

    4 2

    '
  - '2

    4

    3 4

    1 4

    2 2

    3 3

    0

    2 5

    2 4

    2 1

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    1 2

    1 1

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 1

    4 5

    4 2

    4 1

    '
  - '2

    4

    4 4

    1 4

    3 2

    3 3

    0

    1 4

    2 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 1

    3 5

    1 1

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    2 4

    3 3

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 3

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    3 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    3 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    4 3

    5

    1 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 4

    2 3

    4 2

    5 2

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    4 4

    3 3

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 3

    1 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 3

    3 3

    4 2

    1 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    1 4

    4 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    2 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    1 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 2

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 4

    3 3

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 3

    1 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 3

    2 1

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    2 3

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 2

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    1 2

    2 3

    5

    1 5

    2 4

    3 3

    4 1

    5 1

    '
  - '2

    4

    4 4

    2 4

    2 2

    2 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    1 4

    2 2

    2 3

    5

    2 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    3 3

    5

    2 5

    2 4

    3 2

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 4

    2 1

    2 3

    5

    2 5

    2 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 4

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    2 5

    2 3

    3 4

    4 2

    5 1

    '
  - '2

    4

    4 4

    2 4

    2 2

    2 3

    5

    1 1

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    2 3

    5

    2 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 1

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 1

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    2 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    1 3

    5

    1 1

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 3

    3 3

    4 2

    2 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    3 4

    2 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    2 4

    3 4

    2 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    4 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 1

    2 1

    2 3

    5

    1 5

    4 4

    3 3

    4 3

    5 1

    '
  - '2

    4

    2 4

    4 3

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    1 4

    2 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    2 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 2

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 4

    1 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 4

    3 2

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 3

    1 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    2 3

    3 4

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 2

    2 4

    5 5

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    1 2

    2 3

    5

    1 5

    2 4

    4 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    1 3

    2 2

    2 3

    5

    2 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    3 3

    5

    2 5

    2 3

    3 2

    4 2

    5 1

    '
  - '2

    4

    4 4

    2 4

    2 2

    2 3

    5

    1 1

    2 4

    1 4

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    2 3

    5

    2 5

    3 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    2 3

    5

    1 5

    2 4

    2 1

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    2 5

    2 4

    3 3

    3 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 3

    3 3

    4 2

    1 1

    '
  - '2

    4

    4 4

    3 3

    2 3

    1 3

    5

    1 5

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    3 4

    3 3

    2 2

    2 3

    5

    1 5

    1 4

    2 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    1 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    4 4

    3 2

    4 3

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 3

    1 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    3 3

    5

    2 5

    2 3

    3 2

    2 2

    5 1

    '
  - '2

    4

    4 4

    2 4

    2 2

    2 3

    5

    1 1

    2 2

    1 4

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    3 3

    5

    2 5

    3 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    2 3

    5

    1 5

    2 4

    2 1

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    1 2

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    1 2

    4 1

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    1 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    3 4

    4 1

    1 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    1 5

    3 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 5

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    1 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    3 3

    4 2

    5 2

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 3

    3 3

    4 4

    5 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 2

    '
  - '2

    4

    4 4

    3 4

    2 2

    1 3

    5

    2 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    3 4

    3 3

    3 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    3 1

    2 3

    5

    1 5

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    4 4

    5

    1 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 3

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 5

    3 3

    4 2

    1 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    4 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    1 5

    2 4

    3 1

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    1 2

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 1

    5

    2 5

    2 3

    3 3

    4 2

    2 1

    '
  - '2

    4

    2 1

    3 3

    2 2

    2 3

    5

    1 2

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 1

    1 2

    2 3

    5

    1 5

    2 4

    3 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    1 4

    2 2

    2 3

    5

    2 5

    2 4

    4 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 4

    5 3

    4 2

    5 2

    '
  - '2

    4

    4 4

    3 4

    2 1

    2 3

    5

    2 5

    1 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    3 4

    1 2

    2 2

    2 3

    5

    2 5

    2 4

    2 1

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    3 1

    5

    2 5

    2 4

    2 1

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 1

    3 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    1 4

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    3 2

    2 3

    5

    1 5

    1 3

    3 3

    4 2

    2 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    5 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    4 3

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    2 3

    5

    2 5

    2 4

    2 3

    1 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 4

    5

    1 5

    2 4

    1 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 3

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 2

    2 4

    5 5

    2 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    4 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    1 1

    2 2

    2 3

    5

    2 5

    2 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    3 3

    5

    2 5

    2 3

    3 2

    4 4

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    2 3

    5

    1 5

    2 4

    2 2

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    4 1

    1 3

    5

    1 5

    2 1

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    2 5

    2 4

    3 3

    3 2

    4 2

    '
  - '2

    4

    4 4

    3 3

    2 3

    1 3

    5

    1 5

    2 4

    5 5

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    1 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    2 3

    5

    1 1

    2 2

    1 4

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    3 3

    5

    2 1

    3 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    3 4

    1 4

    2 2

    3 3

    5

    1 5

    2 4

    2 1

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 1

    1 3

    5

    1 5

    2 1

    1 2

    4 1

    5 2

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    4 5

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    3 3

    4 4

    5 2

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    2 3

    3 3

    4 4

    1 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    2 3

    5

    1 5

    3 4

    3 1

    3 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    3 1

    1 3

    5

    1 5

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    4 2

    4 4

    5

    1 5

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    4 2

    2 3

    5

    1 5

    1 4

    3 3

    4 3

    4 1

    '
  - '2

    4

    4 4

    1 4

    2 2

    4 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 1

    5

    2 5

    2 3

    3 3

    4 2

    2 1

    '
  - '2

    4

    2 1

    3 1

    2 2

    2 3

    5

    1 2

    2 4

    5 3

    4 2

    5 1

    '
  - '2

    4

    4 4

    3 1

    1 2

    2 1

    5

    1 5

    2 4

    3 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    1 4

    2 2

    2 3

    5

    2 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    3 3

    5

    2 5

    2 4

    3 2

    4 2

    3 1

    '
  - '2

    4

    3 4

    1 2

    2 2

    2 3

    5

    2 5

    2 4

    2 2

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 5

    2 1

    3 3

    1 1

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    1 3

    5

    1 4

    2 4

    3 2

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    5 3

    2 1

    5 1

    '
  - '2

    4

    2 4

    4 3

    4 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    3 3

    5

    2 5

    2 4

    2 3

    1 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 2

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 2

    2 4

    1 5

    2 2

    5 1

    '
  - '2

    4

    4 4

    3 3

    4 2

    2 3

    5

    1 5

    2 4

    4 3

    4 1

    5 1

    '
  - '2

    4

    2 4

    1 1

    2 2

    2 3

    5

    2 5

    1 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    4 1

    1 3

    5

    1 5

    2 1

    3 3

    3 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 5

    1 1

    3 5

    4 2

    4 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    2 3

    5

    1 2

    2 2

    1 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    1 3

    5

    1 5

    2 4

    3 3

    5 4

    5 2

    '
  - '2

    4

    2 4

    3 4

    1 2

    2 3

    5

    1 5

    2 3

    3 3

    4 4

    1 1

    '
  - '2

    4

    2 4

    3 4

    1 1

    1 3

    5

    1 5

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    4 2

    4 4

    5

    1 5

    4 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    4 4

    1 4

    2 2

    3 3

    5

    1 4

    2 4

    3 4

    4 2

    5 1

    '
  - '2

    4

    2 4

    1 4

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    2 2

    2 4

    3 3

    4 4

    4 1

    '
  - '2

    4

    2 4

    1 1

    2 2

    2 3

    5

    1 5

    1 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    4 1

    1 3

    5

    1 5

    2 1

    3 3

    3 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 1

    3 5

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    1 2

    2 3

    5

    2 5

    2 3

    3 3

    4 4

    1 1

    '
  - '2

    4

    2 4

    3 4

    1 1

    1 3

    5

    1 5

    2 4

    3 4

    4 2

    4 1

    '
  - '2

    4

    4 4

    1 4

    2 2

    3 3

    5

    1 4

    2 4

    3 5

    4 2

    5 1

    '
  - '2

    4

    4 4

    1 4

    2 2

    3 3

    5

    1 4

    2 4

    3 5

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    1 3

    5

    1 3

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 1

    4 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    4 3

    5

    1 5

    2 4

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 2

    2 4

    3 3

    4 2

    4 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    4 4

    2 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 3

    2 2

    2 3

    5

    1 5

    2 4

    3 3

    1 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    1 2

    2 3

    5

    1 5

    2 3

    3 3

    4 2

    5 1

    '
  - '2

    4

    2 4

    3 4

    2 2

    2 3

    5

    1 5

    1 4

    3 3

    4 2

    2 1

    '
  - '2

    4

    4 4

    3 4

    2 2

    2 3

    5

    2 5

    2 4

    3 3

    4 2

    1 1

    '
  output:
  - '3

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    9

    '
  - '4

    9

    '
  - '2

    8

    '
  - '3

    9

    '
  - '4

    8

    '
  - '3

    8

    '
  - '2

    0

    '
  - '2

    6

    '
  - '0

    10

    '
  - '2

    7

    '
  - '3

    6

    '
  - '3

    0

    '
  - '4

    6

    '
  - '2

    4

    '
  - '4

    0

    '
  - '3

    7

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    9

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    9

    '
  - '3

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '4

    9

    '
  - '3

    9

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '4

    9

    '
  - '3

    10

    '
  - '3

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    9

    '
  - '3

    10

    '
  - '2

    9

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    9

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '4

    9

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    8

    '
  - '4

    10

    '
  - '4

    9

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    8

    '
  - '4

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '2

    8

    '
  - '2

    9

    '
  - '3

    10

    '
  - '4

    8

    '
  - '4

    10

    '
  - '4

    9

    '
  - '4

    10

    '
  - '4

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    9

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '3

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    9

    '
  - '2

    9

    '
  - '3

    10

    '
  - '3

    9

    '
  - '2

    10

    '
  - '2

    8

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '4

    9

    '
  - '4

    10

    '
  - '3

    8

    '
  - '3

    8

    '
  - '3

    10

    '
  - '3

    10

    '
  - '2

    9

    '
  - '4

    9

    '
  - '2

    10

    '
  - '2

    10

    '
  - '3

    10

    '
  - '2

    9

    '
  - '2

    9

    '
  - '3

    9

    '
  - '4

    10

    '
  - '2

    10

    '
  - '4

    9

    '
  - '4

    10

    '
  - '3

    9

    '
  - '4

    9

    '
  - '2

    10

    '
  - '4

    9

    '
  - '3

    9

    '
  - '3

    8

    '
  - '4

    9

    '
  - '2

    9

    '
  - '4

    10

    '
  - '2

    10

    '
  - '3

    8

    '
  - '3

    10

    '
  - '2

    10

    '
  - '3

    9

    '
  - '3

    10

    '
  - '3

    8

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '2

    9

    '
  - '3

    8

    '
  - '3

    8

    '
  - '3

    9

    '
  - '4

    8

    '
  - '2

    10

    '
  - '2

    10

    '
  - '2

    8

    '
  - '2

    8

    '
  - '4

    9

    '
  - '4

    10

    '
  - '4

    10

    '
  - '2

    9

    '
  - '4

    8

    '
  - '4

    9

    '
  - '3

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '4

    10

    '
  - '2

    10

    '
  - '2

    8

    '
  - '4

    10

    '
  - '4

    10

    '
  - '2

    7

    '
  - '3

    9

    '
  - '4

    10

    '
  - '4

    10

    '
  - '4

    10

    '
  - '3

    10

    '
  - '3

    10

    '
  - '3

    10

    '
  - '2

    9

    '
  - '2

    10

    '
  - '2

    10

    '
  - '3

    10

    '
  - '2

    10

    '
  - '4

    10

    '
timeout: 2.0
