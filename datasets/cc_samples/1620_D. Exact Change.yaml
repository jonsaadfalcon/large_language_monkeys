prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nMr Keks is\
  \ a typical white-collar in Byteland.\n\nHe has a bookshelf in his office with some\
  \ books on it, each book has an integer positive price.\n\nMr Keks defines the value\
  \ of a shelf as the sum of books prices on it. \n\nMiraculously, Mr Keks was promoted\
  \ and now he is moving into a new office.\n\nHe learned that in the new office he\
  \ will have not a single bookshelf, but exactly k bookshelves. He decided that the\
  \ beauty of the k shelves is the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND)\
  \ of the values of all the shelves.\n\nHe also decided that he won't spend time\
  \ on reordering the books, so he will place several first books on the first shelf,\
  \ several next books on the next shelf and so on. Of course, he will place at least\
  \ one book on each shelf. This way he will put all his books on k shelves in such\
  \ a way that the beauty of the shelves is as large as possible. Compute this maximum\
  \ possible beauty.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264\
  \ k \u2264 n \u2264 50) \u2014 the number of books and the number of shelves in\
  \ the new office.\n\nThe second line contains n integers a_1, a_2, \u2026 a_n, (0\
  \ < a_i < 2^{50}) \u2014 the prices of the books in the order they stand on the\
  \ old shelf.\n\nOutput\n\nPrint the maximum possible beauty of k shelves in the\
  \ new office.\n\nExamples\n\nInput\n\n10 4\n9 14 28 1 7 13 15 29 2 31\n\n\nOutput\n\
  \n24\n\n\nInput\n\n7 3\n3 14 15 92 65 35 89\n\n\nOutput\n\n64\n\nNote\n\nIn the\
  \ first example you can split the books as follows:\n\n$$$(9 + 14 + 28 + 1 + 7)\
  \ \\& (13 + 15) \\& (29 + 2) \\& (31) = 24.$$$\n\nIn the second example you can\
  \ split the books as follows:\n\n$$$(3 + 14 + 15 + 92) \\& (65) \\& (35 + 89) =\
  \ 64.$$$\nA: ```# ---------------------------iye ha aam zindegi---------------------------------------------\n\
  import math\nimport random\nimport heapq, bisect\nimport sys\nfrom collections import\
  \ deque, defaultdict\nfrom fractions import Fraction\nimport sys\nimport threading\n\
  from collections import defaultdict\nthreading.stack_size(10**8)\nmod = 10 ** 9\
  \ + 7\nmod1 = 998244353\n\n# ------------------------------warmup----------------------------\n\
  import os\nimport sys\nfrom io import BytesIO, IOBase\nsys.setrecursionlimit(300000)\n\
  \nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self,\
  \ file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n  \
  \      self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write\
  \ = self.buffer.write if self.writable else None\n\n    def read(self):\n      \
  \  while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\n\n# -------------------game starts now----------------------------------------------------import\
  \ math\nclass TreeNode:\n    def __init__(self, k, v):\n        self.key = k\n \
  \       self.value = v\n        self.left = None\n        self.right = None\n  \
  \      self.parent = None\n        self.height = 1\n        self.num_left = 1\n\
  \        self.num_total = 1\n\n\nclass AvlTree:\n\n    def __init__(self):\n   \
  \     self._tree = None\n\n    def add(self, k, v):\n        if not self._tree:\n\
  \            self._tree = TreeNode(k, v)\n            return\n        node = self._add(k,\
  \ v)\n        if node:\n            self._rebalance(node)\n\n    def _add(self,\
  \ k, v):\n        node = self._tree\n        while node:\n            if k < node.key:\n\
  \                if node.left:\n                    node = node.left\n         \
  \       else:\n                    node.left = TreeNode(k, v)\n                \
  \    node.left.parent = node\n                    return node.left\n           \
  \ elif node.key < k:\n                if node.right:\n                    node =\
  \ node.right\n                else:\n                    node.right = TreeNode(k,\
  \ v)\n                    node.right.parent = node\n                    return node.right\n\
  \            else:\n                node.value = v\n                return\n\n \
  \   @staticmethod\n    def get_height(x):\n        return x.height if x else 0\n\
  \n    @staticmethod\n    def get_num_total(x):\n        return x.num_total if x\
  \ else 0\n\n    def _rebalance(self, node):\n\n        n = node\n        while n:\n\
  \            lh = self.get_height(n.left)\n            rh = self.get_height(n.right)\n\
  \            n.height = max(lh, rh) + 1\n            balance_factor = lh - rh\n\
  \            n.num_total = 1 + self.get_num_total(n.left) + self.get_num_total(n.right)\n\
  \            n.num_left = 1 + self.get_num_total(n.left)\n\n            if balance_factor\
  \ > 1:\n                if self.get_height(n.left.left) < self.get_height(n.left.right):\n\
  \                    self._rotate_left(n.left)\n                self._rotate_right(n)\n\
  \            elif balance_factor < -1:\n                if self.get_height(n.right.right)\
  \ < self.get_height(n.right.left):\n                    self._rotate_right(n.right)\n\
  \                self._rotate_left(n)\n            else:\n                n = n.parent\n\
  \n    def _remove_one(self, node):\n        \"\"\"\n        Side effect!!! Changes\
  \ node. Node should have exactly one child\n        \"\"\"\n        replacement\
  \ = node.left or node.right\n        if node.parent:\n            if AvlTree._is_left(node):\n\
  \                node.parent.left = replacement\n            else:\n           \
  \     node.parent.right = replacement\n            replacement.parent = node.parent\n\
  \            node.parent = None\n        else:\n            self._tree = replacement\n\
  \            replacement.parent = None\n        node.left = None\n        node.right\
  \ = None\n        node.parent = None\n        self._rebalance(replacement)\n\n \
  \   def _remove_leaf(self, node):\n        if node.parent:\n            if AvlTree._is_left(node):\n\
  \                node.parent.left = None\n            else:\n                node.parent.right\
  \ = None\n            self._rebalance(node.parent)\n        else:\n            self._tree\
  \ = None\n        node.parent = None\n        node.left = None\n        node.right\
  \ = None\n\n    def remove(self, k):\n        node = self._get_node(k)\n       \
  \ if not node:\n            return\n        if AvlTree._is_leaf(node):\n       \
  \     self._remove_leaf(node)\n            return\n        if node.left and node.right:\n\
  \            nxt = AvlTree._get_next(node)\n            node.key = nxt.key\n   \
  \         node.value = nxt.value\n            if self._is_leaf(nxt):\n         \
  \       self._remove_leaf(nxt)\n            else:\n                self._remove_one(nxt)\n\
  \            self._rebalance(node)\n        else:\n            self._remove_one(node)\n\
  \n    def get(self, k):\n        node = self._get_node(k)\n        return node.value\
  \ if node else -1\n\n    def _get_node(self, k):\n        if not self._tree:\n \
  \           return None\n        node = self._tree\n        while node:\n      \
  \      if k < node.key:\n                node = node.left\n            elif node.key\
  \ < k:\n                node = node.right\n            else:\n                return\
  \ node\n        return None\n\n    def get_at(self, pos):\n        x = pos + 1\n\
  \        node = self._tree\n        while node:\n            if x < node.num_left:\n\
  \                node = node.left\n            elif node.num_left < x:\n       \
  \         x -= node.num_left\n                node = node.right\n            else:\n\
  \                return (node.key, node.value)\n        raise IndexError(\"Out of\
  \ ranges\")\n\n    @staticmethod\n    def _is_left(node):\n        return node.parent.left\
  \ and node.parent.left == node\n\n    @staticmethod\n    def _is_leaf(node):\n \
  \       return node.left is None and node.right is None\n\n    def _rotate_right(self,\
  \ node):\n        if not node.parent:\n            self._tree = node.left\n    \
  \        node.left.parent = None\n        elif AvlTree._is_left(node):\n       \
  \     node.parent.left = node.left\n            node.left.parent = node.parent\n\
  \        else:\n            node.parent.right = node.left\n            node.left.parent\
  \ = node.parent\n        bk = node.left.right\n        node.left.right = node\n\
  \        node.parent = node.left\n        node.left = bk\n        if bk:\n     \
  \       bk.parent = node\n        node.height = max(self.get_height(node.left),\
  \ self.get_height(node.right)) + 1\n        node.num_total = 1 + self.get_num_total(node.left)\
  \ + self.get_num_total(node.right)\n        node.num_left = 1 + self.get_num_total(node.left)\n\
  \n    def _rotate_left(self, node):\n        if not node.parent:\n            self._tree\
  \ = node.right\n            node.right.parent = None\n        elif AvlTree._is_left(node):\n\
  \            node.parent.left = node.right\n            node.right.parent = node.parent\n\
  \        else:\n            node.parent.right = node.right\n            node.right.parent\
  \ = node.parent\n        bk = node.right.left\n        node.right.left = node\n\
  \        node.parent = node.right\n        node.right = bk\n        if bk:\n   \
  \         bk.parent = node\n        node.height = max(self.get_height(node.left),\
  \ self.get_height(node.right)) + 1\n        node.num_total = 1 + self.get_num_total(node.left)\
  \ + self.get_num_total(node.right)\n        node.num_left = 1 + self.get_num_total(node.left)\n\
  \n    @staticmethod\n    def _get_next(node):\n        if not node.right:\n    \
  \        return node.parent\n        n = node.right\n        while n.left:\n   \
  \         n = n.left\n        return n\n\n\n# -----------------------------------------------binary\
  \ seacrh tree---------------------------------------\nclass SegmentTree1:\n    def\
  \ __init__(self, data, default=2**51, func=lambda a, b: a & b):\n        \"\"\"\
  initialize the segment tree with data\"\"\"\n        self._default = default\n \
  \       self._func = func\n        self._len = len(data)\n        self._size = _size\
  \ = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n\
  \        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n\
  \            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n   \
  \ def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self,\
  \ idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self,\
  \ idx, value):\n        idx += self._size\n        self.data[idx] = value\n    \
  \    idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2\
  \ * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n\
  \        return self._len\n\n    def query(self, start, stop):\n        if start\
  \ == stop:\n            return self.__getitem__(start)\n        stop += 1\n    \
  \    start += self._size\n        stop += self._size\n\n        res = self._default\n\
  \        while start < stop:\n            if start & 1:\n                res = self._func(res,\
  \ self.data[start])\n                start += 1\n            if stop & 1:\n    \
  \            stop -= 1\n                res = self._func(res, self.data[stop])\n\
  \            start >>= 1\n            stop >>= 1\n        return res\n\n    def\
  \ __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\n\n#\
  \ -------------------game starts now----------------------------------------------------import\
  \ math\nclass SegmentTree:\n    def __init__(self, data, default=0, func=lambda\
  \ a, b: a + b):\n        \"\"\"initialize the segment tree with data\"\"\"\n   \
  \     self._default = default\n        self._func = func\n        self._len = len(data)\n\
  \        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data\
  \ = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n\
  \        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i\
  \ + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx]\
  \ = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx\
  \ + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n\
  \        self.data[idx] = value\n        idx >>= 1\n        while idx:\n       \
  \     self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n\
  \            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n \
  \   def query(self, start, stop):\n        if start == stop:\n            return\
  \ self.__getitem__(start)\n        stop += 1\n        start += self._size\n    \
  \    stop += self._size\n\n        res = self._default\n        while start < stop:\n\
  \            if start & 1:\n                res = self._func(res, self.data[start])\n\
  \                start += 1\n            if stop & 1:\n                stop -= 1\n\
  \                res = self._func(res, self.data[stop])\n            start >>= 1\n\
  \            stop >>= 1\n        return res\n\n    def __repr__(self):\n       \
  \ return \"SegmentTree({0})\".format(self.data)\n\n\n# -------------------------------iye\
  \ ha chutiya zindegi-------------------------------------\nclass Factorial:\n  \
  \  def __init__(self, MOD):\n        self.MOD = MOD\n        self.factorials = [1,\
  \ 1]\n        self.invModulos = [0, 1]\n        self.invFactorial_ = [1, 1]\n\n\
  \    def calc(self, n):\n        if n <= -1:\n            print(\"Invalid argument\
  \ to calculate n!\")\n            print(\"n must be non-negative value. But the\
  \ argument was \" + str(n))\n            exit()\n        if n < len(self.factorials):\n\
  \            return self.factorials[n]\n        nextArr = [0] * (n + 1 - len(self.factorials))\n\
  \        initialI = len(self.factorials)\n        prev = self.factorials[-1]\n \
  \       m = self.MOD\n        for i in range(initialI, n + 1):\n            prev\
  \ = nextArr[i - initialI] = prev * i % m\n        self.factorials += nextArr\n \
  \       return self.factorials[n]\n\n    def inv(self, n):\n        if n <= -1:\n\
  \            print(\"Invalid argument to calculate n^(-1)\")\n            print(\"\
  n must be non-negative value. But the argument was \" + str(n))\n            exit()\n\
  \        p = self.MOD\n        pi = n % p\n        if pi < len(self.invModulos):\n\
  \            return self.invModulos[pi]\n        nextArr = [0] * (n + 1 - len(self.invModulos))\n\
  \        initialI = len(self.invModulos)\n        for i in range(initialI, min(p,\
  \ n + 1)):\n            next = -self.invModulos[p % i] * (p // i) % p\n        \
  \    self.invModulos.append(next)\n        return self.invModulos[pi]\n\n    def\
  \ invFactorial(self, n):\n        if n <= -1:\n            print(\"Invalid argument\
  \ to calculate (n^(-1))!\")\n            print(\"n must be non-negative value. But\
  \ the argument was \" + str(n))\n            exit()\n        if n < len(self.invFactorial_):\n\
  \            return self.invFactorial_[n]\n        self.inv(n)  # To make sure already\
  \ calculated n^-1\n        nextArr = [0] * (n + 1 - len(self.invFactorial_))\n \
  \       initialI = len(self.invFactorial_)\n        prev = self.invFactorial_[-1]\n\
  \        p = self.MOD\n        for i in range(initialI, n + 1):\n            prev\
  \ = nextArr[i - initialI] = (prev * self.invModulos[i % p]) % p\n        self.invFactorial_\
  \ += nextArr\n        return self.invFactorial_[n]\n\n\nclass Combination:\n   \
  \ def __init__(self, MOD):\n        self.MOD = MOD\n        self.factorial = Factorial(MOD)\n\
  \n    def ncr(self, n, k):\n        if k < 0 or n < k:\n            return 0\n \
  \       k = min(k, n - k)\n        f = self.factorial\n        return f.calc(n)\
  \ * f.invFactorial(max(n - k, k)) * f.invFactorial(min(k, n - k)) % self.MOD\n\n\
  \n# --------------------------------------iye ha combinations ka zindegi---------------------------------\n\
  def powm(a, n, m):\n    if a == 1 or n == 0:\n        return 1\n    if n % 2 ==\
  \ 0:\n        s = powm(a, n // 2, m)\n        return s * s % m\n    else:\n    \
  \    return a * powm(a, n - 1, m) % m\n\n\n# --------------------------------------iye\
  \ ha power ka zindegi---------------------------------\ndef sort_list(list1, list2):\n\
  \    zipped_pairs = zip(list2, list1)\n\n    z = [x for _, x in sorted(zipped_pairs)]\n\
  \n    return z\n\n\n# --------------------------------------------------product----------------------------------------\n\
  def product(l):\n    por = 1\n    for i in range(len(l)):\n        por *= l[i]\n\
  \    return por\n\n\n# --------------------------------------------------binary----------------------------------------\n\
  def binarySearchCount(arr, n, key):\n    left = 0\n    right = n - 1\n\n    count\
  \ = 0\n\n    while (left <= right):\n        mid = int((right + left) / 2)\n\n \
  \       # Check if middle element is\n        # less than or equal to key\n    \
  \    if (arr[mid] < key):\n            count = mid + 1\n            left = mid +\
  \ 1\n\n        # If key is smaller, ignore right half\n        else:\n         \
  \   right = mid - 1\n\n    return count\n\n\n# --------------------------------------------------binary----------------------------------------\n\
  def countdig(n):\n    c = 0\n    while (n > 0):\n        n //= 10\n        c +=\
  \ 1\n    return c\ndef binary(x, length):\n    y = bin(x)[2:]\n    return y if len(y)\
  \ >= length else \"0\" * (length - len(y)) + y\n\ndef countGreater(arr, n, k):\n\
  \    l = 0\n    r = n - 1\n\n    # Stores the index of the left most element\n \
  \   # from the array which is greater than k\n    leftGreater = n\n\n    # Finds\
  \ number of elements greater than k\n    while (l <= r):\n        m = int(l + (r\
  \ - l) / 2)\n        if (arr[m] >= k):\n            leftGreater = m\n          \
  \  r = m - 1\n\n        # If mid element is less than\n        # or equal to k update\
  \ l\n        else:\n            l = m + 1\n\n    # Return the count of elements\n\
  \    # greater than k\n    return (n - leftGreater)\n\n\n# --------------------------------------------------binary------------------------------------\n\
  n,k=map(int,input().split())\nl=list(map(int,input().split()))\ns=[0]*(n+1)\nfor\
  \ i in range(1,n+1):\n    s[i]=s[i-1]+l[i-1]\n#s=SegmentTree(l)\ndef check(x):\n\
  \    dp=[[0 for i in range(k+1)]for j in range(n+1)]\n    dp[0][0]=1\n    for i\
  \ in range(1,n+1):\n        for j in range(1,min(i,k)+1):\n            for h in\
  \ range(i-1,-1,-1):\n                cur=s[i]-s[h]\n                if cur&x==x:\n\
  \                    dp[i][j]=max(dp[i][j],dp[h][j-1])\n    return dp[n][k]\ntemp=0\n\
  cou=2**57\nfor i in range(57,-1,-1):\n    temp^=cou\n    if check(temp)==1:\n  \
  \      ans=temp\n    else:\n        temp^=cou\n        ans=temp\n    cou//=2\nprint(ans)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nAndrew often reads articles\
  \ in his favorite magazine 2Char. The main feature of these articles is that each\
  \ of them uses at most two distinct letters. Andrew decided to send an article to\
  \ the magazine, but as he hasn't written any article, he just decided to take a\
  \ random one from magazine 26Char. However, before sending it to the magazine 2Char,\
  \ he needs to adapt the text to the format of the journal. To do so, he removes\
  \ some words from the chosen article, in such a way that the remaining text can\
  \ be written using no more than two distinct letters.\n\nSince the payment depends\
  \ from the number of non-space characters in the article, Andrew wants to keep the\
  \ words with the maximum total length.\n\nInput\n\nThe first line of the input contains\
  \ number n (1 \u2264 n \u2264 100) \u2014 the number of words in the article chosen\
  \ by Andrew. Following are n lines, each of them contains one word. All the words\
  \ consist only of small English letters and their total length doesn't exceed 1000.\
  \ The words are not guaranteed to be distinct, in this case you are allowed to use\
  \ a word in the article as many times as it appears in the input.\n\nOutput\n\n\
  Print a single integer \u2014 the maximum possible total length of words in Andrew's\
  \ article.\n\nExamples\n\nInput\n\n4\nabb\ncacc\naaa\nbbb\n\n\nOutput\n\n9\n\nInput\n\
  \n5\na\na\nbcbcb\ncdecdecdecdecdecde\naaaa\n\n\nOutput\n\n6\n\nNote\n\nIn the first\
  \ sample the optimal way to choose words is {'abb', 'aaa', 'bbb'}.\n\nIn the second\
  \ sample the word 'cdecdecdecdecdecde' consists of three distinct letters, and thus\
  \ cannot be used in the article. The optimal answer is {'a', 'a', 'aaaa'}.\nA: ```n=int(input())\n\
  i=0\nx=[]\nwhile i<n:\n\tx.append(str(input()))\n\ti+=1\ni=25\nr=0\nwhile i:\n\t\
  j=i\n\twhile j:\n\t\tj-=1\n\t\tt=0\n\t\tk=n\n\t\twhile k:\n\t\t\tk-=1\n\t\t\ty=x[k]\n\
  \t\t\tz=len(y)\n\t\t\tok=1\n\t\t\twhile z:\n\t\t\t\tz-=1\n\t\t\t\tif ord(y[z])-ord('a')!=i:\n\
  \t\t\t\t\tif ord(y[z])-ord('a')!=j:ok=0\n\t\t\tif ok:t+=len(y)\n\t\tif r<t:r=t\n\
  \ti-=1\nprint(r)```\nQ: Write python code to solve the following coding problem\
  \ that obeys the constraints and passes the example test cases. The output code\
  \ needs to read from and write to standard IO. Please wrap your code answer using\
  \ ```:\nOne day, early in the morning, you decided to buy yourself a bag of chips\
  \ in the nearby store. The store has chips of n different flavors. A bag of the\
  \ i-th flavor costs a_i burles.\n\nThe store may run out of some flavors, so you'll\
  \ decide which one to buy after arriving there. But there are two major flaws in\
  \ this plan: \n\n  1. you have only coins of 1, 2 and 3 burles; \n  2. since it's\
  \ morning, the store will ask you to pay in exact change, i. e. if you choose the\
  \ i-th flavor, you'll have to pay exactly a_i burles. \n\n\n\nCoins are heavy, so\
  \ you'd like to take the least possible number of coins in total. That's why you\
  \ are wondering: what is the minimum total number of coins you should take with\
  \ you, so you can buy a bag of chips of any flavor in exact change?\n\nInput\n\n\
  The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number\
  \ of test cases.\n\nThe first line of each test case contains the single integer\
  \ n (1 \u2264 n \u2264 100) \u2014 the number of flavors in the store.\n\nThe second\
  \ line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264\
  \ 10^9) \u2014 the cost of one bag of each flavor.\n\nOutput\n\nFor each test case,\
  \ print one integer \u2014 the minimum number of coins you need to buy one bag of\
  \ any flavor you'll choose in exact change.\n\nExample\n\nInput\n\n\n4\n1\n1337\n\
  3\n10 8 10\n5\n1 2 3 4 5\n3\n7 77 777\n\n\nOutput\n\n\n446\n4\n3\n260\n\nNote\n\n\
  In the first test case, you should, for example, take with you 445 coins of value\
  \ 3 and 1 coin of value 2. So, 1337 = 445 \u22C5 3 + 1 \u22C5 2.\n\nIn the second\
  \ test case, you should, for example, take 2 coins of value 3 and 2 coins of value\
  \ 2. So you can pay either exactly 8 = 2 \u22C5 3 + 1 \u22C5 2 or 10 = 2 \u22C5\
  \ 3 + 2 \u22C5 2.\n\nIn the third test case, it's enough to take 1 coin of value\
  \ 3 and 2 coins of value 1.\nA:"
question: "One day, early in the morning, you decided to buy yourself a bag of chips\
  \ in the nearby store. The store has chips of n different flavors. A bag of the\
  \ i-th flavor costs a_i burles.\n\nThe store may run out of some flavors, so you'll\
  \ decide which one to buy after arriving there. But there are two major flaws in\
  \ this plan: \n\n  1. you have only coins of 1, 2 and 3 burles; \n  2. since it's\
  \ morning, the store will ask you to pay in exact change, i. e. if you choose the\
  \ i-th flavor, you'll have to pay exactly a_i burles. \n\n\n\nCoins are heavy, so\
  \ you'd like to take the least possible number of coins in total. That's why you\
  \ are wondering: what is the minimum total number of coins you should take with\
  \ you, so you can buy a bag of chips of any flavor in exact change?\n\nInput\n\n\
  The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number\
  \ of test cases.\n\nThe first line of each test case contains the single integer\
  \ n (1 \u2264 n \u2264 100) \u2014 the number of flavors in the store.\n\nThe second\
  \ line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264\
  \ 10^9) \u2014 the cost of one bag of each flavor.\n\nOutput\n\nFor each test case,\
  \ print one integer \u2014 the minimum number of coins you need to buy one bag of\
  \ any flavor you'll choose in exact change.\n\nExample\n\nInput\n\n\n4\n1\n1337\n\
  3\n10 8 10\n5\n1 2 3 4 5\n3\n7 77 777\n\n\nOutput\n\n\n446\n4\n3\n260\n\nNote\n\n\
  In the first test case, you should, for example, take with you 445 coins of value\
  \ 3 and 1 coin of value 2. So, 1337 = 445 \u22C5 3 + 1 \u22C5 2.\n\nIn the second\
  \ test case, you should, for example, take 2 coins of value 3 and 2 coins of value\
  \ 2. So you can pay either exactly 8 = 2 \u22C5 3 + 1 \u22C5 2 or 10 = 2 \u22C5\
  \ 3 + 2 \u22C5 2.\n\nIn the third test case, it's enough to take 1 coin of value\
  \ 3 and 2 coins of value 1."
samples:
- " ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    d={1:0,2:0,3:0}\n    for i in a:\n        d[min(d.keys(),key=lambda x:abs(x-i))]\
  \ +=1\n    print(sum(d.values()))````\nQ:"
- " ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max(0,x[0]-x[2],x[1]-x[2]))```\
  \ A: ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    x=[0,0,0]\n    for i in range(n):\n        if a[i]%3==0:x[0]+=1\n        elif\
  \ a[i]%3==1:x[1]+=1\n        else:x[2]+=1\n    print(min(x[0],x[1],x[2])*3+max("
test_cases:
  input:
  - '4

    1

    1337

    3

    10 8 10

    5

    1 2 3 4 5

    3

    7 77 777

    '
  - '1

    1

    6006

    '
  - '1

    1

    2668

    '
  - '4

    1

    1337

    3

    10 8 1

    5

    1 2 3 4 5

    3

    7 77 777

    '
  - '1

    1

    865

    '
  - '1

    1

    483

    '
  - '1

    1

    132

    '
  - '1

    1

    245

    '
  - '1

    1

    78

    '
  - '1

    1

    133

    '
  - '1

    1

    144

    '
  - '1

    1

    2423

    '
  - '4

    1

    1337

    3

    10 8 10

    5

    1 2 3 4 5

    3

    11 77 777

    '
  - '1

    1

    2646

    '
  - '1

    1

    397

    '
  - '1

    1

    5

    '
  - '1

    1

    46

    '
  - '1

    1

    16

    '
  - '1

    1

    212

    '
  - '1

    1

    3989

    '
  - '4

    1

    1337

    3

    10 8 1

    5

    1 2 9 4 5

    3

    7 77 777

    '
  - '1

    1

    37

    '
  - '1

    1

    8

    '
  - '1

    1

    189

    '
  - '4

    1

    1337

    3

    19 8 1

    5

    1 2 2 6 5

    3

    7 105 777

    '
  - '4

    1

    1337

    3

    19 8 1

    5

    1 2 4 6 7

    3

    7 105 777

    '
  - '1

    1

    11881

    '
  - '4

    1

    1337

    3

    10 8 17

    5

    1 2 3 4 5

    3

    7 77 777

    '
  - '1

    1

    3002

    '
  - '1

    1

    287

    '
  - '1

    1

    160

    '
  - '1

    1

    442

    '
  - '1

    1

    87

    '
  - '1

    1

    44

    '
  - '1

    1

    4475

    '
  - '1

    1

    13

    '
  - '1

    1

    60

    '
  - '1

    1

    71

    '
  - '1

    1

    34

    '
  - '1

    1

    12767

    '
  - '1

    1

    2615

    '
  - '1

    1

    50

    '
  - '1

    1

    100

    '
  - '1

    1

    79

    '
  - '1

    1

    99

    '
  - '1

    1

    2

    '
  - '4

    1

    2493

    3

    10 8 1

    5

    1 2 2 6 5

    3

    7 77 777

    '
  - '4

    1

    1337

    3

    19 10 1

    5

    1 2 2 6 5

    3

    9 105 777

    '
  - '1

    1

    2862

    '
  - '1

    1

    52

    '
  - '4

    1

    1337

    3

    10 8 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '4

    1

    1785

    3

    19 10 1

    5

    1 2 2 6 5

    3

    9 105 777

    '
  - '1

    1

    2977

    '
  - '1

    1

    31

    '
  - '4

    1

    1337

    3

    10 1 1

    5

    1 2 5 8 8

    3

    7 72 777

    '
  - '4

    1

    1337

    3

    10 0 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '4

    1

    1337

    3

    6 0 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '4

    1

    469

    3

    19 0 2

    5

    1 2 2 6 5

    3

    9 105 777

    '
  - '4

    1

    1337

    3

    14 8 1

    5

    1 2 3 4 5

    3

    7 77 777

    '
  - '1

    1

    1224

    '
  - '1

    1

    224

    '
  - '1

    1

    178

    '
  - '1

    1

    3436

    '
  - '4

    1

    922

    3

    10 8 10

    5

    1 2 3 4 5

    3

    11 77 777

    '
  - '1

    1

    755

    '
  - '1

    1

    151

    '
  - '1

    1

    5156

    '
  - '1

    1

    371

    '
  - '4

    1

    1337

    3

    19 8 2

    5

    1 2 4 6 7

    3

    7 105 777

    '
  - '1

    1

    727

    '
  - '1

    1

    3933

    '
  - '1

    1

    195

    '
  - '1

    1

    167

    '
  - '1

    1

    791

    '
  - '1

    1

    64

    '
  - '1

    1

    4447

    '
  - '1

    1

    57

    '
  - '1

    1

    68

    '
  - '1

    1

    3889

    '
  - '1

    1

    21

    '
  - '1

    1

    111

    '
  - '4

    1

    2493

    3

    10 8 1

    5

    1 2 2 6 5

    3

    7 77 1354

    '
  - '4

    1

    1337

    3

    19 10 1

    5

    1 2 2 6 5

    3

    9 105 940

    '
  - '1

    1

    2934

    '
  - '4

    1

    1799

    3

    10 8 1

    5

    1 1 2 6 5

    3

    7 77 777

    '
  - '4

    1

    1785

    3

    19 0 1

    5

    1 2 2 6 5

    3

    9 105 1178

    '
  - '1

    1

    30

    '
  - '4

    1

    1034

    3

    10 0 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '4

    1

    469

    3

    35 0 2

    5

    1 2 2 6 5

    3

    9 105 777

    '
  - '1

    1

    4895

    '
  - '4

    1

    922

    3

    10 8 10

    5

    1 2 3 4 5

    3

    11 77 1224

    '
  - '1

    1

    2316

    '
  - '1

    1

    295

    '
  - '4

    1

    1337

    3

    10 8 17

    5

    1 0 3 4 5

    3

    7 77 1369

    '
  - '1

    1

    1042

    '
  - '1

    1

    857

    '
  - '1

    1

    113

    '
  - '1

    1

    011

    '
  - '4

    1

    2493

    3

    10 10 1

    5

    1 2 2 6 5

    3

    7 77 1354

    '
  - '4

    1

    1337

    3

    10 2 1

    5

    2 2 3 4 5

    3

    10 115 1546

    '
  - '4

    1

    1337

    3

    0 6 1

    5

    1 2 5 8 8

    3

    7 72 777

    '
  - '4

    1

    1799

    3

    10 8 1

    5

    1 1 2 6 5

    3

    7 77 21

    '
  - '4

    1

    1785

    3

    19 10 1

    5

    1 2 2 6 5

    3

    13 30 777

    '
  - '4

    1

    594

    3

    10 8 13

    5

    1 2 0 4 5

    3

    8 77 777

    '
  - '4

    1

    1785

    3

    19 0 1

    5

    1 2 2 6 5

    3

    9 105 1516

    '
  - '4

    1

    1034

    3

    1 0 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '1

    1

    8840

    '
  - '4

    1

    325

    3

    19 8 0

    5

    0 2 4 6 5

    3

    7 105 777

    '
  - '1

    1

    1778

    '
  - '1

    1

    40

    '
  - '4

    1

    1337

    3

    0 0 1

    5

    1 2 4 4 5

    3

    4 77 777

    '
  - '1

    1

    63

    '
  - '4

    1

    1034

    3

    2 0 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '4

    1

    1785

    3

    19 0 2

    5

    2 0 2 2 5

    3

    9 105 777

    '
  - '4

    1

    922

    3

    12 8 10

    5

    0 2 3 4 5

    3

    11 77 1224

    '
  - '4

    1

    1337

    3

    10 8 2

    5

    1 2 2 6 8

    3

    4 105 117

    '
  - '4

    1

    1635

    3

    19 7 2

    5

    1 2 4 6 0

    3

    7 105 777

    '
  - '4

    1

    1337

    3

    0 0 1

    5

    1 2 8 4 5

    3

    4 77 777

    '
  - '4

    1

    4323

    3

    9 10 1

    5

    1 2 2 6 5

    3

    7 77 1354

    '
  - '1

    1

    118

    '
  - '4

    1

    1785

    3

    19 0 2

    5

    2 0 2 2 5

    3

    9 101 777

    '
  - '4

    1

    922

    3

    12 8 10

    5

    0 2 3 2 5

    3

    11 77 1224

    '
  - '1

    1

    75

    '
  - '4

    1

    1337

    3

    10 8 2

    5

    1 2 2 6 2

    3

    4 105 117

    '
  - '4

    1

    1337

    3

    17 7 1

    5

    0 2 2 6 10

    3

    9 105 940

    '
  - '4

    1

    411

    3

    12 8 10

    5

    0 2 3 2 5

    3

    11 77 1224

    '
  - '4

    1

    1337

    3

    31 7 1

    5

    0 2 2 6 10

    3

    9 105 940

    '
  - '4

    1

    2824

    3

    10 8 1

    5

    1 1 0 4 5

    3

    1 77 21

    '
  - '4

    1

    2880

    3

    19 7 0

    5

    1 2 4 6 0

    3

    7 12 777

    '
  - '4

    1

    2824

    3

    17 8 1

    5

    1 1 0 4 5

    3

    1 77 21

    '
  - '4

    1

    1337

    3

    31 7 1

    5

    0 2 2 6 19

    3

    9 143 940

    '
  - '1

    1

    2997

    '
  - '1

    1

    251

    '
  - '1

    1

    90

    '
  - '1

    1

    3794

    '
  - '1

    1

    3790

    '
  - '1

    1

    27

    '
  - '1

    1

    105

    '
  - '4

    1

    1337

    3

    10 8 1

    5

    1 2 2 6 5

    3

    7 77 612

    '
  - '4

    1

    1337

    3

    19 8 1

    5

    1 2 2 6 5

    3

    3 105 777

    '
  - '4

    1

    1337

    3

    19 8 1

    5

    1 2 4 11 7

    3

    7 105 777

    '
  - '1

    1

    6601

    '
  - '1

    1

    3414

    '
  - '1

    1

    708

    '
  - '1

    1

    83

    '
  - '4

    1

    1213

    3

    19 8 1

    5

    1 2 4 6 4

    3

    7 105 777

    '
  - '1

    1

    2230

    '
  - '1

    1

    96

    '
  - '4

    1

    1337

    3

    10 2 1

    5

    2 2 3 4 5

    3

    7 115 1072

    '
  - '1

    1

    3571

    '
  - '4

    1

    2410

    3

    10 1 1

    5

    1 2 5 8 8

    3

    7 72 777

    '
  - '1

    1

    24

    '
  - '4

    1

    1337

    3

    10 0 1

    5

    1 2 2 4 5

    3

    1 47 541

    '
  - '1

    1

    1110

    '
  - '1

    1

    1424

    '
  - '1

    1

    369

    '
  - '1

    1

    319

    '
  - '1

    1

    7565

    '
  - '1

    1

    342

    '
  - '1

    1

    486

    '
  - '1

    1

    2199

    '
  - '4

    1

    1337

    3

    19 8 1

    5

    2 2 4 4 4

    3

    7 105 777

    '
  - '1

    1

    1448

    '
  - '4

    1

    1799

    3

    10 8 1

    5

    1 1 2 6 5

    3

    7 77 1447

    '
  - '4

    1

    1337

    3

    10 8 26

    5

    1 2 0 4 5

    3

    8 77 777

    '
  - '4

    1

    832

    3

    35 0 2

    5

    1 2 2 6 5

    3

    9 105 777

    '
  - '1

    1

    7554

    '
  - '1

    1

    3507

    '
  - '4

    1

    1337

    3

    8 8 0

    5

    0 2 4 6 5

    3

    7 105 777

    '
  - '1

    1

    1487

    '
  - '1

    1

    849

    '
  - '4

    1

    1337

    3

    18 8 2

    5

    2 2 2 6 5

    3

    7 77 1488

    '
  - '4

    1

    1337

    3

    12 8 1

    5

    1 2 2 4 5

    3

    4 47 70

    '
  - '4

    1

    2659

    3

    19 7 1

    5

    1 2 2 6 5

    3

    9 105 940

    '
  - '4

    1

    1337

    3

    10 1 1

    5

    2 2 3 4 5

    3

    10 115 1546

    '
  - '4

    1

    1799

    3

    10 8 1

    5

    1 1 2 7 5

    3

    7 77 21

    '
  - '4

    1

    1785

    3

    7 0 1

    5

    1 2 2 6 5

    3

    9 105 1516

    '
  - '4

    1

    1034

    3

    1 0 1

    5

    1 2 2 4 5

    3

    4 47 772

    '
  - '4

    1

    1785

    3

    19 1 2

    5

    2 0 2 6 5

    3

    9 105 777

    '
  - '1

    1

    13409

    '
  - '4

    1

    325

    3

    19 8 0

    5

    0 2 4 9 5

    3

    7 105 777

    '
  - '4

    1

    2493

    3

    9 10 1

    5

    1 2 2 6 5

    3

    7 77 2477

    '
  - '4

    1

    1799

    3

    10 8 1

    5

    1 1 0 6 5

    3

    7 144 21

    '
  - '4

    1

    1785

    3

    19 10 1

    5

    1 4 2 6 10

    3

    13 30 777

    '
  - '1

    1

    107

    '
  - '4

    1

    458

    3

    2 0 1

    5

    1 2 2 4 5

    3

    4 47 541

    '
  - '4

    1

    446

    3

    19 8 0

    5

    0 2 4 0 5

    3

    7 105 777

    '
  - '4

    1

    1337

    3

    4 0 2

    5

    0 1 3 4 5

    3

    7 115 777

    '
  - '4

    1

    1034

    3

    2 0 1

    5

    0 2 2 3 5

    3

    4 47 541

    '
  - '4

    1

    1337

    3

    17 7 1

    5

    0 2 2 6 12

    3

    9 105 940

    '
  - '4

    1

    1799

    3

    10 14 1

    5

    1 1 0 4 5

    3

    1 77 21

    '
  - '4

    1

    411

    3

    12 15 10

    5

    0 2 3 2 5

    3

    11 77 1224

    '
  - '4

    1

    4323

    3

    9 1 1

    5

    1 2 2 6 5

    3

    7 28 1516

    '
  - '4

    1

    2824

    3

    10 8 1

    5

    1 1 0 4 5

    3

    1 145 21

    '
  - '4

    1

    1337

    3

    31 7 1

    5

    0 2 2 6 10

    3

    9 143 1515

    '
  - '4

    1

    1337

    3

    26 7 1

    5

    0 2 2 6 19

    3

    9 143 940

    '
  - '4

    1

    2880

    3

    12 12 0

    5

    1 2 4 5 0

    3

    7 12 777

    '
  - '1

    1

    348

    '
  - '1

    1

    155

    '
  - '1

    1

    2344

    '
  - '4

    1

    1337

    3

    10 4 1

    5

    1 2 2 6 5

    3

    7 77 612

    '
  - '4

    1

    1337

    3

    19 8 1

    5

    1 2 4 11 7

    3

    9 105 777

    '
  output:
  - '446

    4

    3

    260

    '
  - '2002

    '
  - '890

    '
  - '446

    5

    3

    260

    '
  - '289

    '
  - '161

    '
  - '44

    '
  - '82

    '
  - '26

    '
  - '45

    '
  - '48

    '
  - '808

    '
  - '446

    4

    3

    260

    '
  - '882

    '
  - '133

    '
  - '2

    '
  - '16

    '
  - '6

    '
  - '71

    '
  - '1330

    '
  - '446

    5

    4

    260

    '
  - '13

    '
  - '3

    '
  - '63

    '
  - '446

    8

    3

    260

    '
  - '446

    8

    4

    260

    '
  - '3961

    '
  - '446

    7

    3

    260

    '
  - '1001

    '
  - '96

    '
  - '54

    '
  - '148

    '
  - '29

    '
  - '15

    '
  - '1492

    '
  - '5

    '
  - '20

    '
  - '24

    '
  - '12

    '
  - '4256

    '
  - '872

    '
  - '17

    '
  - '34

    '
  - '27

    '
  - '33

    '
  - '1

    '
  - '831

    5

    3

    260

    '
  - '446

    7

    3

    259

    '
  - '954

    '
  - '18

    '
  - '446

    5

    3

    181

    '
  - '595

    7

    3

    259

    '
  - '993

    '
  - '11

    '
  - '446

    4

    4

    260

    '
  - '446

    4

    3

    181

    '
  - '446

    3

    3

    181

    '
  - '157

    7

    3

    259

    '
  - '446

    6

    3

    260

    '
  - '408

    '
  - '75

    '
  - '60

    '
  - '1146

    '
  - '308

    4

    3

    260

    '
  - '252

    '
  - '51

    '
  - '1719

    '
  - '124

    '
  - '446

    7

    4

    260

    '
  - '243

    '
  - '1311

    '
  - '65

    '
  - '56

    '
  - '264

    '
  - '22

    '
  - '1483

    '
  - '19

    '
  - '23

    '
  - '1297

    '
  - '7

    '
  - '37

    '
  - '831

    5

    3

    452

    '
  - '446

    7

    3

    314

    '
  - '978

    '
  - '600

    5

    3

    260

    '
  - '595

    7

    3

    393

    '
  - '10

    '
  - '345

    4

    3

    181

    '
  - '157

    12

    3

    259

    '
  - '1632

    '
  - '308

    4

    3

    409

    '
  - '772

    '
  - '99

    '
  - '446

    7

    3

    457

    '
  - '348

    '
  - '286

    '
  - '38

    '
  - '4

    '
  - '831

    4

    3

    452

    '
  - '446

    5

    3

    516

    '
  - '446

    3

    4

    260

    '
  - '600

    5

    3

    27

    '
  - '595

    7

    3

    260

    '
  - '198

    5

    3

    260

    '
  - '595

    7

    3

    506

    '
  - '345

    1

    3

    181

    '
  - '2947

    '
  - '109

    7

    3

    260

    '
  - '593

    '
  - '14

    '
  - '446

    1

    3

    260

    '
  - '21

    '
  - '345

    2

    3

    181

    '
  - '595

    7

    2

    259

    '
  - '308

    5

    3

    409

    '
  - '446

    4

    4

    40

    '
  - '545

    7

    3

    260

    '
  - '446

    1

    4

    260

    '
  - '1441

    4

    3

    452

    '
  - '40

    '
  - '595

    7

    2

    260

    '
  - '308

    5

    2

    409

    '
  - '25

    '
  - '446

    4

    3

    40

    '
  - '446

    7

    4

    314

    '
  - '137

    5

    2

    409

    '
  - '446

    11

    4

    314

    '
  - '942

    5

    3

    27

    '
  - '960

    7

    3

    260

    '
  - '942

    7

    3

    27

    '
  - '446

    11

    7

    314

    '
  - '999

    '
  - '84

    '
  - '30

    '
  - '1265

    '
  - '1264

    '
  - '9

    '
  - '35

    '
  - '446

    5

    3

    205

    '
  - '446

    8

    3

    259

    '
  - '446

    8

    5

    260

    '
  - '2201

    '
  - '1138

    '
  - '236

    '
  - '28

    '
  - '405

    8

    3

    260

    '
  - '744

    '
  - '32

    '
  - '446

    5

    3

    358

    '
  - '1191

    '
  - '804

    4

    4

    260

    '
  - '8

    '
  - '446

    4

    3

    182

    '
  - '370

    '
  - '475

    '
  - '123

    '
  - '107

    '
  - '2522

    '
  - '114

    '
  - '162

    '
  - '733

    '
  - '446

    8

    2

    260

    '
  - '483

    '
  - '600

    5

    3

    483

    '
  - '446

    10

    3

    260

    '
  - '278

    12

    3

    259

    '
  - '2518

    '
  - '1169

    '
  - '446

    3

    3

    260

    '
  - '496

    '
  - '283

    '
  - '446

    7

    3

    497

    '
  - '446

    5

    3

    24

    '
  - '887

    7

    3

    314

    '
  - '446

    4

    3

    516

    '
  - '600

    5

    4

    27

    '
  - '595

    3

    3

    506

    '
  - '345

    1

    3

    258

    '
  - '595

    8

    3

    259

    '
  - '4470

    '
  - '109

    7

    4

    260

    '
  - '831

    4

    3

    827

    '
  - '600

    5

    3

    49

    '
  - '595

    7

    5

    260

    '
  - '36

    '
  - '153

    2

    3

    181

    '
  - '149

    7

    3

    260

    '
  - '446

    2

    3

    260

    '
  - '345

    2

    2

    181

    '
  - '446

    7

    5

    314

    '
  - '600

    6

    3

    27

    '
  - '137

    6

    2

    409

    '
  - '1441

    4

    3

    506

    '
  - '942

    5

    3

    49

    '
  - '446

    11

    4

    506

    '
  - '446

    10

    7

    314

    '
  - '960

    4

    3

    260

    '
  - '116

    '
  - '52

    '
  - '782

    '
  - '446

    4

    3

    205

    '
  - '446

    8

    5

    259

    '
timeout: 2.0
