prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou are given\
  \ an array a of length n.\n\nYou are also given a set of distinct positions p_1,\
  \ p_2, ..., p_m, where 1 \u2264 p_i < n. The position p_i means that you can swap\
  \ elements a[p_i] and a[p_i + 1]. You can apply this operation any number of times\
  \ for each of the given positions.\n\nYour task is to determine if it is possible\
  \ to sort the initial array in non-decreasing order (a_1 \u2264 a_2 \u2264 ... \u2264\
  \ a_n) using only allowed swaps.\n\nFor example, if a = [3, 2, 1] and p = [1, 2],\
  \ then we can first swap elements a[2] and a[3] (because position 2 is contained\
  \ in the given set p). We get the array a = [3, 1, 2]. Then we swap a[1] and a[2]\
  \ (position 1 is also contained in p). We get the array a = [1, 3, 2]. Finally,\
  \ we swap a[2] and a[3] again and get the array a = [1, 2, 3], sorted in non-decreasing\
  \ order.\n\nYou can see that if a = [4, 1, 2, 3] and p = [3, 2] then you cannot\
  \ sort the array.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe\
  \ first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014\
  \ the number of test cases.\n\nThen t test cases follow. The first line of each\
  \ test case contains two integers n and m (1 \u2264 m < n \u2264 100) \u2014 the\
  \ number of elements in a and the number of elements in p. The second line of the\
  \ test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100). The\
  \ third line of the test case contains m integers p_1, p_2, ..., p_m (1 \u2264 p_i\
  \ < n, all p_i are distinct) \u2014 the set of positions described in the problem\
  \ statement.\n\nOutput\n\nFor each test case, print the answer \u2014 \"YES\" (without\
  \ quotes) if you can sort the initial array in non-decreasing order (a_1 \u2264\
  \ a_2 \u2264 ... \u2264 a_n) using only allowed swaps. Otherwise, print \"NO\".\n\
  \nExample\n\nInput\n\n\n6\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n\
  1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n\n\nOutput\n\n\nYES\n\
  NO\nYES\nYES\nNO\nYES\nA: ```t=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n\
  \    a=list(map(int,input().split()))\n    b=[(a[i],i) for i in range(n)]\n    b=sorted(b)\n\
  \    p=list(map(int,input().split()))\n    adj=[[] for i in range(n)]\n    for i\
  \ in range(m):\n        p[i]=p[i]-1\n    for i in p:\n        adj[i].append(i+1)\n\
  \        adj[i+1].append(i)\n    ok=True\n    for i in range(n):\n        q=[b[i][1]]\n\
  \        temp=False\n        while len(q) is not 0:\n            s=q.pop(0)\n  \
  \          if s==i:\n                temp=True\n                break\n        \
  \    if i>s:\n                if s+1 in adj[s]:\n                    q.append(s+1)\n\
  \                else:\n                    break\n            else:\n         \
  \       if s-1 in adj[s]:\n                    q.append(s-1)\n                else:\n\
  \                    break\n        if temp==False:\n            ok=False\n    \
  \        break\n    if ok==True:\n        print(\"YES\")\n    else:\n        print(\"\
  NO\")```\nQ: Write python code to solve the following coding problem that obeys\
  \ the constraints and passes the example test cases. The output code needs to read\
  \ from and write to standard IO. Please wrap your code answer using ```:\nTwo players\
  \ A and B have a list of n integers each. They both want to maximize the subtraction\
  \ between their score and their opponent's score. \n\nIn one turn, a player can\
  \ either add to his score any element from his list (assuming his list is not empty),\
  \ the element is removed from the list afterward. Or remove an element from his\
  \ opponent's list (assuming his opponent's list is not empty).\n\nNote, that in\
  \ case there are equal elements in the list only one of them will be affected in\
  \ the operations above. For example, if there are elements \\{1, 2, 2, 3\\} in a\
  \ list and you decided to choose 2 for the next turn, only a single instance of\
  \ 2 will be deleted (and added to the score, if necessary). \n\nThe player A starts\
  \ the game and the game stops when both lists are empty. Find the difference between\
  \ A's score and B's score at the end of the game, if both of the players are playing\
  \ optimally.\n\nOptimal play between two players means that both players choose\
  \ the best possible strategy to achieve the best possible outcome for themselves.\
  \ In this problem, it means that each player, each time makes a move, which maximizes\
  \ the final difference between his score and his opponent's score, knowing that\
  \ the opponent is doing the same.\n\nInput\n\nThe first line of input contains an\
  \ integer n (1 \u2264 n \u2264 100 000) \u2014 the sizes of the list.\n\nThe second\
  \ line contains n integers a_i (1 \u2264 a_i \u2264 10^6), describing the list of\
  \ the player A, who starts the game.\n\nThe third line contains n integers b_i (1\
  \ \u2264 b_i \u2264 10^6), describing the list of the player B.\n\nOutput\n\nOutput\
  \ the difference between A's score and B's score (A-B) if both of them are playing\
  \ optimally.\n\nExamples\n\nInput\n\n2\n1 4\n5 1\n\n\nOutput\n\n0\n\nInput\n\n3\n\
  100 100 100\n100 100 100\n\n\nOutput\n\n0\n\nInput\n\n2\n2 1\n5 6\n\n\nOutput\n\n\
  -3\n\nNote\n\nIn the first example, the game could have gone as follows: \n\n  *\
  \ A removes 5 from B's list. \n  * B removes 4 from A's list. \n  * A takes his\
  \ 1. \n  * B takes his 1. \n\n\n\nHence, A's score is 1, B's score is 1 and difference\
  \ is 0.\n\nThere is also another optimal way of playing:\n\n  * A removes 5 from\
  \ B's list. \n  * B removes 4 from A's list. \n  * A removes 1 from B's list. \n\
  \  * B removes 1 from A's list. \n\n\n\nThe difference in the scores is still 0.\n\
  \nIn the second example, irrespective of the moves the players make, they will end\
  \ up with the same number of numbers added to their score, so the difference will\
  \ be 0.\nA: ```N = int(input())\narr1 = list(map(int, input().split()))\narr2 =\
  \ list(map(int, input().split()))\narr1.sort()\narr2.sort()\nmax1 = N-1\nmax2 =\
  \ N-1\nA = 0\nB = 0\nturn = 0\nwhile(max1>=0 or max2>=0):\n  if turn == 0:\n   \
  \ if arr1[max1]>=arr2[max2]:\n      if max1>=0:\n        A+=arr1[max1]\n       \
  \ max1-=1\n      else:\n        max2-=1\n    else:\n      if max2>=0:        \n\
  \        max2-=1\n      else:\n        A+=arr1[max1]\n        max1-=1    \n  else:\
  \    \n    if arr1[max1]<=arr2[max2]:\n      if max2>=0:\n        B+=arr2[max2]\n\
  \        max2-=1\n      else:\n        max1-=1\n    else:\n      if max1>=0:   \
  \     \n        max1-=1\n      else:\n        B+=arr2[max2]\n        max2-=1   \
  \ \n  if turn == 0:\n    turn = 1\n  else:\n    turn = 0\nprint(A-B)```\nQ: Write\
  \ python code to solve the following coding problem that obeys the constraints and\
  \ passes the example test cases. The output code needs to read from and write to\
  \ standard IO. Please wrap your code answer using ```:\nVupsen and Pupsen were gifted\
  \ an integer array. Since Vupsen doesn't like the number 0, he threw away all numbers\
  \ equal to 0 from the array. As a result, he got an array a of length n.\n\nPupsen,\
  \ on the contrary, likes the number 0 and he got upset when he saw the array without\
  \ zeroes. To cheer Pupsen up, Vupsen decided to come up with another array b of\
  \ length n such that \u2211_{i=1}^{n}a_i \u22C5 b_i=0. Since Vupsen doesn't like\
  \ number 0, the array b must not contain numbers equal to 0. Also, the numbers in\
  \ that array must not be huge, so the sum of their absolute values cannot exceed\
  \ 10^9. Please help Vupsen to find any such array b!\n\nInput\n\nThe first line\
  \ contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test\
  \ cases. The next 2 \u22C5 t lines contain the description of test cases. The description\
  \ of each test case consists of two lines.\n\nThe first line of each test case contains\
  \ a single integer n (2 \u2264 n \u2264 10^5) \u2014 the length of the array.\n\n\
  The second line contains n integers a_1, a_2, \u2026, a_n (-10^4 \u2264 a_i \u2264\
  \ 10^4, a_i \u2260 0) \u2014 the elements of the array a.\n\nIt is guaranteed that\
  \ the sum of n over all test cases does not exceed 2 \u22C5 10^5.\n\nOutput\n\n\
  For each test case print n integers b_1, b_2, \u2026, b_n \u2014 elements of the\
  \ array b (|b_1|+|b_2|+\u2026 +|b_n| \u2264 10^9, b_i \u2260 0, \u2211_{i=1}^{n}a_i\
  \ \u22C5 b_i=0).\n\nIt can be shown that the answer always exists.\n\nExample\n\n\
  Input\n\n\n3\n2\n5 5\n5\n5 -2 10 -9 4\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n1 -1\n\
  -1 5 1 -1 -1\n-10 2 2 -3 5 -1 -1\n\nNote\n\nIn the first test case, 5 \u22C5 1 +\
  \ 5 \u22C5 (-1)=5-5=0. You could also print 3 -3, for example, since 5 \u22C5 3\
  \ + 5 \u22C5 (-3)=15-15=0\n\nIn the second test case, 5 \u22C5 (-1) + (-2) \u22C5\
  \ 5 + 10 \u22C5 1 + (-9) \u22C5 (-1) + 4 \u22C5 (-1)=-5-10+10+9-4=0.\nA:"
question: "Vupsen and Pupsen were gifted an integer array. Since Vupsen doesn't like\
  \ the number 0, he threw away all numbers equal to 0 from the array. As a result,\
  \ he got an array a of length n.\n\nPupsen, on the contrary, likes the number 0\
  \ and he got upset when he saw the array without zeroes. To cheer Pupsen up, Vupsen\
  \ decided to come up with another array b of length n such that \u2211_{i=1}^{n}a_i\
  \ \u22C5 b_i=0. Since Vupsen doesn't like number 0, the array b must not contain\
  \ numbers equal to 0. Also, the numbers in that array must not be huge, so the sum\
  \ of their absolute values cannot exceed 10^9. Please help Vupsen to find any such\
  \ array b!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264\
  \ 100) \u2014 the number of test cases. The next 2 \u22C5 t lines contain the description\
  \ of test cases. The description of each test case consists of two lines.\n\nThe\
  \ first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5)\
  \ \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2,\
  \ \u2026, a_n (-10^4 \u2264 a_i \u2264 10^4, a_i \u2260 0) \u2014 the elements of\
  \ the array a.\n\nIt is guaranteed that the sum of n over all test cases does not\
  \ exceed 2 \u22C5 10^5.\n\nOutput\n\nFor each test case print n integers b_1, b_2,\
  \ \u2026, b_n \u2014 elements of the array b (|b_1|+|b_2|+\u2026 +|b_n| \u2264 10^9,\
  \ b_i \u2260 0, \u2211_{i=1}^{n}a_i \u22C5 b_i=0).\n\nIt can be shown that the answer\
  \ always exists.\n\nExample\n\nInput\n\n\n3\n2\n5 5\n5\n5 -2 10 -9 4\n7\n1 2 3 4\
  \ 5 6 7\n\n\nOutput\n\n\n1 -1\n-1 5 1 -1 -1\n-10 2 2 -3 5 -1 -1\n\nNote\n\nIn the\
  \ first test case, 5 \u22C5 1 + 5 \u22C5 (-1)=5-5=0. You could also print 3 -3,\
  \ for example, since 5 \u22C5 3 + 5 \u22C5 (-3)=15-15=0\n\nIn the second test case,\
  \ 5 \u22C5 (-1) + (-2) \u22C5 5 + 10 \u22C5 1 + (-9) \u22C5 (-1) + 4 \u22C5 (-1)=-5-10+10+9-4=0."
samples:
- " ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    a.sort()\n    b=[0]*n\n    if a[0]>0:\n        b[0]=1\n        for i in range(1,n):\n\
  \            b[i]=a[i]\n    else:\n        b[-1]=-1\n        for i in range(n-2,-1,-1):\n\
  \            b[i]=a[i]\n    print(*b)````\nQ:"
- " ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    b=[0]*n\n    for i in range(n):\n        for j in range(n):\n            if\
  \ a[i]*a[j]%n!=0:\n                b[i]=(a[i]*a[j])%n\n    print(' '.join(map(str,b)))```\n\
  Q:"
test_cases:
  input:
  - '3

    2

    5 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 7

    '
  - '1

    3

    10000 10000 -10000

    '
  - '1

    3

    10000 10000 10000

    '
  - '3

    2

    5 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 7

    '
  - '1

    3

    11000 10000 -10000

    '
  - '1

    3

    10000 10000 11000

    '
  - '3

    2

    5 5

    5

    5 -2 10 -8 4

    7

    1 2 3 4 5 6 7

    '
  - '3

    2

    5 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 12

    '
  - '1

    3

    11000 11000 -10000

    '
  - '3

    2

    5 5

    5

    4 -2 10 -8 4

    7

    1 2 3 4 5 6 7

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 12

    '
  - '1

    3

    11000 11010 -10000

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    11100 11010 -10000

    '
  - '3

    2

    7 3

    5

    5 -2 10 -9 4

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    10100 10000 -10000

    '
  - '1

    3

    00000 10000 10000

    '
  - '3

    2

    5 5

    5

    5 -2 10 -1 4

    7

    1 2 3 4 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 7

    '
  - '1

    3

    10000 10000 00000

    '
  - '3

    2

    5 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 8 12

    '
  - '3

    2

    5 5

    5

    4 -2 10 -16 4

    7

    1 2 3 4 5 6 7

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    0 2 3 4 5 6 12

    '
  - '1

    3

    11000 11011 -10000

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    10100 10000 -16720

    '
  - '1

    3

    00100 10000 10000

    '
  - '3

    2

    5 5

    5

    5 -2 10 -1 4

    7

    1 2 3 5 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 4

    7

    1 2 3 2 5 6 7

    '
  - '1

    3

    00000 10000 00000

    '
  - '3

    2

    6 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 12

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    -1 2 3 4 5 6 12

    '
  - '1

    3

    11000 11011 -17252

    '
  - '3

    2

    7 4

    5

    5 -2 10 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    10000 10000 -16720

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    7

    1 2 3 5 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 4

    7

    1 2 3 2 5 6 9

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    -1 2 3 4 5 6 22

    '
  - '1

    3

    11100 11011 -17252

    '
  - '1

    3

    10010 10000 -16720

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    7

    1 2 3 8 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 4

    7

    1 2 3 1 5 6 9

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    -1 2 3 4 5 6 23

    '
  - '1

    3

    11100 11111 -17252

    '
  - '1

    3

    10010 10000 -27045

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    7

    1 2 3 8 2 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 6

    7

    1 2 3 2 5 6 9

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    -1 2 3 4 9 6 23

    '
  - '1

    3

    11100 01111 -17252

    '
  - '1

    3

    10010 11000 -27045

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    7

    1 0 3 8 2 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 17 -9 6

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10100 01111 -17252

    '
  - '1

    3

    10010 11000 -23343

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    7

    1 0 3 8 2 6 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -9 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10100 01110 -17252

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    7

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10100 01110 -32208

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    4

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 8

    5

    5 -3 17 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10100 01100 -32208

    '
  - '3

    2

    5 5

    5

    5 0 15 -1 4

    4

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 10

    5

    5 -3 17 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10100 01100 -59257

    '
  - '3

    2

    7 5

    5

    5 0 15 -1 4

    4

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 14

    5

    5 -3 17 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10100 01000 -59257

    '
  - '3

    2

    5 14

    5

    5 -3 17 -17 1

    7

    1 2 3 3 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 15 -17 1

    7

    1 2 3 3 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 15 -17 1

    7

    1 2 3 3 5 3 9

    '
  - '3

    2

    5 14

    5

    5 -3 15 -17 1

    7

    1 2 3 3 5 5 9

    '
  - '1

    3

    11100 10000 -10000

    '
  - '1

    3

    10000 10000 11001

    '
  - '3

    2

    5 5

    5

    5 -2 10 -8 4

    7

    1 2 3 4 5 2 7

    '
  - '3

    2

    9 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 12

    '
  - '1

    3

    11000 11000 -2407

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    3

    1 2 3 4 5 6 12

    '
  - '1

    3

    11000 11010 -15319

    '
  - '3

    2

    7 5

    5

    5 -2 10 -15 4

    7

    1 2 3 3 5 6 12

    '
  - '3

    2

    7 3

    5

    5 -2 10 -9 4

    7

    1 2 5 3 5 6 12

    '
  - '1

    3

    10100 10000 -2362

    '
  - '1

    3

    10000 10000 10001

    '
  - '3

    2

    5 5

    5

    5 -2 5 -1 4

    7

    1 2 3 4 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 1 -9 4

    7

    1 2 3 4 5 6 7

    '
  - '1

    3

    10000 10000 00001

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 8 12

    '
  - '1

    3

    11010 10000 -10000

    '
  - '3

    2

    5 5

    5

    4 -2 10 -16 4

    7

    1 2 3 4 6 6 7

    '
  - '3

    2

    7 5

    5

    1 -2 10 -9 4

    7

    0 2 3 4 5 6 12

    '
  - '1

    3

    11000 11001 -10000

    '
  - '3

    2

    7 5

    5

    9 -2 10 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    10100 10000 -279

    '
  - '1

    3

    00100 10000 10010

    '
  - '3

    2

    5 8

    5

    5 -2 10 -6 4

    7

    1 2 3 2 5 6 7

    '
  - '1

    3

    00000 10000 00001

    '
  - '3

    2

    6 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 11 12

    '
  - '3

    2

    7 5

    5

    5 -2 10 -5 4

    7

    -1 2 3 4 5 6 12

    '
  - '1

    3

    01000 11011 -17252

    '
  - '3

    2

    14 4

    5

    5 -2 10 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    10001 10000 -16720

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 4

    7

    1 2 3 2 0 6 9

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    -1 2 3 7 5 6 22

    '
  - '1

    3

    11110 11011 -17252

    '
  - '3

    2

    5 5

    5

    6 0 10 -1 4

    7

    1 2 3 8 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 0

    7

    1 2 3 1 5 6 9

    '
  - '1

    3

    10100 11111 -17252

    '
  - '1

    3

    10010 10000 -33058

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 6

    7

    1 0 3 2 5 6 9

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    -1 2 0 4 9 6 23

    '
  - '1

    3

    11100 01111 -27892

    '
  - '3

    2

    5 5

    5

    5 0 20 -1 4

    7

    1 0 3 8 2 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 17 -9 6

    7

    1 1 3 2 5 6 9

    '
  - '1

    3

    10100 01111 -26239

    '
  - '3

    2

    3 5

    5

    5 0 10 -1 4

    7

    1 0 3 8 2 6 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -12 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    2

    10100 01110 -17252

    '
  - '3

    2

    5 5

    5

    5 0 10 -2 4

    7

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -17 1

    7

    2 2 3 2 5 6 9

    '
  - '3

    2

    5 5

    5

    5 0 10 -1 4

    4

    1 0 3 14 2 10 10

    '
  - '3

    2

    5 11

    5

    5 -3 17 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    00100 01100 -32208

    '
  - '3

    2

    5 5

    5

    5 0 15 -1 4

    2

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 10

    5

    5 -3 5 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 17 -9 1

    7

    1 2 3 2 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 8 -17 1

    7

    1 2 3 3 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 15 -17 1

    7

    0 2 3 3 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 15 -18 1

    7

    1 2 3 3 5 3 9

    '
  - '3

    2

    5 14

    5

    2 -3 15 -17 1

    7

    1 2 3 3 5 5 9

    '
  - '1

    3

    11100 10000 -19425

    '
  - '1

    3

    10000 00000 11001

    '
  - '3

    2

    9 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 6 6

    '
  - '3

    2

    4 5

    5

    4 -1 10 -8 4

    7

    1 2 3 4 5 6 7

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 1

    3

    1 2 3 4 5 6 12

    '
  - '1

    3

    11000 11000 -15319

    '
  - '3

    2

    5 5

    5

    5 -2 10 -15 4

    7

    1 2 3 3 5 6 12

    '
  - '3

    2

    7 1

    5

    5 -2 10 -9 4

    7

    1 2 5 3 5 6 12

    '
  - '1

    3

    10100 10010 -2362

    '
  - '1

    3

    00000 10000 10001

    '
  - '3

    2

    5 5

    5

    5 -2 5 -1 4

    7

    2 2 3 4 5 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 1 -9 4

    7

    1 2 3 8 5 6 7

    '
  - '1

    2

    10000 10000 00001

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    1 2 3 4 5 15 12

    '
  - '1

    3

    11010 10100 -10000

    '
  - '3

    2

    5 5

    5

    4 -2 10 -16 4

    7

    1 2 1 4 6 6 7

    '
  - '1

    2

    11000 11001 -10000

    '
  - '3

    2

    11 5

    5

    9 -2 10 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    3

    10100 10100 -279

    '
  - '1

    3

    10100 10000 10010

    '
  - '1

    3

    10000 10001 00001

    '
  - '1

    3

    01100 11011 -17252

    '
  - '3

    2

    14 4

    5

    5 -2 20 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    2

    10001 10000 -16720

    '
  - '3

    2

    5 8

    5

    5 -2 10 -9 4

    7

    1 2 3 2 1 6 9

    '
  - '3

    2

    7 5

    5

    5 -2 10 -7 4

    7

    -1 2 3 7 5 6 22

    '
  - '1

    3

    11111 11011 -17252

    '
  - '3

    2

    5 5

    5

    6 0 10 -2 4

    7

    1 2 3 8 5 6 7

    '
  - '1

    3

    10100 11111 -27041

    '
  - '1

    3

    10000 10000 -33058

    '
  - '1

    3

    10100 01111 -27892

    '
  - '3

    2

    5 5

    5

    5 0 20 -1 4

    7

    1 0 4 8 2 6 7

    '
  - '1

    3

    10100 00111 -26239

    '
  - '3

    2

    3 7

    5

    5 0 10 -1 4

    7

    1 0 3 8 2 6 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -12 1

    7

    1 2 3 2 3 6 9

    '
  - '3

    2

    5 5

    5

    5 -1 10 -2 4

    7

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -17 1

    7

    2 2 3 1 5 6 9

    '
  - '3

    2

    5 11

    5

    5 -3 17 -17 1

    4

    1 2 3 2 5 6 9

    '
  - '1

    3

    00100 01100 -37993

    '
  - '3

    2

    5 5

    5

    5 0 15 -1 4

    2

    1 1 3 8 2 10 10

    '
  - '3

    2

    5 10

    5

    5 -3 9 -17 1

    7

    1 2 3 2 5 6 9

    '
  - '1

    3

    10000 11100 -59257

    '
  - '3

    2

    5 14

    5

    7 -3 8 -17 1

    7

    1 2 3 3 5 6 9

    '
  - '3

    2

    5 14

    5

    5 -3 15 -17 1

    7

    0 2 3 3 5 10 9

    '
  - '1

    3

    11100 10000 -27092

    '
  - '1

    3

    10000 00001 11001

    '
  - '3

    2

    9 5

    5

    5 -2 10 -9 4

    3

    1 2 3 4 5 6 6

    '
  - '3

    2

    4 5

    5

    4 -1 10 -8 4

    7

    1 2 3 4 10 6 7

    '
  - '1

    3

    11000 11000 -20870

    '
  - '3

    2

    5 5

    5

    5 -2 10 -15 4

    7

    1 2 3 3 8 6 12

    '
  - '3

    2

    7 1

    5

    5 -2 10 -9 4

    7

    1 4 5 3 5 6 12

    '
  - '1

    3

    10100 10010 -3993

    '
  - '3

    2

    5 5

    5

    5 -2 5 -1 4

    7

    2 2 3 4 4 6 7

    '
  - '3

    2

    5 8

    5

    5 -2 1 -9 4

    7

    1 4 3 8 5 6 7

    '
  - '1

    2

    10010 10000 00001

    '
  - '3

    2

    7 5

    5

    5 -2 10 -9 4

    7

    1 0 3 4 5 15 12

    '
  - '1

    3

    11010 10101 -10000

    '
  - '3

    2

    2 5

    5

    4 -2 10 -16 4

    7

    1 2 1 4 6 6 7

    '
  - '1

    2

    10000 11001 -10000

    '
  - '3

    2

    11 5

    5

    9 0 10 -9 3

    7

    1 2 3 3 5 6 12

    '
  - '1

    2

    10100 10100 -279

    '
  - '1

    3

    10100 10010 10010

    '
  - '1

    3

    10100 10001 00001

    '
  - '1

    3

    01100 11001 -17252

    '
  - '3

    2

    14 4

    5

    5 -2 20 -9 3

    7

    0 2 3 3 5 6 12

    '
  - '1

    3

    11111 10011 -17252

    '
  - '1

    3

    10100 10111 -27041

    '
  - '1

    3

    10000 10000 -30587

    '
  - '1

    3

    10100 01111 -9338

    '
  - '3

    2

    5 5

    5

    5 0 20 -1 4

    7

    1 0 4 8 2 2 7

    '
  - '3

    2

    3 4

    5

    5 0 10 -1 4

    7

    1 0 3 8 2 6 10

    '
  - '3

    2

    10 8

    5

    5 -2 17 -12 1

    7

    1 2 3 2 3 6 9

    '
  - '3

    2

    5 5

    5

    5 -1 10 -2 4

    4

    1 0 3 8 2 10 10

    '
  - '3

    2

    5 8

    5

    5 -2 17 -17 1

    7

    2 2 2 1 5 6 9

    '
  output:
  - "-5 5 \n2 5 -4 -4 1\n-2 1 -4 3 -7 -7 11\n"
  - '10000 10000 20000

    '
  - '-10000 -10000 20000

    '
  - "-5 5 \n2 5 -4 -4 1\n-2 1 -4 3 -7 -7 11\n"
  - '-10000 -10000 -21000

    '
  - '11000 11000 -20000

    '
  - '-5 5

    10 10 -3 -4 -8

    3 3 -3 -5 4 -7 6

    '
  - '-5 5

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 6

    '
  - '-10000 -10000 -22000

    '
  - '-5 5

    10 10 -2 -4 -8

    3 3 -3 -5 4 -7 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 6

    '
  - '-10000 -10000 -22010

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -3 -5 3 -12 6

    '
  - '-10000 -10000 -22110

    '
  - '-3 7

    10 10 -3 -4 -9

    3 3 -3 -5 3 -12 6

    '
  - '-10000 -10000 -20100

    '
  - '10000 10000 -10000

    '
  - '-5 5

    10 10 -3 -4 -1

    3 3 -3 -5 4 -7 6

    '
  - '-8 5

    10 10 -3 -4 -9

    3 3 -3 -5 4 -7 6

    '
  - '0 0 -20000

    '
  - '-5 5

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 8

    '
  - '-5 5

    10 10 -2 -4 -16

    3 3 -3 -5 4 -7 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -2 -5 4 -12 6

    '
  - '-10000 -10000 -22011

    '
  - '-5 7

    10 10 -3 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-16720 -16720 -20100

    '
  - '10000 10000 -10100

    '
  - '-5 5

    10 10 -3 -4 -1

    3 3 -3 -5 5 -7 6

    '
  - '-8 5

    10 10 -3 -4 -9

    3 3 -3 -5 2 -7 6

    '
  - '0 0 -10000

    '
  - '-5 6

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -1 -5 4 -12 6

    '
  - '-17252 -17252 -22011

    '
  - '-4 7

    10 10 -3 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-16720 -16720 -20000

    '
  - '-5 5

    10 10 -5 -4 -1

    3 3 -3 -5 5 -7 6

    '
  - '-8 5

    10 10 -3 -4 -9

    3 3 -3 -5 2 -9 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -1 -5 4 -22 6

    '
  - '-17252 -17252 -22111

    '
  - '-16720 -16720 -20010

    '
  - '-5 5

    10 10 -5 -4 -1

    3 3 -3 -5 8 -7 6

    '
  - '-8 5

    10 10 -3 -4 -9

    3 3 -3 -5 1 -9 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -1 -5 4 -23 6

    '
  - '-17252 -17252 -22211

    '
  - '-27045 -27045 -20010

    '
  - '-5 5

    10 10 -5 -4 -1

    3 3 -3 -2 8 -7 6

    '
  - '-8 5

    10 10 -3 -6 -9

    3 3 -3 -5 2 -9 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -1 -9 4 -23 6

    '
  - '-17252 -17252 -12211

    '
  - '-27045 -27045 -21010

    '
  - '-5 5

    10 10 -5 -4 -1

    3 3 -1 -2 8 -7 6

    '
  - '-8 5

    17 17 -3 -6 -9

    3 3 -3 -5 2 -9 6

    '
  - '-17252 -17252 -11211

    '
  - '-23343 -23343 -21010

    '
  - '-5 5

    10 10 -5 -4 -1

    3 3 -1 -2 8 -10 6

    '
  - '-8 5

    17 17 -3 -1 -9

    3 3 -3 -5 2 -9 6

    '
  - '-17252 -17252 -11210

    '
  - '-5 5

    10 10 -5 -4 -1

    3 3 -1 -2 8 -10 10

    '
  - '-8 5

    17 17 -3 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-32208 -32208 -11210

    '
  - '-5 5

    10 10 -5 -4 -1

    0 1 -8 3

    '
  - '-8 5

    17 17 -2 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-32208 -32208 -11200

    '
  - '-5 5

    15 15 -5 -4 -1

    0 1 -8 3

    '
  - '-10 5

    17 17 -2 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-59257 -59257 -11200

    '
  - '-5 7

    15 15 -5 -4 -1

    0 1 -8 3

    '
  - '-14 5

    17 17 -2 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-59257 -59257 -11100

    '
  - '-14 5

    17 17 -2 -1 -17

    3 3 -3 -5 3 -9 6

    '
  - '-14 5

    15 15 -2 -1 -17

    3 3 -3 -5 3 -9 6

    '
  - '-14 5

    15 15 -2 -1 -17

    3 3 -3 -5 3 -9 3

    '
  - '-14 5

    15 15 -2 -1 -17

    3 3 -3 -5 3 -9 5

    '
  - '-10000 -10000 -21100

    '
  - '11001 11001 -20000

    '
  - '-5 5

    10 10 -3 -4 -8

    3 3 -3 -5 4 -7 2

    '
  - '-5 9

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 6

    '
  - '-2407 -2407 -22000

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -3

    '
  - '-15319 -15319 -22010

    '
  - '-5 7

    10 10 -3 -4 -15

    3 3 -3 -5 3 -12 6

    '
  - '-3 7

    10 10 -3 -4 -9

    5 5 -3 -5 3 -12 6

    '
  - '-2362 -2362 -20100

    '
  - '10001 10001 -20000

    '
  - '-5 5

    5 5 -3 -4 -1

    3 3 -3 -5 4 -7 6

    '
  - '-8 5

    1 1 -3 -4 -9

    3 3 -3 -5 4 -7 6

    '
  - '1 1 -20000

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 8

    '
  - '-10000 -10000 -21010

    '
  - '-5 5

    10 10 -2 -4 -16

    3 3 -3 -6 4 -7 6

    '
  - '-5 7

    10 10 1 -4 -9

    3 3 -2 -5 4 -12 6

    '
  - '-10000 -10000 -22001

    '
  - '-5 7

    10 10 -7 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-279 -279 -20100

    '
  - '10010 10010 -10100

    '
  - '-8 5

    10 10 -3 -4 -6

    3 3 -3 -5 2 -7 6

    '
  - '1 1 -10000

    '
  - '-5 6

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 11

    '
  - '-5 7

    10 10 -3 -4 -5

    3 3 -1 -5 4 -12 6

    '
  - '-17252 -17252 -12011

    '
  - '-4 14

    10 10 -3 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-16720 -16720 -20001

    '
  - '-8 5

    10 10 -3 -4 -9

    3 3 -3 0 2 -9 6

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -1 -5 7 -22 6

    '
  - '-17252 -17252 -22121

    '
  - '-5 5

    10 10 -6 -4 -1

    3 3 -3 -5 8 -7 6

    '
  - '-8 5

    10 10 -3 0 -9

    3 3 -3 -5 1 -9 6

    '
  - '-17252 -17252 -21211

    '
  - '-33058 -33058 -20010

    '
  - '-8 5

    10 10 -3 -6 -9

    3 3 -1 -5 2 -9 6

    '
  - '-5 7

    10 10 -3 -4 -9

    0 0 -1 -9 4 -23 6

    '
  - '-27892 -27892 -12211

    '
  - '-5 5

    20 20 -5 -4 -1

    3 3 -1 -2 8 -7 6

    '
  - '-8 5

    17 17 -3 -6 -9

    3 3 -2 -5 2 -9 6

    '
  - '-26239 -26239 -11211

    '
  - '-5 3

    10 10 -5 -4 -1

    3 3 -1 -2 8 -10 6

    '
  - '-8 5

    17 17 -3 -1 -12

    3 3 -3 -5 2 -9 6

    '
  - '-1110 10100

    '
  - '-5 5

    10 10 -5 -4 -2

    3 3 -1 -2 8 -10 10

    '
  - '-8 5

    17 17 -3 -1 -17

    3 3 -4 -5 2 -9 6

    '
  - '-5 5

    10 10 -5 -4 -1

    0 1 -14 3

    '
  - '-11 5

    17 17 -2 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-32208 -32208 -1200

    '
  - '-5 5

    15 15 -5 -4 -1

    0 1

    '
  - '-10 5

    5 5 -2 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-14 5

    17 17 -2 -1 -9

    3 3 -3 -5 2 -9 6

    '
  - '-14 5

    8 8 -2 -1 -17

    3 3 -3 -5 3 -9 6

    '
  - '-14 5

    15 15 -2 -1 -17

    3 3 -2 -5 3 -9 6

    '
  - '-14 5

    15 15 -2 -1 -18

    3 3 -3 -5 3 -9 3

    '
  - '-14 5

    15 15 1 -1 -17

    3 3 -3 -5 3 -9 5

    '
  - '-19425 -19425 -21100

    '
  - '11001 11001 -10000

    '
  - '-5 9

    10 10 -3 -4 -9

    3 3 -3 -5 4 -6 6

    '
  - '-5 4

    10 10 -3 -4 -8

    3 3 -3 -5 4 -7 6

    '
  - '-5 7

    10 10 -3 -1 -9

    3 3 -3

    '
  - '-15319 -15319 -22000

    '
  - '-5 5

    10 10 -3 -4 -15

    3 3 -3 -5 3 -12 6

    '
  - '-1 7

    10 10 -3 -4 -9

    5 5 -3 -5 3 -12 6

    '
  - '-2362 -2362 -20110

    '
  - '10001 10001 -10000

    '
  - '-5 5

    5 5 -3 -4 -1

    3 3 -4 -5 4 -7 6

    '
  - '-8 5

    1 1 -3 -4 -9

    3 3 -3 -5 8 -7 6

    '
  - '-10000 10000

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -3 -5 4 -12 15

    '
  - '-10000 -10000 -21110

    '
  - '-5 5

    10 10 -2 -4 -16

    1 1 -3 -6 4 -7 6

    '
  - '-11001 11000

    '
  - '-5 11

    10 10 -7 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-279 -279 -20200

    '
  - '10010 10010 -20100

    '
  - '1 1 -20001

    '
  - '-17252 -17252 -12111

    '
  - '-4 14

    20 20 -3 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-10000 10001

    '
  - '-8 5

    10 10 -3 -4 -9

    3 3 -3 -1 2 -9 6

    '
  - '-5 7

    10 10 -3 -4 -7

    3 3 -1 -5 7 -22 6

    '
  - '-17252 -17252 -22122

    '
  - '-5 5

    10 10 -6 -4 -2

    3 3 -3 -5 8 -7 6

    '
  - '-27041 -27041 -21211

    '
  - '-33058 -33058 -20000

    '
  - '-27892 -27892 -11211

    '
  - '-5 5

    20 20 -5 -4 -1

    4 4 -1 -2 8 -7 6

    '
  - '-26239 -26239 -10211

    '
  - '-7 3

    10 10 -5 -4 -1

    3 3 -1 -2 8 -10 6

    '
  - '-8 5

    17 17 -3 -1 -12

    3 3 -3 -3 2 -9 6

    '
  - '-5 5

    10 10 -4 -4 -2

    3 3 -1 -2 8 -10 10

    '
  - '-8 5

    17 17 -3 -1 -17

    3 3 -4 -5 1 -9 6

    '
  - '-11 5

    17 17 -2 -1 -17

    -2 1 -2 3

    '
  - '-37993 -37993 -1200

    '
  - '-5 5

    15 15 -5 -4 -1

    -1 1

    '
  - '-10 5

    9 9 -2 -1 -17

    3 3 -3 -5 2 -9 6

    '
  - '-59257 -59257 -21100

    '
  - '-14 5

    8 8 -4 -1 -17

    3 3 -3 -5 3 -9 6

    '
  - '-14 5

    15 15 -2 -1 -17

    3 3 -2 -5 3 -9 10

    '
  - '-27092 -27092 -21100

    '
  - '11001 11001 -10001

    '
  - '-5 9

    10 10 -3 -4 -9

    3 3 -3

    '
  - '-5 4

    10 10 -3 -4 -8

    3 3 -3 -10 4 -7 6

    '
  - '-20870 -20870 -22000

    '
  - '-5 5

    10 10 -3 -4 -15

    3 3 -3 -8 3 -12 6

    '
  - '-1 7

    10 10 -3 -4 -9

    5 5 -5 -5 3 -12 6

    '
  - '-3993 -3993 -20110

    '
  - '-5 5

    5 5 -3 -4 -1

    3 3 -4 -4 4 -7 6

    '
  - '-8 5

    1 1 -3 -4 -9

    3 3 -5 -5 8 -7 6

    '
  - '-10000 10010

    '
  - '-5 7

    10 10 -3 -4 -9

    3 3 -1 -5 4 -12 15

    '
  - '-10000 -10000 -21111

    '
  - '-5 2

    10 10 -2 -4 -16

    1 1 -3 -6 4 -7 6

    '
  - '-11001 10000

    '
  - '-5 11

    10 10 -9 -3 -9

    3 3 -3 -5 3 -12 6

    '
  - '-10100 10100

    '
  - '10010 10010 -20110

    '
  - '1 1 -20101

    '
  - '-17252 -17252 -12101

    '
  - '-4 14

    20 20 -3 -3 -9

    3 3 -2 -5 3 -12 6

    '
  - '-17252 -17252 -21122

    '
  - '-27041 -27041 -20211

    '
  - '-30587 -30587 -20000

    '
  - '-9338 -9338 -11211

    '
  - '-5 5

    20 20 -5 -4 -1

    4 4 -1 -2 8 -7 2

    '
  - '-4 3

    10 10 -5 -4 -1

    3 3 -1 -2 8 -10 6

    '
  - '-8 10

    17 17 -3 -1 -12

    3 3 -3 -3 2 -9 6

    '
  - '-5 5

    10 10 -4 -4 -2

    0 1 -8 3

    '
  - '-8 5

    17 17 -3 -1 -17

    2 2 -4 -5 1 -9 6

    '
timeout: 1.0
