prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou are given\
  \ array a_1, a_2, ..., a_n. Find the subsegment a_l, a_{l+1}, ..., a_r (1 \u2264\
  \ l \u2264 r \u2264 n) with maximum arithmetic mean (1)/(r - l + 1)\u2211_{i=l}^{r}{a_i}\
  \ (in floating-point numbers, i.e. without any rounding).\n\nIf there are many such\
  \ subsegments find the longest one.\n\nInput\n\nThe first line contains single integer\
  \ n (1 \u2264 n \u2264 10^5) \u2014 length of the array a.\n\nThe second line contains\
  \ n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9) \u2014 the array a.\n\
  \nOutput\n\nPrint the single integer \u2014 the length of the longest subsegment\
  \ with maximum possible arithmetic mean.\n\nExample\n\nInput\n\n\n5\n6 1 6 6 0\n\
  \n\nOutput\n\n\n2\n\nNote\n\nThe subsegment [3, 4] is the longest among all subsegments\
  \ with maximum arithmetic mean.\nA: ```n=int(input())\ns=[int(x) for x in input().split()]\n\
  el=max(s)\npos1=-1\npos2=-1\nc=0\nans=0\nfor i in range(0,len(s)):\n    if(s[i]==el):\n\
  \        c=c+1\n    else:\n        ans=max(ans,c)\n        c=0\nans=max(ans,c)\n\
  print(ans)```\nQ: Write python code to solve the following coding problem that obeys\
  \ the constraints and passes the example test cases. The output code needs to read\
  \ from and write to standard IO. Please wrap your code answer using ```:\nA: four\
  \ tea\n\nproblem\n\nTea is indispensable for programming contests. Tea has the effect\
  \ of relieving constant tension [citation needed]\n\nThere are N players participating\
  \ in the contest, so I would like to prepare tea for this number of people. There\
  \ are four types of tea packages, A, B, C, and D, all of which are the same variety\
  \ but have different contents. For a package X, the price of one package is p_X\
  \ yen, and it is known that if you buy one, you can make t_X cups of tea.\n\nFind\
  \ the minimum amount needed to make tea for N people. You may have a package that\
  \ you don't buy at all, and you don't have to buy a package for just N people (if\
  \ you can make more than N people).\n\nInput format\n\nThe input is given in the\
  \ following format.\n\n\nN\np_A p_B p_C p_D\nt_A t_B t_C t_D\n\n\n* The first line\
  \ gives the number of players participating in the contest.\n* In the second line,\
  \ the prices of tea in packages A, B, C and D are given separated by blanks.\n*\
  \ The third line gives the number of cups of tea that can be made from packages\
  \ A, B, C, and D, separated by blanks.\n\n\n\nConstraint\n\n* 1 \\ leq N \\ leq\
  \ 100\n* 1 \\ leq p_X \\ leq 100\n* 1 \\ leq t_X \\ leq 100\n* All inputs are given\
  \ as integers.\n\n\n\nOutput format\n\nOutput the minimum amount required to make\
  \ tea for N people in one line.\n\nInput example 1\n\n\nTen\n1 2 3 4\n1 2 4 8\n\n\
  \nOutput example 1\n\n\n6\n\n* It's best to buy one package B and one D.\n\n\n\n\
  Input example 2\n\n\nFive\n2 9 9 8\n1 4 5 100\n\n\nOutput example 2\n\n\n8\n\n*\
  \ You will have 20 times more tea than you need, but buying one Package D is the\
  \ cheapest way to get more than 5 cups of tea.\n\n\n\nInput example 3\n\n\ntwenty\
  \ four\n2 3 4 7\n7 9 11 20\n\n\nOutput example 3\n\n\n8\n\n* It's best to buy two\
  \ packages A and one C. It may not be possible to make just enough tea for the number\
  \ of people as in this case.\n\n\n\n\n\nExample\n\nInput\n\n10\n1 2 3 4\n1 2 4 8\n\
  \n\nOutput\n\n6\nA: ```n,pa,pb,pc,pd,ta,tb,tc,td=map(int,open(0).read().split())\n\
  r=range(n+1)\nm=1e9\nfor i in r:\n    for j in r:\n        for k in r:\n       \
  \     l=0--(n-ta*i-tb*j-tc*k)//td\n            m=min(m,pa*i+pb*j+pc*k+pd*l*(l>=0))\n\
  print(m)```\nQ: Write python code to solve the following coding problem that obeys\
  \ the constraints and passes the example test cases. The output code needs to read\
  \ from and write to standard IO. Please wrap your code answer using ```:\nThe new\
  \ generation external memory contains an array of integers a[1 \u2026 n] = [a_1,\
  \ a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value\
  \ of an arbitrary element. Instead, it allows you to cut out any segment of the\
  \ given array, cyclically shift (rotate) it by any offset and insert it back into\
  \ the same place.\n\nTechnically, each cyclic shift consists of two consecutive\
  \ actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264\
  \ n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026\
  \ r] with it's cyclic shift to the left by an arbitrary offset d. The concept of\
  \ a cyclic shift can be also explained by following relations: the sequence [1,\
  \ 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset\
  \ 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1]\
  \ to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3,\
  \ 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4]\
  \ = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and\
  \ you get a segment [8, 3, 2] which then takes the place of of the original elements\
  \ of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort\
  \ the given array a using no more than n cyclic shifts of any of its segments. Note\
  \ that you don't need to minimize the number of cyclic shifts. Any method that requires\
  \ n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains\
  \ an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe\
  \ next 2t lines contain the descriptions of the test cases. \n\nThe first line of\
  \ each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014\
  \ the length of the array. The second line consists of space-separated elements\
  \ of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat\
  \ and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases.\
  \ \n\nThe first line of the answer of each test case should contain an integer k\
  \ (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next\
  \ k lines should contain descriptions of the actions formatted as \"l r d\" (without\
  \ quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment\
  \ being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember\
  \ that only the cyclic shifts to the left are considered so the chosen segment will\
  \ be shifted by the offset d to the to the left.\n\nNote that you are not required\
  \ to find the minimum number of cyclic shifts needed for sorting. Any sorting method\
  \ where the number of shifts does not exceed n will be accepted.\n\nIf the given\
  \ array a is already sorted, one of the possible answers is k = 0 and an empty sequence\
  \ of cyclic shifts.\n\nIf there are several possible answers, you may print any\
  \ of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4\
  \ 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n\
  1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n\
  \  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2,\
  \ \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n\
  \  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3:\
  \ [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}]\
  \ \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the\
  \ left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1},\
  \ 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted\
  \ to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1,\
  \ 2, 3}, 4, 5] \nA:"
question: "The new generation external memory contains an array of integers a[1 \u2026\
  \ n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing\
  \ the value of an arbitrary element. Instead, it allows you to cut out any segment\
  \ of the given array, cyclically shift (rotate) it by any offset and insert it back\
  \ into the same place.\n\nTechnically, each cyclic shift consists of two consecutive\
  \ actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264\
  \ n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026\
  \ r] with it's cyclic shift to the left by an arbitrary offset d. The concept of\
  \ a cyclic shift can be also explained by following relations: the sequence [1,\
  \ 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset\
  \ 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1]\
  \ to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3,\
  \ 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4]\
  \ = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and\
  \ you get a segment [8, 3, 2] which then takes the place of of the original elements\
  \ of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort\
  \ the given array a using no more than n cyclic shifts of any of its segments. Note\
  \ that you don't need to minimize the number of cyclic shifts. Any method that requires\
  \ n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains\
  \ an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe\
  \ next 2t lines contain the descriptions of the test cases. \n\nThe first line of\
  \ each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014\
  \ the length of the array. The second line consists of space-separated elements\
  \ of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat\
  \ and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases.\
  \ \n\nThe first line of the answer of each test case should contain an integer k\
  \ (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next\
  \ k lines should contain descriptions of the actions formatted as \"l r d\" (without\
  \ quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment\
  \ being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember\
  \ that only the cyclic shifts to the left are considered so the chosen segment will\
  \ be shifted by the offset d to the to the left.\n\nNote that you are not required\
  \ to find the minimum number of cyclic shifts needed for sorting. Any sorting method\
  \ where the number of shifts does not exceed n will be accepted.\n\nIf the given\
  \ array a is already sorted, one of the possible answers is k = 0 and an empty sequence\
  \ of cyclic shifts.\n\nIf there are several possible answers, you may print any\
  \ of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4\
  \ 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n\
  1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n\
  \  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2,\
  \ \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n\
  \  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3:\
  \ [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}]\
  \ \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the\
  \ left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1},\
  \ 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted\
  \ to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1,\
  \ 2, 3}, 4, 5] "
samples:
- " ```import sys\nt=int(sys.stdin.readline())\nfor _ in range(t):\n    n=int(sys.stdin.readline())\n\
  \    a=list(map(int,sys.stdin.readline().split()))\n    k=0\n    while True:\n \
  \       f=0\n        for i in range(n):\n            for j in range(i+1,n):\n  \
  \              if a[i]>a[j]:\n                    a[i],a[j]=a[j],a[i]\n        \
  \            k+=1\n                    f=1\n                    break\n        \
  \    if f:\n                break\n        if not f:\n            break\nprint(k)\n\
  for _ in range(k):\n    l,r,d=map(int,sys.stdin.readline().split())\n    print(l,r,d)```\
  \ A: ```import sys\nt=int(sys.stdin.readline())\nfor _ in range(t):\n    n=int(sys.stdin.readline())\n\
  \    a=list(map(int,sys.stdin.readline().split()))\n    k=0\n    while True:\n \
  \       f=0\n        for i in range(n):\n            for j in range(i+1,n):\n  \
  \              if a[i]>a[j]:\n                    a[i],a[j]=a[j],a[i]\n        \
  \            k+=1\n                    f=1\n                    break\n        \
  \    if f:\n                break\n        if not f:\n            break\n    print(k)\n\
  \    for i in range(k):\n        print(*map(int,sys.stdin.readline().split()),sep='\
  \ ')``` A: ```import sys\nt=int(sys.stdin.readline())\nfor _ in range(t):\n    n=int(sys.stdin.readline())\n\
  \    a=list(map(int,sys.stdin.readline().split()))\n    k=0\n    while True:\n \
  \       f=0\n        for i in range(n):\n            for j in range(i+1,n):\n  \
  \              if a[i]>a[j]:\n                    a[i],a[j]=a[j],a[i]\n        \
  \            k+=1\n                    f=1\n                    break\n        \
  \    if f:\n                break\n        if not f:\n            break\n    print(k)\n\
  \    for i in range(k):\n        l,r,d=map(int,sys.stdin.readline().split())\n \
  \       print(l,r,d)``` A: ```import sys\nt=int(sys.stdin.readline())\nfor _ in\
  \ range(t):\n    n=int(sys.stdin.readline())\n    a=list(map(int,sys.stdin.readline().split()))\n\
  \    k=0\n    while True:\n        f=0\n        for i in range(n):\n           \
  \ for j in range(i+1,n):\n                if a[i]>a[j]:\n                    a[i],a[j]=a[j],a[i]\n\
  \                    k+=1\n                    f=1\n                    break\n\
  \            if f:\n                break\n        if not f:\n            break\n\
  \    print(k)\n    for i in range(k):\n        l,r,d=map(int,sys.stdin.readline().split())\n\
  \        print(l,r,d)```\nQ:"
- " ```t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n\
  \    k=0\n    while a!=sorted(a):\n        for i in range(1,n):\n            for\
  \ j in range(i+1,n):\n                for d in range(1,j-i+1):\n               \
  \     b=a[i:j]\n                    b=b[-d:]+b[:-d]\n                    a[i:j]=b\n\
  \                    k+=1\n                    if a==sorted(a):\n              \
  \          break\n                if a==sorted(a):\n                    break\n\
  \            if a==sorted(a):\n                break\n    print(k)\n    for i in\
  \ range(k):\n        l=0\n        r=0\n        d=0\n        for j in range(1,n):\n\
  \            if a[j-1]>a[j]:\n                l=j\n                break\n     \
  \   for j in range(l+1,n):\n            if a[j-1]>a[j]:\n                r=j\n \
  \               break\n        for d in range(1,r-l):\n            if a[r-d-1]>a[r-d]:\n\
  \                break\n        print(l,r,d)```\nQ:"
test_cases:
  input:
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 0 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 4 1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 1 1

    4

    2 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 1 4 6

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    1 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 1 4

    5

    2 5 1 4 6

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    0 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    1 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 1 1

    4

    1 4 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 1

    3

    1 1 1

    4

    2 4 -1 5

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    2 4 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 1

    3

    2 4 0

    4

    0 6 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 0 5

    5

    2 10 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    0 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 0 5

    5

    2 10 2 4 3

    '
  - '4

    2

    2 2

    3

    1 1 1

    4

    2 4 -1 5

    5

    2 6 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    -1 0 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    1 1

    3

    1 2 1

    4

    1 4 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    1 2 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 4 0

    4

    0 6 1 3

    5

    2 5 1 0 3

    '
  - '4

    2

    2 1

    3

    2 4 0

    4

    0 6 1 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 0

    3

    2 3 0

    4

    0 6 1 3

    5

    2 3 1 4 3

    '
  - '4

    2

    1 2

    3

    1 2 1

    4

    1 4 1 3

    5

    2 5 1 6 3

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    2 4 0 5

    5

    2 10 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    0 4 1 3

    5

    2 0 1 4 3

    '
  - '4

    2

    2 1

    3

    0 2 0

    4

    -1 6 1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 9 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 6 0 5

    5

    2 10 2 4 3

    '
  - '4

    2

    1 1

    3

    1 2 1

    4

    1 4 0 3

    5

    0 5 1 4 0

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    0 4 -1 4

    5

    2 5 2 4 3

    '
  - '4

    2

    2 0

    3

    1 2 0

    4

    2 3 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    2 4 0 5

    5

    2 3 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    4 8 -1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 3 1

    4

    2 13 -1 3

    5

    0 0 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 1 1

    4

    2 13 -1 3

    5

    0 0 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    0 4 -1 3

    5

    2 0 -1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    0 4 -1 3

    5

    2 0 -1 1 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 1 4

    5

    2 8 1 4 6

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 2 4 6

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    -1 2 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    0 2 0

    4

    -1 6 1 0

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    0 4 -1 4

    5

    2 5 1 8 3

    '
  - '4

    2

    2 1

    3

    1 4 0

    4

    0 2 1 3

    5

    2 5 1 0 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 6 1 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 0

    3

    4 3 0

    4

    0 6 1 3

    5

    2 3 1 4 3

    '
  - '4

    2

    2 2

    3

    0 0 0

    4

    -1 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    -1 0 0 3

    5

    2 5 1 8 3

    '
  - '4

    2

    3 0

    3

    2 4 0

    4

    0 15 1 0

    5

    1 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 4

    5

    0 5 1 4 11

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    2 1 0 5

    5

    2 3 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    2 8 -1 3

    5

    0 5 1 8 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    1 9 1 3

    5

    1 5 2 4 0

    '
  - '4

    2

    2 -1

    3

    1 1 1

    4

    4 8 -1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    1 4 -1 3

    5

    1 28 -1 4 5

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    0 2 -1 3

    5

    2 0 -1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 2

    4

    2 4 2 3

    5

    2 5 1 4 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 6 1 3

    5

    2 5 1 0 3

    '
  - '4

    2

    2 0

    3

    2 3 0

    4

    0 6 1 0

    5

    2 5 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    1 4 0 3

    5

    0 10 1 4 0

    '
  - '4

    2

    4 1

    3

    1 5 0

    4

    0 6 1 3

    5

    2 5 1 7 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    0 8 1 3

    5

    2 5 1 8 3

    '
  - '4

    2

    2 2

    3

    1 4 1

    4

    2 4 0 5

    5

    2 10 2 4 3

    '
  - '4

    2

    2 1

    3

    1 4 0

    4

    0 2 1 3

    5

    4 5 1 0 3

    '
  - '4

    2

    2 2

    3

    1 2 -1

    4

    2 4 -1 4

    5

    4 5 1 6 3

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    1 4 1 3

    5

    2 5 1 6 5

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    2 7 0 5

    5

    2 10 2 4 3

    '
  - '4

    2

    4 2

    3

    0 2 0

    4

    -1 2 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    1 7 0 3

    5

    2 0 1 4 3

    '
  - '4

    2

    0 1

    3

    0 4 0

    4

    0 9 0 3

    5

    1 6 2 4 3

    '
  - '4

    2

    2 1

    3

    1 2 2

    4

    2 4 2 3

    5

    2 5 1 4 0

    '
  - '4

    2

    1 2

    3

    1 1 1

    4

    2 4 0 3

    5

    2 5 1 4 3

    '
  - '4

    2

    1 1

    3

    1 2 0

    4

    0 0 1 3

    5

    2 5 0 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    0 8 1 3

    5

    4 5 1 8 3

    '
  - '4

    2

    0 1

    3

    1 4 0

    4

    0 2 1 3

    5

    4 5 1 0 3

    '
  - '4

    2

    2 2

    3

    1 2 -1

    4

    2 4 -1 4

    5

    1 5 1 6 3

    '
  - '4

    2

    2 1

    3

    0 4 -1

    4

    -1 6 1 3

    5

    0 5 1 8 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    2 1 -1 3

    5

    0 5 0 8 3

    '
  - '4

    2

    2 1

    3

    1 2 2

    4

    2 2 2 3

    5

    2 5 1 4 0

    '
  - '4

    2

    1 1

    3

    1 2 0

    4

    0 0 1 3

    5

    2 5 0 6 3

    '
  - '4

    2

    3 1

    3

    1 2 2

    4

    0 8 1 3

    5

    4 5 1 8 3

    '
  - '4

    2

    2 1

    3

    -2 2 0

    4

    3 8 1 6

    5

    2 5 1 6 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 4 1 3

    5

    2 0 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 0 3

    5

    2 5 1 5 0

    '
  - '4

    2

    2 0

    3

    1 2 0

    4

    2 4 1 3

    5

    2 5 1 4 6

    '
  - '4

    2

    3 0

    3

    1 2 1

    4

    2 4 -1 0

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 3 0

    4

    0 6 1 3

    5

    1 2 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 8 1 6

    5

    1 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    2 4 1 3

    5

    2 5 1 6 3

    '
  - '4

    2

    2 1

    3

    1 2 -1

    4

    2 4 1 3

    5

    2 5 1 8 3

    '
  - '4

    2

    2 1

    3

    0 4 0

    4

    0 6 1 3

    5

    2 5 1 0 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 9 1 3

    5

    1 2 1 4 3

    '
  - '4

    2

    0 1

    3

    2 1 0

    4

    0 9 1 3

    5

    1 5 2 4 3

    '
  - '4

    2

    3 0

    3

    1 2 0

    4

    2 3 1 3

    5

    2 9 2 4 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 9 0 3

    5

    1 8 2 4 1

    '
  - '4

    2

    2 -1

    3

    1 1 1

    4

    4 18 -1 3

    5

    0 0 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 1 2

    4

    2 18 -1 3

    5

    0 -1 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 0

    4

    1 4 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 2 8 6

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    2 4 0 3

    5

    2 5 1 4 6

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    0 4 -1 4

    5

    2 5 1 8 3

    '
  - '4

    2

    2 1

    3

    1 4 1

    4

    0 2 1 3

    5

    2 5 1 0 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    -1 0 -1 3

    5

    2 5 1 8 3

    '
  - '4

    2

    2 -1

    3

    2 1 3

    4

    1 18 -1 3

    5

    0 0 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 2

    4

    2 4 2 3

    5

    2 5 1 4 6

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    1 2 0 3

    5

    0 10 1 4 0

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 4 0 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    1 4 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 -1 3

    5

    2 5 0 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    1 4 0 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 1

    4

    1 4 2 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    1 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 4 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    2 4 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 3 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    2 4 0 3

    5

    2 10 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 3

    5

    2 5 1 4 6

    '
  - '4

    2

    2 2

    3

    1 3 0

    4

    1 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 0

    3

    1 2 1

    4

    2 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 0

    4

    0 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    1 4 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    1 2

    3

    1 2 1

    4

    1 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 -1 3

    5

    2 5 -1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    -1 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    0 2

    3

    1 2 0

    4

    1 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    4 1

    3

    1 4 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    0 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 3 0

    4

    0 6 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 4 1

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 8 1 6

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 1 1

    4

    2 4 -1 5

    5

    2 6 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 0

    4

    2 6 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    3 0

    3

    1 2 1

    4

    0 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    0 2 0

    4

    -1 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    0 2

    3

    1 2 0

    4

    1 4 -1 2

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 4 0

    4

    0 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    2 4 0

    4

    0 9 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    -1 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 3 1

    4

    0 6 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    3 0

    3

    0 2 1

    4

    0 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    -1 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    0 9 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    -1 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    0 15 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 4 1

    4

    2 4 0 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 -1

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    2 4 -1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 4

    3

    1 2 0

    4

    2 4 0 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 4

    5

    2 5 1 4 6

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    0 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 0

    4

    2 3 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 -1

    4

    2 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 1

    3

    1 2 1

    4

    1 7 0 3

    5

    2 5 1 4 0

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    1 4 -1 3

    5

    2 5 -1 4 3

    '
  - '4

    2

    1 2

    3

    1 2 0

    4

    1 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 4 0

    4

    0 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 0

    3

    2 3 0

    4

    0 6 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    2 8 1 6

    5

    2 5 1 4 3

    '
  - '4

    2

    0 2

    3

    1 2 -1

    4

    1 4 -1 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 -1

    3

    2 4 0

    4

    -1 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 4 0

    4

    -1 6 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    2 4 0

    4

    -1 0 0 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    0 2 0

    4

    -1 11 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 0

    3

    2 4 0

    4

    0 15 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    3 2

    3

    0 2 0

    4

    2 4 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    2 4 -1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    0 4

    3

    1 2 0

    4

    2 4 0 4

    5

    2 5 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    2 4 1 4

    5

    2 5 1 4 11

    '
  - '4

    2

    2 2

    3

    1 2 -1

    4

    2 4 -1 4

    5

    2 9 1 4 3

    '
  - '4

    2

    2 0

    3

    1 2 1

    4

    1 4 -1 3

    5

    2 9 -1 4 3

    '
  - '4

    2

    0 0

    3

    2 3 0

    4

    0 6 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    3 1

    3

    1 2 1

    4

    0 7 1 3

    5

    2 0 1 4 3

    '
  - '4

    2

    2 1

    3

    -1 2 0

    4

    -1 6 1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 9 1 3

    5

    1 5 2 4 3

    '
  - '4

    2

    2 -2

    3

    2 4 0

    4

    -1 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 0

    3

    2 4 -1

    4

    0 15 1 3

    5

    1 5 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    2 8 -1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    3 0

    3

    1 2 0

    4

    2 3 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    2 2

    3

    1 2 -1

    4

    2 4 -1 6

    5

    2 9 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    1 4 -1 3

    5

    2 9 -1 4 3

    '
  - '4

    2

    2 1

    3

    -1 2 0

    4

    -1 12 1 3

    5

    0 5 1 4 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    1 9 1 3

    5

    1 5 2 4 3

    '
  - '4

    2

    0 -2

    3

    2 4 0

    4

    -1 8 1 3

    5

    2 5 1 4 3

    '
  - '4

    2

    3 0

    3

    2 4 -1

    4

    0 15 1 3

    5

    1 5 1 4 2

    '
  - '4

    2

    3 0

    3

    1 2 0

    4

    2 3 1 3

    5

    2 9 1 4 3

    '
  - '4

    2

    2 -1

    3

    1 2 1

    4

    1 4 -1 3

    5

    2 14 -1 4 3

    '
  - '4

    2

    0 1

    3

    2 4 0

    4

    0 9 0 3

    5

    1 5 2 4 3

    '
  - '4

    2

    3 0

    3

    2 6 -1

    4

    0 15 1 3

    5

    1 5 1 4 2

    '
  output:
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 4 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    0

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    0

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    0

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '0

    1

    2 3 1

    1

    2 3 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 4 3

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    2

    1 3 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    2

    1 3 2

    3 5 2

    '
  - '0

    1

    2 3 1

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 2 1

    2 3 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    2 5 3

    3 4 1

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    1

    1 3 2

    2

    1 3 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    2 4 2

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    1

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    1 3 2

    3 4 1

    1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    2 3 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    2 3 1

    3 4 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    3

    1 3 2

    3 4 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    2 3 1

    3 4 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    2 3 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 4 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    2 3 1

    3

    1 4 3

    2 4 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    2

    1 3 2

    2 3 1

    2

    2 3 1

    3 4 1

    2

    1 3 2

    4 5 1

    '
  - '0

    0

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    0

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 4 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    2 3 1

    2

    1 3 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    2 3 1

    3 5 2

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 5 4

    3 4 1

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    1 3 2

    2 4 2

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 4 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    3

    1 3 2

    2 3 1

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 4 3

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 4 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    2 5 3

    3 4 1

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    2

    1 3 2

    3 5 2

    '
  - '0

    1

    2 3 1

    1

    1 3 2

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    2 3 1

    3

    1 4 3

    2 4 2

    3 5 2

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    2

    1 3 2

    2 5 3

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    2

    1 3 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    2 3 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 2 1

    2 3 1

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    2 3 1

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '0

    0

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    0

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    2

    1 3 2

    2 5 3

    '
  - '0

    1

    1 3 2

    1

    2 3 1

    3

    1 4 3

    2 4 2

    3 5 2

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    2

    2 3 1

    3 5 2

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    2

    2 3 1

    3 5 2

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    2 3 1

    2

    2 3 1

    3 5 2

    '
  - '1

    1 2 1

    0

    0

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '0

    1

    1 3 2

    0

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    0

    2

    2 3 1

    3 4 1

    2

    1 3 2

    2 5 3

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 5 2

    '
  - '0

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 2 1

    2 3 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    1 5 4

    2 4 2

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 4 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    2 4 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    2

    2 3 1

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 4 3

    2 4 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    2

    2 3 1

    4 5 1

    '
  - '0

    2

    1 3 2

    2 3 1

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    1 3 2

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 5 3

    3 4 1

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    1 3 2

    2 4 2

    1

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    1 3 2

    3 4 1

    2

    1 2 1

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    2 3 1

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 4 1

    '
  - '0

    1

    2 3 1

    1

    1 3 2

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    2 3 1

    3

    1 4 3

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    2 3 1

    2

    1 3 2

    3 5 2

    '
  - '1

    1 2 1

    1

    1 2 1

    2

    1 3 2

    3 4 1

    1

    4 5 1

    '
  - '1

    1 2 1

    0

    2

    2 3 1

    3 4 1

    2

    1 3 2

    3 4 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    3

    2 5 3

    3 4 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    2

    1 3 2

    3 4 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    0

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 5 4

    2 4 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    0

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    1

    1 3 2

    2

    1 3 2

    3 4 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    1 2 1

    2 3 1

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    1

    1 3 2

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    2 3 1

    2

    1 3 2

    3 4 1

    3

    1 3 2

    3 5 2

    4 5 1

    '
  - '0

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
  - '1

    1 2 1

    1

    1 3 2

    2

    2 3 1

    3 4 1

    3

    2 3 1

    3 5 2

    4 5 1

    '
timeout: 2.0
