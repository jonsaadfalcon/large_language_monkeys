prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nThe Free Meteor\
  \ Association (FMA) has got a problem: as meteors are moving, the Universal Cosmic\
  \ Descriptive Humorous Program (UCDHP) needs to add a special module that would\
  \ analyze this movement. \n\nUCDHP stores some secret information about meteors\
  \ as an n \xD7 m table with integers in its cells. The order of meteors in the Universe\
  \ is changing. That's why the main UCDHP module receives the following queries:\n\
  \n  * The query to swap two table rows; \n  * The query to swap two table columns;\
  \ \n  * The query to obtain a secret number in a particular table cell. \n\n\n\n\
  As the main UCDHP module is critical, writing the functional of working with the\
  \ table has been commissioned to you.\n\nInput\n\nThe first line contains three\
  \ space-separated integers n, m and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264\
  \ 500000) \u2014 the number of table columns and rows and the number of queries,\
  \ correspondingly.\n\nNext n lines contain m space-separated numbers each \u2014\
  \ the initial state of the table. Each number p in the table is an integer and satisfies\
  \ the inequality 0 \u2264 p \u2264 106.\n\nNext k lines contain queries in the format\
  \ \"si xi yi\", where si is one of the characters \"\u0441\", \"r\" or \"g\", and\
  \ xi, yi are two integers.\n\n  * If si = \"c\", then the current query is the query\
  \ to swap columns with indexes xi and yi (1 \u2264 x, y \u2264 m, x \u2260 y); \n\
  \  * If si = \"r\", then the current query is the query to swap rows with indexes\
  \ xi and yi (1 \u2264 x, y \u2264 n, x \u2260 y); \n  * If si = \"g\", then the\
  \ current query is the query to obtain the number that located in the xi-th row\
  \ and in the yi-th column (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m). \n\n\n\nThe\
  \ table rows are considered to be indexed from top to bottom from 1 to n, and the\
  \ table columns \u2014 from left to right from 1 to m.\n\nOutput\n\nFor each query\
  \ to obtain a number (si = \"g\") print the required number. Print the answers to\
  \ the queries in the order of the queries in the input.\n\nExamples\n\nInput\n\n\
  3 3 5\n1 2 3\n4 5 6\n7 8 9\ng 3 2\nr 3 2\nc 2 3\ng 2 2\ng 3 2\n\n\nOutput\n\n8\n\
  9\n6\n\n\nInput\n\n2 3 3\n1 2 4\n3 1 5\nc 2 1\nr 1 2\ng 1 3\n\n\nOutput\n\n5\n\n\
  Note\n\nLet's see how the table changes in the second test case.\n\nAfter the first\
  \ operation is fulfilled, the table looks like that:\n\n2 1 4\n\n1 3 5\n\nAfter\
  \ the second operation is fulfilled, the table looks like that:\n\n1 3 5\n\n2 1\
  \ 4\n\nSo the answer to the third query (the number located in the first row and\
  \ in the third column) will be 5.\nA: ```import os\nimport sys\nfrom io import BytesIO,\
  \ IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def\
  \ __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer =\
  \ BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n\
  \        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n\
  \        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\n\n#n=int(input())\n#arr = list(map(int, input().split()))\n\nn,m,k=\
  \ map(int, input().split())\ng=[]\nfor i in range(n):\n    l=list(map(int, input().split()))\n\
  \    g.append(l)\n\nr=[i for i in range(1001)]\ncc=[i for i in range(1001)]\nfor\
  \ i in range(k):\n    ch,x,y=input().split()\n    x=int(x)\n    y=int(y)\n    if\
  \ ch==\"g\":\n        #v1=x if r[x]==0 else r[x]\n        v1=r[x]\n        v2=cc[y]\n\
  \n        #v2=y if cc[y]==0 else cc[y]\n        print(g[v1-1][v2-1])\n    elif ch==\"\
  c\":\n        temp=cc[x]\n        cc[x]=cc[y]\n        cc[y]=temp\n    else:\n \
  \       temp=r[x]\n        r[x]=r[y]\n        r[y]=temp```\nQ: Write python code\
  \ to solve the following coding problem that obeys the constraints and passes the\
  \ example test cases. The output code needs to read from and write to standard IO.\
  \ Please wrap your code answer using ```:\nWrite a program which reads relations\
  \ in a SNS (Social Network Service), and judges that given pairs of users are reachable\
  \ each other through the network.\n\nConstraints\n\n* $2 \\leq n \\leq 100,000$\n\
  * $0 \\leq m \\leq 100,000$\n* $1 \\leq q \\leq 10,000$\n\nInput\n\nIn the first\
  \ line, two integer $n$ and $m$ are given. $n$ is the number of users in the SNS\
  \ and $m$ is the number of relations in the SNS. The users in the SNS are identified\
  \ by IDs $0, 1, ..., n-1$.\n\nIn the following $m$ lines, the relations are given.\
  \ Each relation is given by two integers $s$ and $t$ that represents $s$ and $t$\
  \ are friends (and reachable each other).\n\nIn the next line, the number of queries\
  \ $q$ is given. In the following $q$ lines, $q$ queries are given respectively.\
  \ Each query consists of two integers $s$ and $t$ separated by a space character.\n\
  \nOutput\n\nFor each query, print \"yes\" if $t$ is reachable from $s$ through the\
  \ social network, \"no\" otherwise.\n\nExample\n\nInput\n\n10 9\n0 1\n0 2\n3 4\n\
  5 7\n5 6\n6 7\n6 8\n7 8\n8 9\n3\n0 1\n5 9\n1 3\n\n\nOutput\n\nyes\nyes\nno\nA: ```#\
  \ -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10**6)\n\n\nclass LinkedList:\n\
  \    def __init__(self, n):\n        self.n = n\n        self.ll = [[] for _ in\
  \ range(self.n)]\n\n    def link(self, u, v, direction=False):\n        self.ll[u].append(v)\n\
  \        if not direction:\n            self.ll[v].append(u)\n\n    def dfs(self):\n\
  \        self.cc = [None] * self.n\n\n        color = 1\n        for u in range(self.n):\n\
  \            if not self.cc[u]:\n                self.dfs_visit(u, color)\n    \
  \            color += 1\n\n    def dfs_visit(self, u, color):\n        self.cc[u]\
  \ = color\n        for v in self.ll[u]:\n            if not self.cc[v]:\n      \
  \          self.dfs_visit(v, color)\n\n    def check(self, u, v):\n        if self.cc[u]\
  \ == self.cc[v]:\n            print('yes')\n        else:\n            print('no')\n\
  \n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    ll = LinkedList(n)\n\
  \n    for _ in range(m):\n        u, v = map(int, input().split())\n        ll.link(u,\
  \ v)\n    ll.dfs()\n\n    q = int(input())\n    for _ in range(q):\n        u, v\
  \ = map(int, input().split())\n        ll.check(u, v)```\nQ: Write python code to\
  \ solve the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nPetya has an array of integers a_1, a_2, \u2026\
  , a_n. He only likes sorted arrays. Unfortunately, the given array could be arbitrary,\
  \ so Petya wants to sort it.\n\nPetya likes to challenge himself, so he wants to\
  \ sort array using only 3-cycles. More formally, in one operation he can pick 3\
  \ pairwise distinct indices i, j, and k (1 \u2264 i, j, k \u2264 n) and apply i\
  \ \u2192 j \u2192 k \u2192 i cycle to the array a. It simultaneously places a_i\
  \ on position j, a_j on position k, and a_k on position i, without changing any\
  \ other element.\n\nFor example, if a is [10, 50, 20, 30, 40, 60] and he chooses\
  \ i = 2, j = 1, k = 5, then the array becomes [\\underline{50}, \\underline{40},\
  \ 20, 30, \\underline{10}, 60].\n\nPetya can apply arbitrary number of 3-cycles\
  \ (possibly, zero). You are to determine if Petya can sort his array a, i. e. make\
  \ it non-decreasing.\n\nInput\n\nEach test contains multiple test cases. The first\
  \ line contains the number of test cases t (1 \u2264 t \u2264 5 \u22C5 10^5). Description\
  \ of the test cases follows.\n\nThe first line of each test case contains a single\
  \ integer n (1 \u2264 n \u2264 5 \u22C5 10^5) \u2014 the length of the array a.\n\
  \nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1\
  \ \u2264 a_i \u2264 n).\n\nIt is guaranteed that the sum of n over all test cases\
  \ does not exceed 5 \u22C5 10^5.\n\nOutput\n\nFor each test case, print \"YES\"\
  \ (without quotes) if Petya can sort the array a using 3-cycles, and \"NO\" (without\
  \ quotes) otherwise. You can print each letter in any case (upper or lower).\n\n\
  Example\n\nInput\n\n\n7\n1\n1\n2\n2 2\n2\n2 1\n3\n1 2 3\n3\n2 1 3\n3\n3 1 2\n4\n\
  2 1 4 3\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n\nNote\n\nIn the 6-th\
  \ test case Petya can use the 3-cycle 1 \u2192 3 \u2192 2 \u2192 1 to sort the array.\n\
  \nIn the 7-th test case Petya can apply 1 \u2192 3 \u2192 2 \u2192 1 and make a\
  \ = [1, 4, 2, 3]. Then he can apply 2 \u2192 4 \u2192 3 \u2192 2 and finally sort\
  \ the array.\nA:"
question: "Petya has an array of integers a_1, a_2, \u2026, a_n. He only likes sorted\
  \ arrays. Unfortunately, the given array could be arbitrary, so Petya wants to sort\
  \ it.\n\nPetya likes to challenge himself, so he wants to sort array using only\
  \ 3-cycles. More formally, in one operation he can pick 3 pairwise distinct indices\
  \ i, j, and k (1 \u2264 i, j, k \u2264 n) and apply i \u2192 j \u2192 k \u2192 i\
  \ cycle to the array a. It simultaneously places a_i on position j, a_j on position\
  \ k, and a_k on position i, without changing any other element.\n\nFor example,\
  \ if a is [10, 50, 20, 30, 40, 60] and he chooses i = 2, j = 1, k = 5, then the\
  \ array becomes [\\underline{50}, \\underline{40}, 20, 30, \\underline{10}, 60].\n\
  \nPetya can apply arbitrary number of 3-cycles (possibly, zero). You are to determine\
  \ if Petya can sort his array a, i. e. make it non-decreasing.\n\nInput\n\nEach\
  \ test contains multiple test cases. The first line contains the number of test\
  \ cases t (1 \u2264 t \u2264 5 \u22C5 10^5). Description of the test cases follows.\n\
  \nThe first line of each test case contains a single integer n (1 \u2264 n \u2264\
  \ 5 \u22C5 10^5) \u2014 the length of the array a.\n\nThe second line of each test\
  \ case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 n).\n\nIt\
  \ is guaranteed that the sum of n over all test cases does not exceed 5 \u22C5 10^5.\n\
  \nOutput\n\nFor each test case, print \"YES\" (without quotes) if Petya can sort\
  \ the array a using 3-cycles, and \"NO\" (without quotes) otherwise. You can print\
  \ each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n7\n1\n1\n2\n\
  2 2\n2\n2 1\n3\n1 2 3\n3\n2 1 3\n3\n3 1 2\n4\n2 1 4 3\n\n\nOutput\n\n\nYES\nYES\n\
  NO\nYES\nNO\nYES\nYES\n\nNote\n\nIn the 6-th test case Petya can use the 3-cycle\
  \ 1 \u2192 3 \u2192 2 \u2192 1 to sort the array.\n\nIn the 7-th test case Petya\
  \ can apply 1 \u2192 3 \u2192 2 \u2192 1 and make a = [1, 4, 2, 3]. Then he can\
  \ apply 2 \u2192 4 \u2192 3 \u2192 2 and finally sort the array."
samples:
- " ```# -*- coding: utf-8 -*-\nimport sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\
  \nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\
  \n    if a == sorted(a):\n        print(\"YES\")\n    else:\n        for i in range(n):\n\
  \            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n\
  \                    if a[i] > a[j] and a[j] > a[k] and a[i] > a[k]:\n         \
  \               a[i], a[j], a[k] = a[j], a[k], a[i]\n        if a == sorted(a):\n\
  \            print(\"YES\")\n        else:\n            print(\"NO\")``` Q:"
- " ```# -*- coding: utf-8 -*-\nimport sys\nfrom collections import defaultdict\n\n\
  def is_sorted(a):\n    return all(a[i] <= a[i+1] for i in range(len(a)-1))\n\ndef\
  \ can_sort(a):\n    n = len(a)\n    if is_sorted(a):\n        return 'YES'\n   \
  \ for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1,\
  \ n):\n                b = a[:]\n                b[i], b[j], b[k] = b[j], b[k],\
  \ b[i]\n                if is_sorted(b):\n                    return 'YES'\n   \
  \ return 'NO'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n  \
  \  a = list(map(int, input().split()))\n    print(can_sort(a))``` Q:"
test_cases:
  input:
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 2 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 2 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    1 2 3

    3

    1 1 1

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 2

    3

    2 1 3

    3

    1 1 2

    4

    2 1 2 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 2 3

    3

    1 1 1

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 1 3

    3

    1 1 3

    3

    3 2 1

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 2

    3

    2 1 2

    3

    1 1 2

    4

    1 2 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    1 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 3 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 3 2

    3

    2 1 2

    3

    1 1 2

    4

    1 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 1 3

    3

    1 1 3

    3

    3 2 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    3 1 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 1 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 2 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 1

    3

    3 1 1

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 2

    4

    3 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 1 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 1 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    2 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 3

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 2

    4

    3 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 2 3

    3

    3 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    1 1 1

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    3 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 2 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 1

    4

    4 1 4 1

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 2

    4

    3 2 3 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    1 1 3

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 4

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    1 1 2

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    2 2 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 2 2

    3

    2 2 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    2 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    3 1 1

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 1

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    1 1 3

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 2 3

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 1

    3

    2 1 1

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 1

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 4

    3

    2 1 3

    3

    3 1 1

    4

    4 1 4 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 3 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 4

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    1 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    1 1 3

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 1

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    2 2 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 1

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    1 1 3

    3

    3 1 2

    4

    2 4 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 2

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 1 2

    4

    4 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    3 1 2

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 2 1

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 2

    3

    2 1 3

    3

    3 1 2

    4

    4 1 2 1

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 2 3

    3

    1 1 4

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 1

    3

    1 1 2

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    1 1 2

    3

    3 2 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    1 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    2 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    1 1 3

    3

    1 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 2 3

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    1 2

    2

    1 1

    3

    1 3 3

    3

    2 1 1

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 1

    3

    2 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    2 2 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    2 1 3

    3

    3 1 2

    4

    2 4 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 2

    3

    3 2 1

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    3 2 3

    3

    1 1 4

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    3 2 3

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    2 1 3

    3

    3 1 2

    4

    4 4 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    3 2 3

    3

    1 1 4

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 2

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    1 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 2 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 1

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 1

    3

    2 1 3

    3

    3 1 2

    4

    3 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 2 3

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 1 3

    4

    3 2 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    3 3 4

    3

    2 1 3

    3

    3 1 2

    4

    3 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 2 1

    3

    3 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    1 1 2

    4

    4 1 2 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 2

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 4

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 3 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    2 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 1 3

    3

    2 2 3

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    1 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 2 2

    3

    3 1 1

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    1 1

    2

    1 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    2 2 3

    3

    2 1 1

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    1 1 3

    3

    3 1 1

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 2 1

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 2 2

    4

    4 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    1 2 2

    3

    3 2 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    2 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 2 3

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    1 3 3

    3

    2 2 2

    3

    3 1 1

    4

    2 2 1 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    3 1 3

    3

    2 1 3

    3

    3 1 2

    4

    2 4 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 2

    3

    3 2 1

    4

    2 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    2 1 3

    3

    3 2 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 2 1

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 2 5

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 2

    3

    1 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    1 1 1

    4

    1 1 2 4

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    2 2 3

    3

    2 1 1

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 1 3

    3

    2 2 3

    3

    3 1 2

    4

    4 2 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    1 1

    2

    1 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    1 1 3

    3

    3 2 1

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    1 2 2

    3

    3 2 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    1 3 3

    3

    2 2 2

    3

    3 1 1

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 2 1

    3

    3 1 1

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    2 3 3

    3

    2 1 2

    3

    1 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    1 1 1

    4

    1 1 2 4

    '
  - '7

    1

    1

    2

    1 1

    2

    1 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 4

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    3 1 3

    3

    3 1 2

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    2 3 3

    3

    2 1 2

    3

    1 2 1

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    3 1 3

    3

    3 1 2

    4

    4 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 3 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 3 3

    3

    2 1 3

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 2

    4

    4 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    3 1 1

    4

    3 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 1 4 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    2 2 2

    3

    2 2 1

    4

    4 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 2 3

    3

    3 1 2

    4

    4 2 4 5

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 1

    3

    2 1 1

    3

    3 1 2

    4

    3 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 3 3

    3

    2 1 3

    3

    1 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    1 3 3

    3

    3 1 2

    3

    3 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    2 3 3

    3

    2 2 3

    3

    1 1 4

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    1 2

    2

    1 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 3 3

    3

    2 1 3

    3

    3 1 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 2 3

    3

    2 1 1

    3

    2 1 1

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 2

    3

    2 1 3

    3

    1 1 1

    4

    2 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    2 1 3

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 1

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    1 3 3

    3

    2 1 3

    3

    3 2 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    3 2 2

    4

    2 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 2 3

    3

    2 1 3

    3

    3 1 2

    4

    4 2 4 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 2

    3

    2 3 3

    3

    2 2 3

    3

    3 2 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    1 1 1

    4

    4 1 2 1

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 2

    3

    2 1 2

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 3 3

    3

    2 1 3

    3

    1 1 2

    4

    1 1 2 4

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 3

    3

    2 1 1

    3

    3 1 2

    4

    1 1 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    2 2 3

    3

    2 1 1

    3

    3 1 2

    4

    4 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    2 1 3

    3

    3 3 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 3 3

    3

    1 2 2

    3

    3 2 1

    4

    4 1 4 2

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 2 3

    3

    3 1 2

    4

    4 1 4 4

    '
  - '7

    1

    1

    2

    2 2

    2

    1 1

    3

    1 3 3

    3

    2 3 2

    3

    3 1 1

    4

    2 2 1 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    3 1 3

    3

    2 1 3

    3

    2 2 2

    4

    2 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    1 2 1

    3

    2 2 1

    3

    3 1 2

    4

    2 2 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 1 3

    3

    2 1 3

    3

    1 1 1

    4

    1 1 2 4

    '
  - '7

    1

    1

    2

    1 2

    2

    2 1

    3

    3 2 3

    3

    2 1 1

    3

    3 1 2

    4

    4 1 4 5

    '
  - '7

    1

    1

    2

    1 1

    2

    1 1

    3

    1 3 3

    3

    1 1 3

    3

    1 1 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 3 3

    3

    1 2 2

    3

    3 2 1

    4

    4 1 3 3

    '
  - '7

    1

    1

    2

    2 1

    2

    2 1

    3

    1 3 3

    3

    2 1 2

    3

    1 2 2

    4

    1 1 4 3

    '
  - '7

    1

    1

    2

    2 2

    2

    2 1

    3

    2 2 3

    3

    2 1 3

    3

    1 1 1

    4

    1 2 2 4

    '
  output:
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    NO

    NO

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    NO

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    NO

    '
  - 'YES

    NO

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    NO

    '
  - 'YES

    YES

    YES

    NO

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    NO

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    NO

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    NO

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    YES

    NO

    YES

    '
  - 'YES

    NO

    NO

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    YES

    '
timeout: 2.0
