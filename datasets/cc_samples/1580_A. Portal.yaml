prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nDraw a frame\
  \ which has a height of H cm and a width of W cm. For example, the following figure\
  \ shows a frame which has a height of 6 cm and a width of 10 cm.\n\n\n\n........#\n\
  ........#\n........#\n........#\n\n\n\nConstraints\n\n* 3 \u2264 H \u2264 300\n\
  * 3 \u2264 W \u2264 300\n\nInput\n\nThe input consists of multiple datasets. Each\
  \ dataset consists of two integers H and W separated by a single space.\n\nThe input\
  \ ends with two 0 (when both H and W are zero).\n\nOutput\n\nFor each dataset, print\
  \ the frame made of '#' and '.'.\n\nPrint a blank line after each dataset.\n\nExample\n\
  \nInput\n\n3 4\n5 6\n3 3\n0 0\n\n\nOutput\n\n####\n#..#\n####\n\n######\n#....#\n\
  #....#\n#....#\n######\n\n###\n#.#\n###\nA: ```while True:\n    h, w = [int(i) for\
  \ i in input().split()]\n    if w == h == 0:\n        break\n    print(\"#\" * w,\
  \ end=\"\")\n    print((\"\\n#\" + \".\" * (w - 2) + \"#\") * (h - 2))\n    print(\"\
  #\" * w, end=\"\\n\\n\")```\nQ: Write python code to solve the following coding\
  \ problem that obeys the constraints and passes the example test cases. The output\
  \ code needs to read from and write to standard IO. Please wrap your code answer\
  \ using ```:\nPavel cooks barbecue. There are n skewers, they lay on a brazier in\
  \ a row, each on one of n positions. Pavel wants each skewer to be cooked some time\
  \ in every of n positions in two directions: in the one it was directed originally\
  \ and in the reversed direction.\n\nPavel has a plan: a permutation p and a sequence\
  \ b1, b2, ..., bn, consisting of zeros and ones. Each second Pavel move skewer on\
  \ position i to position pi, and if bi equals 1 then he reverses it. So he hope\
  \ that every skewer will visit every position in both directions.\n\nUnfortunately,\
  \ not every pair of permutation p and sequence b suits Pavel. What is the minimum\
  \ total number of elements in the given permutation p and the given sequence b he\
  \ needs to change so that every skewer will visit each of 2n placements? Note that\
  \ after changing the permutation should remain a permutation as well.\n\nThere is\
  \ no problem for Pavel, if some skewer visits some of the placements several times\
  \ before he ends to cook. In other words, a permutation p and a sequence b suit\
  \ him if there is an integer k (k \u2265 2n), so that after k seconds each skewer\
  \ visits each of the 2n placements.\n\nIt can be shown that some suitable pair of\
  \ permutation p and sequence b exists for any n.\n\nInput\n\nThe first line contain\
  \ the integer n (1 \u2264 n \u2264 2\xB7105) \u2014 the number of skewers.\n\nThe\
  \ second line contains a sequence of integers p1, p2, ..., pn (1 \u2264 pi \u2264\
  \ n) \u2014 the permutation, according to which Pavel wants to move the skewers.\n\
  \nThe third line contains a sequence b1, b2, ..., bn consisting of zeros and ones,\
  \ according to which Pavel wants to reverse the skewers.\n\nOutput\n\nPrint single\
  \ integer \u2014 the minimum total number of elements in the given permutation p\
  \ and the given sequence b he needs to change so that every skewer will visit each\
  \ of 2n placements.\n\nExamples\n\nInput\n\n4\n4 3 2 1\n0 1 1 1\n\n\nOutput\n\n\
  2\n\n\nInput\n\n3\n2 3 1\n0 0 0\n\n\nOutput\n\n1\n\nNote\n\nIn the first example\
  \ Pavel can change the permutation to 4, 3, 1, 2.\n\nIn the second example Pavel\
  \ can change any element of b to 1.\nA: ```n = int(input())\np = list(map(int, input().split()))\n\
  b = list(map(int, input().split()))\ns = sum(b[i] for i in range(n))\nif s % 2 ==\
  \ 0:\n    ans = 1\nelse:\n    ans = 0\nvisited = [0] * n\nptr = 0\nstart = 1\nvisited[0]\
  \ = 1\nq = 1\nc = 1\nwhile q < n:\n    start = p[start - 1]\n    if visited[start\
  \ - 1] == 1:\n        c += 1\n        while ptr < n and visited[ptr] == 1:\n   \
  \         ptr += 1\n        start = ptr + 1\n    else:\n        visited[start -\
  \ 1] = 1\n        q += 1\nif c == 1:\n    print(ans)\nelse:\n    print(ans + c)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nCQXYM found a rectangle\
  \ A of size n \xD7 m. There are n rows and m columns of blocks. Each block of the\
  \ rectangle is an obsidian block or empty. CQXYM can change an obsidian block to\
  \ an empty block or an empty block to an obsidian block in one operation.\n\nA rectangle\
  \ M size of a \xD7 b is called a portal if and only if it satisfies the following\
  \ conditions:\n\n  * a \u2265 5,b \u2265 4. \n  * For all 1 < x < a, blocks M_{x,1}\
  \ and M_{x,b} are obsidian blocks. \n  * For all 1 < x < b, blocks M_{1,x} and M_{a,x}\
  \ are obsidian blocks. \n  * For all 1<x<a,1<y<b, block M_{x,y} is an empty block.\
  \ \n  * M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b} can be any type. \n\nNote that the\
  \ there must be a rows and b columns, not b rows and a columns.\n\nNote that corners\
  \ can be any type\n\nCQXYM wants to know the minimum number of operations he needs\
  \ to make at least one sub-rectangle a portal.\n\nInput\n\nThe first line contains\
  \ an integer t (t \u2265 1), which is the number of test cases.\n\nFor each test\
  \ case, the first line contains two integers n and m (5 \u2264 n \u2264 400, 4 \u2264\
  \ m \u2264 400). \n\nThen n lines follow, each line contains m characters 0 or 1.\
  \ If the j-th character of i-th line is 0, block A_{i,j} is an empty block. Otherwise,\
  \ block A_{i,j} is an obsidian block.\n\nIt is guaranteed that the sum of n over\
  \ all test cases does not exceed 400.\n\nIt is guaranteed that the sum of m over\
  \ all test cases does not exceed 400.\n\nOutput\n\nOutput t answers, and each answer\
  \ in a line.\n\nExamples\n\nInput\n\n\n1\n5 4\n1000\n0000\n0110\n0000\n0001\n\n\n\
  Output\n\n\n12\n\n\nInput\n\n\n1\n9 9\n001010001\n101110100\n000010011\n100000001\n\
  101010101\n110001111\n000001111\n111100000\n000110000\n\n\nOutput\n\n\n5\n\nNote\n\
  \nIn the first test case, the final portal is like this:\n    \n    \n      \n \
  \   1110  \n    1001  \n    1001  \n    1001  \n    0111  \n    \nA:"
question: "CQXYM found a rectangle A of size n \xD7 m. There are n rows and m columns\
  \ of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can\
  \ change an obsidian block to an empty block or an empty block to an obsidian block\
  \ in one operation.\n\nA rectangle M size of a \xD7 b is called a portal if and\
  \ only if it satisfies the following conditions:\n\n  * a \u2265 5,b \u2265 4. \n\
  \  * For all 1 < x < a, blocks M_{x,1} and M_{x,b} are obsidian blocks. \n  * For\
  \ all 1 < x < b, blocks M_{1,x} and M_{a,x} are obsidian blocks. \n  * For all 1<x<a,1<y<b,\
  \ block M_{x,y} is an empty block. \n  * M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b}\
  \ can be any type. \n\nNote that the there must be a rows and b columns, not b rows\
  \ and a columns.\n\nNote that corners can be any type\n\nCQXYM wants to know the\
  \ minimum number of operations he needs to make at least one sub-rectangle a portal.\n\
  \nInput\n\nThe first line contains an integer t (t \u2265 1), which is the number\
  \ of test cases.\n\nFor each test case, the first line contains two integers n and\
  \ m (5 \u2264 n \u2264 400, 4 \u2264 m \u2264 400). \n\nThen n lines follow, each\
  \ line contains m characters 0 or 1. If the j-th character of i-th line is 0, block\
  \ A_{i,j} is an empty block. Otherwise, block A_{i,j} is an obsidian block.\n\n\
  It is guaranteed that the sum of n over all test cases does not exceed 400.\n\n\
  It is guaranteed that the sum of m over all test cases does not exceed 400.\n\n\
  Output\n\nOutput t answers, and each answer in a line.\n\nExamples\n\nInput\n\n\n\
  1\n5 4\n1000\n0000\n0110\n0000\n0001\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n1\n9 9\n\
  001010001\n101110100\n000010011\n100000001\n101010101\n110001111\n000001111\n111100000\n\
  000110000\n\n\nOutput\n\n\n5\n\nNote\n\nIn the first test case, the final portal\
  \ is like this:\n    \n    \n      \n    1110  \n    1001  \n    1001  \n    1001\
  \  \n    0111  \n    "
samples:
- " ```t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n\
  \    a = [list(input()) for _ in range(n)]\n    res = 0\n    for i in range(1, n\
  \ - 1):\n        for j in range(1, m - 1):\n            if a[i][j] == '1':\n   \
  \             res += 1\n                a[i][j] = '0'\n    for i in range(1, n -\
  \ 1):\n        a[i][0] = a[i][m - 1] = '1'\n    for j in range(1, m - 1):\n    \
  \    a[0][j] = a[n - 1][j] = '1'\n    for i in range(1, n - 1):\n        for j in\
  \ range(1, m - 1):\n            if a[i][j] == '0':\n                res += 1\n \
  \               a[i][j] = '1'\n    print(res)```\n\n\n```python\n```\nA: ```python\n\
  ```python\n```\nQ:"
- " ```t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n\
  \    a = [list(map(int, input().strip())) for _ in range(n)]\n    res = 0\n    for\
  \ i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if a[i][j]\
  \ == 1:\n                res += 1\n                a[i][j] = 0\n               \
  \ if i == 1:\n                    a[i][m - 1] = 1\n                if i == n - 1:\n\
  \                    a[i][j] = 1\n                if j == 1:\n                 \
  \   a[n - 1][j] = 1\n                if j == m - 1:\n                    a[i][j]\
  \ = 1\n    print(res)```\nQ:"
test_cases:
  input:
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110001111

    000001111

    111100000

    000110000

    '
  - '1

    5 4

    1000

    0000

    0110

    0000

    0001

    '
  - '1

    5 4

    1000

    0000

    0110

    0001

    0001

    '
  - '1

    5 4

    1000

    0000

    1110

    0001

    0000

    '
  - '1

    5 4

    1011

    0000

    1010

    0000

    1000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110001111

    000001111

    110100000

    000110000

    '
  - '1

    5 4

    1000

    0010

    0110

    0001

    0001

    '
  - '1

    5 4

    1011

    0000

    1010

    0001

    1000

    '
  - '1

    5 4

    1000

    0100

    0110

    0101

    0000

    '
  - '1

    5 4

    1011

    0000

    1010

    1001

    1000

    '
  - '1

    5 4

    0011

    0001

    0010

    1001

    1101

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    001011101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    001011001

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1000

    0000

    0110

    0001

    0000

    '
  - '1

    5 4

    1000

    0000

    1110

    0000

    0000

    '
  - '1

    5 4

    1000

    0000

    1110

    0000

    1000

    '
  - '1

    5 4

    1000

    0000

    1111

    0000

    1000

    '
  - '1

    5 4

    1000

    0000

    1010

    0000

    1000

    '
  - '1

    5 4

    1001

    0000

    1010

    0000

    1000

    '
  - '1

    5 4

    1000

    0000

    0110

    0101

    0000

    '
  - '1

    5 4

    1000

    0010

    0110

    0001

    0000

    '
  - '1

    5 4

    1000

    0000

    1110

    0000

    0010

    '
  - '1

    5 4

    1000

    0000

    1111

    0010

    1000

    '
  - '1

    5 4

    1000

    0010

    1010

    0000

    1000

    '
  - '1

    5 4

    1001

    0000

    1010

    1000

    1000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0010

    0110

    0001

    0001

    '
  - '1

    5 4

    1000

    0110

    0110

    0001

    0000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    001010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0010

    0110

    1001

    0001

    '
  - '1

    5 4

    1000

    0000

    0110

    1101

    0000

    '
  - '1

    5 4

    1000

    0010

    0110

    1001

    0000

    '
  - '1

    5 4

    1011

    0000

    0010

    1001

    1000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    000000001

    001010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1000

    0001

    0110

    1101

    0000

    '
  - '1

    5 4

    1000

    0010

    1110

    1001

    0000

    '
  - '1

    5 4

    0011

    0000

    0010

    1001

    1000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    000000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0001

    0110

    1101

    0000

    '
  - '1

    5 4

    1010

    0010

    1110

    1001

    0000

    '
  - '1

    5 4

    0011

    0000

    0011

    1001

    1000

    '
  - '1

    9 9

    101010001

    101110100

    000010011

    000000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0011

    0110

    1101

    0000

    '
  - '1

    5 4

    1110

    0010

    1110

    1001

    0000

    '
  - '1

    5 4

    0011

    0000

    0011

    1001

    1001

    '
  - '1

    9 9

    101010001

    101110100

    000010011

    001000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1110

    0010

    1110

    1001

    0001

    '
  - '1

    5 4

    0011

    0000

    0010

    1001

    1001

    '
  - '1

    8 9

    101010001

    101110100

    000010011

    001000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1110

    0010

    0110

    1001

    0001

    '
  - '1

    5 4

    0011

    0001

    0010

    1001

    1001

    '
  - '1

    8 9

    101110001

    101110100

    000010011

    001000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1110

    0000

    0110

    1001

    0001

    '
  - '1

    8 9

    101110001

    101110100

    000010011

    001000001

    001011101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1110

    0000

    0110

    1011

    0001

    '
  - '1

    5 4

    0011

    0001

    0110

    1001

    1101

    '
  - '1

    5 4

    0011

    0001

    0100

    1001

    1101

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    001011001

    110001111

    000001111

    110100010

    010100000

    '
  - '1

    8 9

    101110001

    101110000

    000010001

    001000001

    001011001

    110001111

    000001111

    110100010

    010100000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110101111

    000001111

    111100000

    000110000

    '
  - '1

    5 4

    1000

    1000

    0110

    0001

    0001

    '
  - '1

    5 4

    1000

    0000

    0010

    0001

    0000

    '
  - '1

    5 4

    1000

    0000

    1111

    0001

    0000

    '
  - '1

    5 4

    1100

    0000

    1110

    0000

    1000

    '
  - '1

    5 4

    1001

    0000

    1010

    0000

    1100

    '
  - '1

    5 4

    1011

    1000

    1010

    0000

    1000

    '
  - '1

    9 9

    001010001

    101110000

    000010011

    100000001

    101010101

    110001111

    000001111

    110100000

    000110000

    '
  - '1

    5 4

    1000

    0011

    0110

    0001

    0001

    '
  - '1

    5 4

    1000

    0000

    0110

    0101

    1000

    '
  - '1

    5 4

    1000

    0010

    0110

    0101

    0000

    '
  - '1

    5 4

    1000

    0000

    1100

    0000

    0010

    '
  - '1

    5 4

    1001

    0000

    1111

    0010

    1000

    '
  - '1

    5 4

    1001

    0000

    1010

    1000

    1100

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110001111

    000001111

    110110000

    010110000

    '
  - '1

    5 4

    1001

    0110

    0110

    0001

    0000

    '
  - '1

    9 9

    001010001

    101110100

    000110011

    100000001

    001010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0010

    0010

    1001

    0001

    '
  - '1

    5 4

    1000

    0000

    0110

    0111

    0000

    '
  - '1

    5 4

    1011

    0000

    0010

    1001

    1100

    '
  - '1

    7 9

    001010001

    101110100

    000010011

    000000001

    001010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    0011

    0000

    1010

    1001

    1000

    '
  - '1

    9 9

    001010001

    101110000

    000010011

    000000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0001

    0100

    1101

    0000

    '
  - '1

    5 4

    0111

    0000

    0011

    1001

    1000

    '
  - '1

    9 9

    101010001

    101110100

    000010011

    010000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1000

    0011

    0110

    1101

    0000

    '
  - '1

    5 4

    1110

    0010

    1111

    1001

    0000

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    001000001

    001010101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0010

    1110

    1001

    0001

    '
  - '1

    5 4

    0011

    1000

    0010

    1001

    1001

    '
  - '1

    8 9

    101010001

    101110100

    000010011

    001000001

    001010101

    110001111

    000001111

    110100011

    010110000

    '
  - '1

    5 4

    0011

    0001

    0010

    1000

    1001

    '
  - '1

    5 4

    0011

    0000

    0010

    1001

    1101

    '
  - '1

    8 9

    101100001

    101110100

    000010011

    001000001

    001011101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0000

    0110

    1011

    0001

    '
  - '1

    5 4

    0010

    0001

    0110

    1001

    1101

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    001011101

    110001111

    000001111

    110000010

    010110000

    '
  - '1

    5 4

    0011

    0001

    0100

    1001

    1100

    '
  - '1

    8 9

    101110001

    101110100

    000000001

    001000001

    001011101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    000011001

    110001111

    000001111

    110100010

    010100000

    '
  - '1

    8 9

    101110001

    101110000

    000010001

    001000001

    000011001

    110001111

    000001111

    110100010

    010100000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110101111

    000001011

    111100000

    000110000

    '
  - '1

    5 4

    1000

    1010

    0110

    0001

    0001

    '
  - '1

    5 4

    0000

    0000

    0010

    0001

    0000

    '
  - '1

    5 4

    1100

    0010

    1110

    0000

    1000

    '
  - '1

    5 4

    1001

    0000

    1010

    0100

    1100

    '
  - '1

    5 4

    1011

    1000

    1010

    0000

    1010

    '
  - '1

    9 9

    001010001

    101110000

    000010011

    100000001

    101010101

    110001111

    000001111

    110100100

    000110000

    '
  - '1

    5 4

    1000

    0011

    0100

    0001

    0001

    '
  - '1

    5 4

    1000

    0100

    0110

    0101

    1000

    '
  - '1

    5 4

    1000

    0000

    1101

    0000

    0010

    '
  - '1

    5 4

    1101

    0000

    1010

    1000

    1100

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110001111

    000000111

    110110000

    010110000

    '
  - '1

    5 4

    1001

    0110

    0100

    0001

    0000

    '
  - '1

    9 9

    001010001

    101110100

    000110011

    100000001

    000010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0010

    0010

    1101

    0001

    '
  - '1

    5 4

    1000

    0000

    0111

    0111

    0000

    '
  - '1

    5 4

    1011

    0000

    0010

    1001

    0100

    '
  - '1

    5 4

    0011

    0000

    1010

    1001

    1010

    '
  - '1

    5 4

    1010

    0001

    0100

    1001

    0000

    '
  - '1

    5 4

    0111

    0000

    0011

    1001

    0000

    '
  - '1

    9 9

    101010001

    101110100

    000010011

    010000001

    001010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    0000

    0011

    0110

    1101

    0000

    '
  - '1

    5 4

    1110

    0010

    1111

    1001

    0100

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    001000001

    001110101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0000

    0110

    1011

    0000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    001011101

    110001111

    000001111

    100000010

    010110000

    '
  - '1

    5 4

    0011

    0001

    0100

    1000

    1100

    '
  - '1

    8 9

    101110001

    101110100

    000000001

    001000001

    001011101

    110001111

    000001101

    110100010

    010110000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000001

    000011001

    110001111

    001001111

    110100010

    010100000

    '
  - '1

    8 9

    101110001

    101110000

    000010001

    001000001

    000011001

    110001111

    000001111

    110100010

    000100000

    '
  - '1

    5 4

    1000

    1010

    1110

    0001

    0001

    '
  - '1

    5 4

    0000

    0100

    0010

    0001

    0000

    '
  - '1

    5 4

    1001

    0000

    1010

    0110

    1100

    '
  - '1

    9 9

    001010001

    101110000

    000010011

    100000001

    101010101

    110001111

    000001111

    110100100

    000110001

    '
  - '1

    5 4

    0000

    0011

    0100

    0001

    0001

    '
  - '1

    5 4

    1000

    0000

    1110

    0101

    1000

    '
  - '1

    5 4

    1000

    1000

    1101

    0000

    0010

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000001

    101010101

    110001111

    000000111

    110110000

    110110000

    '
  - '1

    5 4

    0001

    0110

    0110

    0001

    0000

    '
  - '1

    9 9

    001110001

    101110100

    000110011

    100000001

    000010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0000

    0010

    1101

    0001

    '
  - '1

    5 4

    1000

    0000

    0111

    0110

    0000

    '
  - '1

    5 4

    0011

    0000

    1010

    0001

    1010

    '
  - '1

    9 9

    101010001

    101110100

    000010001

    010000001

    001010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0010

    1111

    1001

    0100

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    001000000

    001110101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0010

    0110

    1011

    0000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000011

    001011101

    110001111

    000001111

    100000010

    010110000

    '
  - '1

    5 4

    0011

    0001

    0110

    1000

    1100

    '
  - '1

    8 9

    101110001

    101110100

    000000001

    001000001

    001011101

    111001111

    000001101

    110100010

    010110000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    101000001

    000011001

    110001111

    001001111

    110100010

    010100000

    '
  - '1

    8 9

    101110001

    101110000

    000010001

    001000001

    000011001

    110001111

    000001111

    110100010

    000100100

    '
  - '1

    5 4

    1000

    1010

    1110

    0011

    0001

    '
  - '1

    5 4

    1000

    0100

    0010

    0001

    0000

    '
  - '1

    5 4

    1001

    0000

    1011

    0110

    1100

    '
  - '1

    5 4

    0000

    0011

    0000

    0001

    0001

    '
  - '1

    5 4

    1000

    0000

    1110

    0111

    1000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000101

    101010101

    110001111

    000000111

    110110000

    110110000

    '
  - '1

    5 4

    0001

    0110

    0110

    0001

    0001

    '
  - '1

    9 9

    011110001

    101110100

    000110011

    100000001

    000010101

    110001111

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1000

    0000

    0111

    0100

    0000

    '
  - '1

    5 4

    0011

    0001

    1010

    0001

    1010

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    011000000

    001110101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0011

    0110

    1011

    0000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    001000011

    101011101

    110001111

    000001111

    100000010

    010110000

    '
  - '1

    8 9

    101110001

    101110100

    000000001

    001000001

    001011101

    111101111

    000001101

    110100010

    010110000

    '
  - '1

    8 9

    101110001

    101110100

    000010001

    101000001

    000011001

    110001111

    001001111

    110100110

    010100000

    '
  - '1

    8 9

    101110001

    101110000

    000010001

    001000001

    000011001

    010001111

    000001111

    110100010

    000100100

    '
  - '1

    5 4

    1000

    0110

    0010

    0001

    0000

    '
  - '1

    5 4

    1001

    0000

    1010

    0010

    1100

    '
  - '1

    5 4

    1000

    0000

    1110

    0011

    1000

    '
  - '1

    9 9

    001010001

    101110100

    000010011

    100000101

    101011101

    110001111

    000000111

    110110000

    110110000

    '
  - '1

    5 4

    1001

    0110

    0110

    0001

    0001

    '
  - '1

    9 9

    011110001

    101110100

    000110011

    100000001

    000010101

    110001110

    000001111

    110100000

    010110000

    '
  - '1

    5 4

    1100

    0000

    0111

    0100

    0000

    '
  - '1

    5 4

    0011

    0001

    1110

    0001

    1010

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    011000000

    101110101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0011

    0110

    1001

    0000

    '
  - '1

    8 9

    101110001

    101010000

    000010001

    001000001

    000011001

    010001111

    000001111

    110100010

    000100100

    '
  - '1

    5 4

    1000

    0110

    0010

    0001

    1000

    '
  - '1

    5 4

    1001

    0010

    1010

    0010

    1100

    '
  - '1

    5 4

    1000

    0100

    1110

    0011

    1000

    '
  - '1

    9 9

    001010000

    101110100

    000010011

    100000101

    101011101

    110001111

    000000111

    110110000

    110110000

    '
  - '1

    5 4

    1011

    0110

    0110

    0001

    0001

    '
  - '1

    5 4

    1100

    0100

    0111

    0100

    0000

    '
  - '1

    5 4

    0011

    0001

    1110

    0001

    1000

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    001000000

    101110101

    110001111

    000001111

    110100010

    010110000

    '
  - '1

    5 4

    1010

    0011

    0110

    1001

    0001

    '
  - '1

    5 4

    1001

    0010

    1010

    0011

    1100

    '
  - '1

    5 4

    1000

    0100

    1110

    0011

    1100

    '
  - '1

    9 9

    001010000

    101110100

    000010011

    100000101

    101011101

    110001111

    000000111

    110110000

    110100000

    '
  - '1

    5 4

    1111

    0110

    0110

    0001

    0001

    '
  - '1

    5 4

    1100

    0100

    0111

    0100

    1000

    '
  - '1

    5 4

    0011

    1001

    1110

    0001

    1000

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    001000000

    101110101

    110001111

    000001111

    110100010

    010100000

    '
  - '1

    5 4

    1010

    0011

    0111

    1001

    0001

    '
  - '1

    5 4

    1001

    0010

    1010

    0011

    1101

    '
  - '1

    9 9

    001010000

    101110100

    000110011

    100000101

    101011101

    110001111

    000000111

    110110000

    110100000

    '
  - '1

    5 4

    1111

    0110

    0110

    0011

    0001

    '
  - '1

    5 4

    0011

    1001

    1110

    0011

    1000

    '
  - '1

    9 9

    101010001

    101110100

    010010011

    001000000

    101110101

    110001111

    000001111

    110100010

    010100100

    '
  output:
  - '5

    '
  - '12

    '
  - '11

    '
  - '10

    '
  - '9

    '
  - '5

    '
  - '12

    '
  - '8

    '
  - '13

    '
  - '7

    '
  - '6

    '
  - '4

    '
  - '3

    '
  - '11

    '
  - '11

    '
  - '11

    '
  - '10

    '
  - '10

    '
  - '10

    '
  - '12

    '
  - '12

    '
  - '10

    '
  - '11

    '
  - '11

    '
  - '9

    '
  - '5

    '
  - '11

    '
  - '13

    '
  - '5

    '
  - '10

    '
  - '11

    '
  - '11

    '
  - '8

    '
  - '5

    '
  - '10

    '
  - '10

    '
  - '8

    '
  - '5

    '
  - '9

    '
  - '9

    '
  - '7

    '
  - '5

    '
  - '10

    '
  - '8

    '
  - '7

    '
  - '5

    '
  - '8

    '
  - '8

    '
  - '5

    '
  - '9

    '
  - '7

    '
  - '5

    '
  - '8

    '
  - '5

    '
  - '9

    '
  - '7

    '
  - '6

    '
  - '3

    '
  - '4

    '
  - '5

    '
  - '10

    '
  - '10

    '
  - '9

    '
  - '10

    '
  - '9

    '
  - '8

    '
  - '5

    '
  - '11

    '
  - '12

    '
  - '13

    '
  - '9

    '
  - '11

    '
  - '8

    '
  - '5

    '
  - '13

    '
  - '5

    '
  - '9

    '
  - '13

    '
  - '7

    '
  - '5

    '
  - '7

    '
  - '5

    '
  - '8

    '
  - '6

    '
  - '5

    '
  - '11

    '
  - '7

    '
  - '5

    '
  - '9

    '
  - '7

    '
  - '5

    '
  - '8

    '
  - '7

    '
  - '5

    '
  - '10

    '
  - '7

    '
  - '4

    '
  - '6

    '
  - '4

    '
  - '3

    '
  - '4

    '
  - '5

    '
  - '11

    '
  - '10

    '
  - '11

    '
  - '10

    '
  - '7

    '
  - '5

    '
  - '10

    '
  - '13

    '
  - '8

    '
  - '7

    '
  - '5

    '
  - '12

    '
  - '5

    '
  - '10

    '
  - '12

    '
  - '7

    '
  - '6

    '
  - '7

    '
  - '6

    '
  - '5

    '
  - '11

    '
  - '6

    '
  - '4

    '
  - '10

    '
  - '4

    '
  - '7

    '
  - '4

    '
  - '3

    '
  - '4

    '
  - '10

    '
  - '11

    '
  - '11

    '
  - '5

    '
  - '10

    '
  - '11

    '
  - '7

    '
  - '5

    '
  - '13

    '
  - '5

    '
  - '9

    '
  - '13

    '
  - '7

    '
  - '4

    '
  - '7

    '
  - '4

    '
  - '11

    '
  - '5

    '
  - '8

    '
  - '4

    '
  - '3

    '
  - '4

    '
  - '11

    '
  - '11

    '
  - '10

    '
  - '9

    '
  - '12

    '
  - '6

    '
  - '13

    '
  - '5

    '
  - '12

    '
  - '6

    '
  - '4

    '
  - '10

    '
  - '5

    '
  - '4

    '
  - '3

    '
  - '4

    '
  - '12

    '
  - '10

    '
  - '11

    '
  - '6

    '
  - '13

    '
  - '5

    '
  - '11

    '
  - '7

    '
  - '4

    '
  - '9

    '
  - '4

    '
  - '12

    '
  - '11

    '
  - '12

    '
  - '6

    '
  - '12

    '
  - '12

    '
  - '8

    '
  - '4

    '
  - '9

    '
  - '10

    '
  - '11

    '
  - '6

    '
  - '11

    '
  - '12

    '
  - '7

    '
  - '5

    '
  - '8

    '
  - '10

    '
  - '5

    '
  - '12

    '
  - '8

    '
  - '5

    '
timeout: 1.0
