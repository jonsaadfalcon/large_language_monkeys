prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nHow to make\
  \ a cake you'll never eat.\n\nIngredients. \n\n  * 2 carrots\n  * 0 calories\n \
  \ * 100 g chocolate spread\n  * 1 pack of flour\n  * 1 egg\n\n\n\nMethod. \n\n \
  \ 1. Put calories into the mixing bowl.\n  2. Take carrots from refrigerator.\n\
  \  3. Chop carrots.\n  4. Take chocolate spread from refrigerator.\n  5. Put chocolate\
  \ spread into the mixing bowl.\n  6. Combine pack of flour into the mixing bowl.\n\
  \  7. Fold chocolate spread into the mixing bowl.\n  8. Add chocolate spread into\
  \ the mixing bowl.\n  9. Put pack of flour into the mixing bowl.\n  10. Add egg\
  \ into the mixing bowl.\n  11. Fold pack of flour into the mixing bowl.\n  12. Chop\
  \ carrots until choped.\n  13. Pour contents of the mixing bowl into the baking\
  \ dish.\n\n\n\nServes 1.\n\nInput\n\nThe only line of input contains a sequence\
  \ of integers a0, a1, ... (1 \u2264 a0 \u2264 100, 0 \u2264 ai \u2264 1000 for i\
  \ \u2265 1).\n\nOutput\n\nOutput a single integer.\n\nExamples\n\nInput\n\n4 1 2\
  \ 3 4\n\n\nOutput\n\n30\nA: ```a = input().split()\ns = 0\nfor i in range(int(a[0])):\n\
  \  s += (i + 1) * int(a[i + 1])\nprint(s)```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nYou are given two strings a and b consisting of lowercase\
  \ English letters, both of length n. The characters of both strings have indices\
  \ from 1 to n, inclusive. \n\nYou are allowed to do the following changes: \n\n\
  \  * Choose any index i (1 \u2264 i \u2264 n) and swap characters a_i and b_i; \n\
  \  * Choose any index i (1 \u2264 i \u2264 n) and swap characters a_i and a_{n -\
  \ i + 1}; \n  * Choose any index i (1 \u2264 i \u2264 n) and swap characters b_i\
  \ and b_{n - i + 1}. \n\n\n\nNote that if n is odd, you are formally allowed to\
  \ swap a_{\u2308n/2\u2309} with a_{\u2308n/2\u2309} (and the same with the string\
  \ b) but this move is useless. Also you can swap two equal characters but this operation\
  \ is useless as well.\n\nYou have to make these strings equal by applying any number\
  \ of changes described above, in any order. But it is obvious that it may be impossible\
  \ to make two strings equal by these swaps.\n\nIn one preprocess move you can replace\
  \ a character in a with another character. In other words, in a single preprocess\
  \ move you can choose any index i (1 \u2264 i \u2264 n), any character c and set\
  \ a_i := c.\n\nYour task is to find the minimum number of preprocess moves to apply\
  \ in such a way that after them you can make strings a and b equal by applying some\
  \ number of changes described in the list above.\n\nNote that the number of changes\
  \ you make after the preprocess moves does not matter. Also note that you cannot\
  \ apply preprocess moves to the string b or make any preprocess moves after the\
  \ first change is made.\n\nInput\n\nThe first line of the input contains one integer\
  \ n (1 \u2264 n \u2264 10^5) \u2014 the length of strings a and b.\n\nThe second\
  \ line contains the string a consisting of exactly n lowercase English letters.\n\
  \nThe third line contains the string b consisting of exactly n lowercase English\
  \ letters.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of preprocess\
  \ moves to apply before changes, so that it is possible to make the string a equal\
  \ to string b with a sequence of changes from the list above.\n\nExamples\n\nInput\n\
  \n7\nabacaba\nbacabaa\n\n\nOutput\n\n4\n\n\nInput\n\n5\nzcabd\ndbacz\n\n\nOutput\n\
  \n0\n\nNote\n\nIn the first example preprocess moves are as follows: a_1 := 'b',\
  \ a_3 := 'c', a_4 := 'a' and a_5:='b'. Afterwards, a = \"bbcabba\". Then we can\
  \ obtain equal strings by the following sequence of changes: swap(a_2, b_2) and\
  \ swap(a_2, a_6). There is no way to use fewer than 4 preprocess moves before a\
  \ sequence of changes to make string equal, so the answer in this example is 4.\n\
  \nIn the second example no preprocess moves are required. We can use the following\
  \ sequence of changes to make a and b equal: swap(b_1, b_5), swap(a_2, a_4).\nA:\
  \ ```n = int(input())\na = input()\nb = input()\nl = 0; r = n-1; ans = 0\nwhile\
  \ l < r:\n    x1 = a[l]; x2 = a[r]\n    y1 = b[l]; y2 = b[r]\n    \n    if (x1 ==\
  \ y1 and x2 == y2) or (x1 == y2 and x2 == y1) or (x1 == x2 and y1 == y2):\n    \
  \    ans += 0\n    elif (x1 == y1 or x2 == y2) or (x1 == y2 or x2 == y1) or (y1\
  \ == y2):\n        ans += 1\n    else:\n        ans += 2\n    l+=1; r-=1\n    #print(ans)\n\
  if l == r:\n    ans += 1 if a[l] != b[l] else 0 \nprint(ans)```\nQ: Write python\
  \ code to solve the following coding problem that obeys the constraints and passes\
  \ the example test cases. The output code needs to read from and write to standard\
  \ IO. Please wrap your code answer using ```:\nAfter getting bored by playing with\
  \ crayons, you decided to switch to Legos! Today, you're working with a long strip,\
  \ with height 1 and length n, some positions of which are occupied by 1 by 1 Lego\
  \ pieces.\n\nIn one second, you can either remove two adjacent Lego pieces from\
  \ the strip (if both are present), or add two Lego pieces to adjacent positions\
  \ (if both are absent). You can only add or remove Lego's at two adjacent positions\
  \ at the same time, as otherwise your chubby fingers run into precision issues.\n\
  \nYou want to know exactly how much time you'll spend playing with Legos. You value\
  \ efficiency, so given some starting state and some ending state, you'll always\
  \ spend the least number of seconds to transform the starting state into the ending\
  \ state. If it's impossible to transform the starting state into the ending state,\
  \ you just skip it (so you spend 0 seconds).\n\nThe issue is that, for some positions,\
  \ you don't remember whether there were Legos there or not (in either the starting\
  \ state, the ending state, or both). Over all pairs of (starting state, ending state)\
  \ that are consistent with your memory, find the total amount of time it will take\
  \ to transform the starting state to the ending state. Print this value modulo 1\
  \ 000 000 007 (10^9 + 7). \n\nInput\n\nThe first line contains one integer t (1\
  \ \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\n\
  The first line of each test case contains one integer n (2 \u2264 n \u2264 2000)\
  \ \u2014 the size of the Lego strip.\n\nThe second line of each test case contains\
  \ a string s of length n, consisting of the characters 0, 1, and ? \u2014 your memory\
  \ of the starting state: \n\n  * 1 represents a position that definitely has a Lego\
  \ piece, \n  * 0 represents a position that definitely does not have a Lego piece,\
  \ \n  * and ? represents a position that you don't remember. \n\n\n\nThe third line\
  \ of each test case contains a string t of length n, consisting of the characters\
  \ 0, 1, and ? \u2014 your memory of the ending state. It follows a similar format\
  \ to the starting state.\n\nIt's guaranteed that the sum of n over all test cases\
  \ doesn't exceed 2000.\n\nOutput\n\nFor each test case, output a single integer\
  \ \u2014 the answer to the problem modulo 1 000 000 007 (10^9 + 7). \n\nExample\n\
  \nInput\n\n\n6\n2\n00\n11\n3\n???\n???\n3\n??1\n0?0\n4\n??0?\n??11\n5\n?????\n0??1?\n\
  10\n?01??01?1?\n??100?1???\n\n\nOutput\n\n\n1\n16\n1\n14\n101\n1674\n\nNote\n\n\
  For the first test case, 00 is the only possible starting state, and 11 is the only\
  \ possible ending state. It takes exactly one operation to change 00 to 11.\n\n\
  For the second test case, some of the possible starting and ending state pairs are:\
  \ \n\n  * (000, 011) \u2014 takes 1 operation. \n  * (001, 100) \u2014 takes 2 operations.\
  \ \n  * (010, 000) \u2014 takes 0 operations, as it's impossible to achieve the\
  \ ending state. \nA:"
question: "After getting bored by playing with crayons, you decided to switch to Legos!\
  \ Today, you're working with a long strip, with height 1 and length n, some positions\
  \ of which are occupied by 1 by 1 Lego pieces.\n\nIn one second, you can either\
  \ remove two adjacent Lego pieces from the strip (if both are present), or add two\
  \ Lego pieces to adjacent positions (if both are absent). You can only add or remove\
  \ Lego's at two adjacent positions at the same time, as otherwise your chubby fingers\
  \ run into precision issues.\n\nYou want to know exactly how much time you'll spend\
  \ playing with Legos. You value efficiency, so given some starting state and some\
  \ ending state, you'll always spend the least number of seconds to transform the\
  \ starting state into the ending state. If it's impossible to transform the starting\
  \ state into the ending state, you just skip it (so you spend 0 seconds).\n\nThe\
  \ issue is that, for some positions, you don't remember whether there were Legos\
  \ there or not (in either the starting state, the ending state, or both). Over all\
  \ pairs of (starting state, ending state) that are consistent with your memory,\
  \ find the total amount of time it will take to transform the starting state to\
  \ the ending state. Print this value modulo 1 000 000 007 (10^9 + 7). \n\nInput\n\
  \nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number\
  \ of test cases. Then t cases follow.\n\nThe first line of each test case contains\
  \ one integer n (2 \u2264 n \u2264 2000) \u2014 the size of the Lego strip.\n\n\
  The second line of each test case contains a string s of length n, consisting of\
  \ the characters 0, 1, and ? \u2014 your memory of the starting state: \n\n  * 1\
  \ represents a position that definitely has a Lego piece, \n  * 0 represents a position\
  \ that definitely does not have a Lego piece, \n  * and ? represents a position\
  \ that you don't remember. \n\n\n\nThe third line of each test case contains a string\
  \ t of length n, consisting of the characters 0, 1, and ? \u2014 your memory of\
  \ the ending state. It follows a similar format to the starting state.\n\nIt's guaranteed\
  \ that the sum of n over all test cases doesn't exceed 2000.\n\nOutput\n\nFor each\
  \ test case, output a single integer \u2014 the answer to the problem modulo 1 000\
  \ 000 007 (10^9 + 7). \n\nExample\n\nInput\n\n\n6\n2\n00\n11\n3\n???\n???\n3\n??1\n\
  0?0\n4\n??0?\n??11\n5\n?????\n0??1?\n10\n?01??01?1?\n??100?1???\n\n\nOutput\n\n\n\
  1\n16\n1\n14\n101\n1674\n\nNote\n\nFor the first test case, 00 is the only possible\
  \ starting state, and 11 is the only possible ending state. It takes exactly one\
  \ operation to change 00 to 11.\n\nFor the second test case, some of the possible\
  \ starting and ending state pairs are: \n\n  * (000, 011) \u2014 takes 1 operation.\
  \ \n  * (001, 100) \u2014 takes 2 operations. \n  * (010, 000) \u2014 takes 0 operations,\
  \ as it's impossible to achieve the ending state. "
samples:
- " ```import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n\
  \    s = input()\n    t = input()\n    dp = [[0] * (n + 1) for _ in range(3)]\n\
  \    for i in range(n):\n        if s[i] == '0':\n            dp[0][i + 1] = dp[0][i]\n\
  \        elif s[i] == '1':\n            dp[0][i + 1] = dp[0][i] + 1\n        else:\n\
  \            dp[0][i + 1] = dp[0][i] + 2\n        if t[i] == '0':\n            dp[1][i\
  \ + 1] = dp[1][i]\n        elif t[i] == '1':\n            dp[1][i + 1] = dp[1][i]\
  \ + 1\n        else:\n            dp[1][i + 1] = dp[1][i] + 2\n    for i in range(2):\n\
  \        dp[i][n] = dp[i][n - 1] + 1\n    for i in range(n - 1, -1, -1):\n     \
  \   if s[i] == '0':\n            dp[2][i] = min(dp[0][i], dp[1][i])\n        elif\
  \ s[i] == '1':\n            dp[2][i] = min(dp[0][i] + 1, dp[1][i] + 1)\n       \
  \ else:\n            dp[2][i] = min(dp[0][i] + 2, dp[1][i] + 2)\n    res = 0\n \
  \   for i in range(n):\n        if s[i] == '?' and t[i] == '?':\n            res\
  \ += dp[2][i + 1] - dp[2][i]\n        elif s[i] != t[i]:\n            res += dp[2][i\
  \ + 1] - dp[2][i] + 1\n    print(res % (10**9 + 7))``` Q:"
- " ```t = int(input())\nMOD = 1000000007\nfor _ in range(t):\n    n = int(input())\n\
  \    s = input()\n    t = input()\n    dp = [[0]*(n+1) for _ in range(3)]\n    dp[0][0]\
  \ = 1\n    for i in range(n):\n        for j in range(3):\n            if s[i] !=\
  \ '?':\n                dp[j][i+1] = dp[j][i]\n            else:\n             \
  \   dp[j][i+1] = (dp[0][i] + dp[1][i] + dp[2][i]) % MOD\n        if t[i] != '?':\n\
  \            dp[0][i+1] = dp[0][i] if t[i] == '1' else 0\n            dp[1][i+1]\
  \ = dp[1][i] if t[i] == '0' else 0\n            dp[2][i+1] = dp[2][i]\n        else:\n\
  \            dp[0][i+1] = (dp[0][i] + dp[1][i]) % MOD\n            dp[1][i+1] =\
  \ (dp[0][i] + dp[2][i]) % MOD\n            dp[2][i+1] = (dp[1][i] + dp[2][i]) %\
  \ MOD\n    print((dp[0][n] + dp[1][n] + dp[2][n]) % MOD)```\n\n\n\n```python\n```\n\
  \n\n\n```python\n```\n\n```python\n```\n\n\n\n```python\n```\n\n```python\n```\n\
  \n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n```python\n\
  ```\n\n\n\n```python\n```\n\n\n\n```python\n```\n\n\n\n"
test_cases:
  input:
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    ?1

    2

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    11??

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    1?

    2

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    1

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    1

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?00?

    2

    01

    ?1

    2

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??001?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    ?1

    2

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    ?1

    1

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    0??1?

    0

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1?

    1

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    1?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    1?0

    4

    ?0??

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    ?1

    2

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?0?1

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    1?

    1

    >?

    00

    '
  - '6

    2

    00

    10

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    0?1??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??10

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??001?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    1??1?

    0

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ?11?

    5

    ?????

    0??0?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    10

    3

    ???

    ???

    3

    ??1

    1?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    0?1??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ??110?0???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ?11?

    5

    ?????

    0??0?

    10

    ?01??01?1?

    ??110?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    0?1??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??10

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ?1001?????

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?1?10??10?

    ??100?1???

    '
  - '6

    2

    00

    10

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    11??

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ??11

    5

    ?????

    0??1?

    10

    ?1?10??10?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    ??01?

    0

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    0?0??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    00??

    0?1?

    2

    01

    1>

    0

    ??

    00

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    0?1??01?1?

    ??10??10??

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    ?00

    4

    ??0?

    ??10

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ?1001?????

    '
  - '4

    2

    01

    0?

    2

    ??00

    0?1?

    1

    01

    >1

    1

    >?

    -1

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ??11

    5

    ?????

    ??01?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ??11

    5

    ?????

    0??1?

    1

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??01

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??001?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ??0?

    11??

    5

    ?????

    0??1?

    10

    101??01???

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    2

    ?01??01?1?

    ??101?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    1???

    ?11?

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??10

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ??001?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?0

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ??110?0???

    '
  - '4

    2

    01

    0>

    4

    00??

    0?0?

    2

    01

    1>

    0

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ??11

    5

    ?????

    ??01?

    10

    ?00??01?1?

    ??100?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ??11

    5

    ?????

    0??1?

    1

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??10

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ???1?100??

    '
  - '4

    2

    01

    0>

    1

    00??

    0?1?

    1

    01

    0=

    0

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?1

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??001?1???

    '
  - '4

    2

    01

    0?

    4

    ?0?0

    ?01?

    2

    01

    1?

    1

    ??

    00

    '
  - '6

    2

    00

    10

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??10?01???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    01??

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??001?1???

    '
  - '6

    2

    00

    10

    3

    ???

    ???

    3

    ??1

    1?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ???1?001??

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ??0?

    ??11

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ??0?

    11??

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    1?

    1

    ?>

    00

    '
  - '4

    2

    01

    0?

    4

    ?00?

    ?01?

    2

    01

    ?1

    2

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    1

    ?01??01?1?

    ??101?1???

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?00?

    2

    01

    ?1

    2

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    1?

    1

    ?>

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?10?

    2

    01

    ?1

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    1?

    1

    >?

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ?11?

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    >0

    4

    ??00

    ?00?

    2

    01

    ?1

    2

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?0?1

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?10?

    2

    01

    ?1

    1

    ??

    0

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    1?

    0

    >?

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    ?1

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    0

    ?01??01?1?

    ??101?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1>

    1

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    1?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    ?1

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    1

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    2

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    ?1

    0

    >?

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ?1?

    0?0

    4

    ??0?

    ??10

    5

    ?????

    ?1??0

    10

    ?01??01?1?

    ??001?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    ?0

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    ?>

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    0

    ?01??01?1?

    ??001?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1>

    0

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    ?1

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    1

    01

    ?1

    1

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    2

    01

    1?

    1

    >?

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??110?0???

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    1?

    0

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    1?

    0

    ??

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    1??0?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?01?

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    ?1

    1

    ??

    0

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    1

    1?

    1

    ?>

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    1

    ?1?10??10?

    ??101?1???

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?00?

    2

    01

    1?

    2

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1?

    1

    ??

    1

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    0?

    1

    >?

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ?11?

    5

    ?????

    0??1?

    10

    ?1?10??10?

    ??100?1???

    '
  - '4

    2

    01

    1?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?01?

    2

    01

    ?1

    1

    ??

    0

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    1?

    1

    >?

    1

    '
  - '4

    2

    01

    1?

    4

    ??10

    ?10?

    2

    01

    1?

    0

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    >1

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    1

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    2

    01

    ?1

    1

    >?

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    ?0

    0

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    ?1

    0

    ??

    0

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    1

    01

    ?1

    1

    >?

    -1

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1?

    1

    >?

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??110?0???

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    1?

    0

    ??

    1

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?01?

    2

    01

    1?

    1

    ?@

    00

    '
  - '4

    2

    01

    0?

    4

    0??0

    ?10?

    2

    01

    0?

    1

    >?

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    ?1

    1

    ??

    0

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    0

    01

    1?

    1

    >?

    1

    '
  - '4

    2

    01

    ?1

    4

    ??10

    ?10?

    2

    01

    >1

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    1

    01

    1?

    0

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    1

    01

    ?1

    1

    >?

    00

    '
  - '4

    2

    01

    0>

    4

    00??

    0?1?

    2

    01

    1>

    0

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    0

    01

    ?1

    0

    ??

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    0??1?

    0

    ?01??01?1?

    ??110?0???

    '
  - '4

    2

    01

    0?

    4

    0??0

    ?10?

    2

    01

    0>

    1

    >?

    00

    '
  - '4

    2

    01

    ?1

    4

    ??10

    ?10?

    2

    01

    >0

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    1

    01

    1?

    0

    =?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    1

    01

    >1

    1

    >?

    00

    '
  - '4

    2

    01

    0>

    4

    00??

    0?1?

    2

    01

    0>

    0

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    0

    1

    ?1

    0

    ??

    0

    '
  - '4

    2

    01

    ?0

    4

    0??0

    ?10?

    2

    01

    0>

    1

    >?

    00

    '
  - '4

    2

    01

    ?1

    4

    ??10

    ?10?

    2

    01

    >1

    1

    ??

    -1

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    1

    01

    1?

    0

    <?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    1

    01

    >1

    1

    >?

    -1

    '
  - '4

    2

    01

    0>

    4

    00??

    0?1?

    2

    01

    0=

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    1

    01

    ?1

    0

    <?

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    1

    01

    >1

    1

    >?

    -1

    '
  - '4

    2

    01

    0?

    2

    ??00

    0?1?

    1

    0

    >1

    1

    >?

    -1

    '
  - '4

    2

    01

    0?

    2

    ??00

    0?1?

    1

    0

    >1

    1

    =?

    -1

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    1?

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?00?

    2

    01

    ?1

    2

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    ?0

    1

    ??

    00

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??1?

    ??10

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    0?0?

    0?1?

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    1

    1?

    1

    ?>

    00

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    >1

    2

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?01?

    2

    01

    ?1

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ?00?

    ?10?

    2

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    1?0?

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    >?

    0

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?0?1

    2

    01

    1?

    1

    ??

    0

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?10?

    2

    1

    ?1

    1

    ??

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    ?1??0

    1

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1>

    1

    ??

    1

    '
  - '6

    2

    -1

    11

    3

    ???

    ???

    3

    1??

    1?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?01?

    2

    01

    ?1

    1

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    1

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    ?1

    0

    >?

    00

    '
  - '6

    2

    00

    10

    3

    ???

    ???

    3

    1??

    1?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    10

    ?01??01?1?

    ??100?1???

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ??11

    5

    ?????

    0??1?

    0

    ?01??01?1?

    ???1?100??

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    2

    01

    1>

    0

    ??

    -1

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    1

    0

    ?1

    1

    >?

    00

    '
  - '4

    2

    01

    0?

    4

    ??10

    ?10?

    2

    01

    1?

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?10?

    2

    01

    @1

    1

    ??

    0

    '
  - '4

    2

    01

    1?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    =?

    00

    '
  - '4

    2

    01

    ?/

    4

    ??00

    ?01?

    2

    01

    ?1

    1

    ??

    0

    '
  - '4

    2

    01

    0>

    4

    ??10

    ?10?

    2

    01

    1?

    1

    >?

    1

    '
  - '4

    2

    01

    1@

    4

    ??10

    ?10?

    2

    01

    1?

    0

    >?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    2

    01

    >1

    1

    ??

    0

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    2

    01

    ?1

    1

    >>

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    0?

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?00?

    1

    01

    ?1

    1

    >?

    -1

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?01?

    2

    01

    1?

    1

    ?@

    0

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    ?1

    1

    ??

    -1

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    0

    01

    1?

    1

    >?

    1

    '
  - '4

    2

    01

    ?0

    4

    ??10

    ?10?

    0

    01

    1?

    0

    ??

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    1??

    0?0

    4

    ?0??

    ?1?1

    5

    ?????

    0??1?

    1

    ?01??01?1?

    ??110?0???

    '
  - '4

    2

    01

    0?

    4

    0??0

    ?10?

    2

    01

    0>

    1

    ??

    00

    '
  - '4

    2

    01

    ?1

    4

    ??10

    ?10?

    2

    01

    >0

    1

    ??

    -1

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?0?1

    1

    01

    1?

    0

    =?

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    0?1?

    1

    01

    >1

    1

    >?

    0

    '
  - '4

    2

    01

    0>

    4

    ??00

    0?1?

    2

    01

    0>

    0

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    01??

    ?10?

    0

    1

    ?1

    0

    ??

    0

    '
  - '4

    2

    01

    ?0

    4

    0??0

    ?10?

    2

    01

    >0

    1

    >?

    00

    '
  - '4

    2

    01

    0>

    4

    00??

    0?1?

    1

    01

    0=

    0

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    ?1

    0

    <?

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    0?1?

    1

    01

    >1

    0

    >?

    -1

    '
  - '4

    2

    01

    0?

    2

    ??00

    0?1?

    1

    01

    >1

    1

    =?

    -1

    '
  - '4

    2

    01

    0?

    2

    ??00

    0?1?

    1

    0

    >1

    1

    ?>

    -1

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?01?

    2

    01

    ?0

    1

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ?0?0

    0?1?

    2

    01

    1?

    1

    ??

    00

    '
  - '4

    2

    01

    ?0

    4

    ??00

    ?01?

    2

    01

    ?1

    2

    ??

    00

    '
  - '4

    2

    01

    0?

    4

    ?00?

    ?01?

    2

    01

    1?

    1

    >?

    00

    '
  - '4

    2

    01

    0?

    4

    ??00

    ?11?

    2

    01

    1?

    1

    ?>

    0

    '
  - '6

    2

    00

    11

    3

    ???

    ???

    3

    ??1

    0?0

    4

    ??0?

    ?1?1

    5

    ?????

    ?1??0

    1

    ?01??01?1?

    ??100?1???

    '
  output:
  - '1

    16

    1

    14

    101

    1674

    '
  - '0

    6

    0

    1

    '
  - '1

    16

    2

    14

    101

    1674

    '
  - '1

    16

    1

    12

    101

    1674

    '
  - '1

    16

    1

    14

    101

    1674

    '
  - '0

    6

    0

    1

    '
  - '1

    16

    1

    14

    101

    0

    '
  - '0

    16

    1

    14

    101

    0

    '
  - '0

    8

    0

    1

    '
  - '1

    16

    2

    14

    101

    1844

    '
  - '1

    16

    1

    6

    101

    1674

    '
  - '0

    4

    0

    1

    '
  - '0

    6

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '1

    16

    1

    6

    101

    0

    '
  - '0

    9

    0

    0

    '
  - '1

    16

    5

    14

    101

    1674

    '
  - '1

    16

    5

    12

    101

    1674

    '
  - '0

    2

    0

    1

    '
  - '0

    11

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    16

    1

    14

    101

    1674

    '
  - '1

    16

    2

    14

    101

    3002

    '
  - '1

    16

    2

    10

    101

    1844

    '
  - '1

    16

    1

    6

    155

    0

    '
  - '1

    16

    1

    12

    155

    1674

    '
  - '0

    16

    5

    14

    101

    1674

    '
  - '0

    16

    2

    14

    101

    3002

    '
  - '1

    16

    1

    6

    101

    304

    '
  - '1

    16

    1

    12

    155

    867

    '
  - '0

    16

    1

    14

    101

    3002

    '
  - '1

    16

    2

    10

    101

    1058

    '
  - '1

    16

    2

    14

    101

    295

    '
  - '0

    16

    1

    12

    101

    1674

    '
  - '1

    16

    1

    12

    101

    295

    '
  - '1

    16

    1

    6

    115

    0

    '
  - '0

    16

    2

    14

    101

    3920

    '
  - '0

    5

    0

    0

    '
  - '0

    16

    1

    14

    101

    2710

    '
  - '1

    16

    3

    10

    101

    1058

    '
  - '0

    1

    0

    0

    '
  - '0

    16

    2

    14

    101

    1674

    '
  - '1

    16

    1

    12

    115

    1674

    '
  - '1

    16

    1

    12

    101

    0

    '
  - '1

    16

    2

    12

    101

    1844

    '
  - '1

    16

    1

    12

    101

    1992

    '
  - '1

    16

    1

    14

    101

    1

    '
  - '1

    16

    1

    16

    101

    1674

    '
  - '0

    16

    2

    10

    101

    1844

    '
  - '1

    16

    1

    18

    101

    304

    '
  - '0

    3

    0

    0

    '
  - '1

    16

    1

    12

    115

    2890

    '
  - '0

    16

    1

    12

    101

    0

    '
  - '0

    16

    2

    10

    101

    325

    '
  - '0

    0

    0

    0

    '
  - '1

    16

    3

    14

    101

    1844

    '
  - '0

    7

    0

    0

    '
  - '0

    16

    1

    14

    101

    2440

    '
  - '1

    16

    2

    16

    101

    1844

    '
  - '0

    16

    5

    14

    101

    295

    '
  - '1

    16

    1

    12

    101

    1674

    '
  - '1

    16

    1

    14

    101

    1674

    '
  - '1

    16

    1

    12

    101

    1674

    '
  - '0

    6

    0

    0

    '
  - '0

    6

    0

    1

    '
  - '1

    16

    1

    12

    101

    1674

    '
  - '1

    16

    1

    14

    101

    0

    '
  - '0

    8

    0

    1

    '
  - '0

    4

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '1

    16

    1

    12

    101

    1674

    '
  - '0

    8

    0

    1

    '
  - '0

    9

    0

    0

    '
  - '0

    11

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '1

    16

    1

    6

    101

    1674

    '
  - '0

    4

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '1

    16

    1

    14

    101

    0

    '
  - '0

    9

    0

    0

    '
  - '1

    16

    1

    14

    101

    1674

    '
  - '0

    2

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '1

    16

    2

    10

    101

    1844

    '
  - '0

    4

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '1

    16

    1

    14

    101

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '1

    16

    1

    6

    101

    304

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '1

    16

    1

    6

    101

    1674

    '
  - '0

    6

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '1

    16

    1

    14

    101

    0

    '
  - '0

    8

    0

    1

    '
  - '0

    9

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '1

    16

    1

    12

    101

    295

    '
  - '0

    8

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '1

    16

    1

    6

    101

    304

    '
  - '0

    2

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    5

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '1

    16

    1

    6

    101

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    5

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    5

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    1

    0

    0

    '
  - '0

    1

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    8

    0

    1

    '
  - '0

    4

    0

    0

    '
  - '1

    16

    1

    12

    101

    1674

    '
  - '0

    4

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    2

    0

    1

    '
  - '0

    6

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    11

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '1

    16

    1

    6

    101

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    16

    1

    14

    101

    1674

    '
  - '0

    8

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    16

    1

    14

    101

    1674

    '
  - '1

    16

    1

    14

    101

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '1

    16

    1

    6

    101

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    2

    0

    0

    '
  - '0

    11

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    5

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    9

    0

    0

    '
  - '0

    1

    0

    0

    '
  - '0

    1

    0

    0

    '
  - '0

    6

    0

    0

    '
  - '0

    4

    0

    0

    '
  - '0

    6

    0

    1

    '
  - '0

    6

    0

    0

    '
  - '0

    8

    0

    0

    '
  - '1

    16

    1

    12

    101

    0

    '
timeout: 2.0
