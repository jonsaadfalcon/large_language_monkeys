prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nRight now she\
  \ actually isn't. But she will be, if you don't solve this problem.\n\nYou are given\
  \ integers n, k, A and B. There is a number x, which is initially equal to n. You\
  \ are allowed to perform two types of operations: \n\n  1. Subtract 1 from x. This\
  \ operation costs you A coins. \n  2. Divide x by k. Can be performed only if x\
  \ is divisible by k. This operation costs you B coins. \n\nWhat is the minimum amount\
  \ of coins you have to pay to make x equal to 1?\n\nInput\n\nThe first line contains\
  \ a single integer n (1 \u2264 n \u2264 2\xB7109).\n\nThe second line contains a\
  \ single integer k (1 \u2264 k \u2264 2\xB7109).\n\nThe third line contains a single\
  \ integer A (1 \u2264 A \u2264 2\xB7109).\n\nThe fourth line contains a single integer\
  \ B (1 \u2264 B \u2264 2\xB7109).\n\nOutput\n\nOutput a single integer \u2014 the\
  \ minimum amount of coins you have to pay to make x equal to 1.\n\nExamples\n\n\
  Input\n\n9\n2\n3\n1\n\n\nOutput\n\n6\n\n\nInput\n\n5\n5\n2\n20\n\n\nOutput\n\n8\n\
  \n\nInput\n\n19\n3\n4\n2\n\n\nOutput\n\n12\n\nNote\n\nIn the first testcase, the\
  \ optimal strategy is as follows: \n\n  * Subtract 1 from x (9 \u2192 8) paying\
  \ 3 coins. \n  * Divide x by 2 (8 \u2192 4) paying 1 coin. \n  * Divide x by 2 (4\
  \ \u2192 2) paying 1 coin. \n  * Divide x by 2 (2 \u2192 1) paying 1 coin. \n\n\n\
  \nThe total cost is 6 coins.\n\nIn the second test case the optimal strategy is\
  \ to subtract 1 from x 4 times paying 8 coins in total.\nA: ```n = int(input())\n\
  k = int(input())\nA = int(input())\nB = int(input())\n\nans = 0\nif k == 1:\n\t\
  print(A*(n-1))\n\texit(0)\n\nwhile n > 1:\n\tsubt = (n % k)\n\tans += A * subt\n\
  \tn -= (n%k)\n\tans += min(A * (n - (n // k)),B)\n\tn //= k\n\nif n == 0:\n\tans\
  \ -= A\n\nprint(ans)```\nQ: Write python code to solve the following coding problem\
  \ that obeys the constraints and passes the example test cases. The output code\
  \ needs to read from and write to standard IO. Please wrap your code answer using\
  \ ```:\nFor a non-negative integer K, we define a fractal of level K as follows:\n\
  \n* A fractal of level 0 is a grid with just one white square.\n* When K > 0, a\
  \ fractal of level K is a 3^K \\times 3^K grid. If we divide this grid into nine\
  \ 3^{K-1} \\times 3^{K-1} subgrids:\n* The central subgrid consists of only black\
  \ squares.\n* Each of the other eight subgrids is a fractal of level K-1.\n\n\n\n\
  For example, a fractal of level 2 is as follows:\n\nA fractal of level 2\n\nIn a\
  \ fractal of level 30, let (r, c) denote the square at the r-th row from the top\
  \ and the c-th column from the left.\n\nYou are given Q quadruples of integers (a_i,\
  \ b_i, c_i, d_i). For each quadruple, find the distance from (a_i, b_i) to (c_i,\
  \ d_i).\n\nHere the distance from (a, b) to (c, d) is the minimum integer n that\
  \ satisfies the following condition:\n\n* There exists a sequence of white squares\
  \ (x_0, y_0), \\ldots, (x_n, y_n) satisfying the following conditions:\n* (x_0,\
  \ y_0) = (a, b)\n* (x_n, y_n) = (c, d)\n* For every i (0 \\leq i \\leq n-1), (x_i,\
  \ y_i) and (x_{i+1}, y_{i+1}) share a side.\n\nConstraints\n\n* 1 \\leq Q \\leq\
  \ 10000\n* 1 \\leq a_i, b_i, c_i, d_i \\leq 3^{30}\n* (a_i, b_i) \\neq (c_i, d_i)\n\
  * (a_i, b_i) and (c_i, d_i) are white squares.\n* All values in input are integers.\n\
  \nInput\n\nInput is given from Standard Input in the following format:\n\n\nQ\n\
  a_1 \\ b_1 \\ c_1 \\ d_1\n:\na_Q \\ b_Q \\ c_Q \\ d_Q\n\n\nOutput\n\nPrint Q lines.\
  \ The i-th line should contain the distance from (a_i, b_i) to (c_i, d_i).\n\nExample\n\
  \nInput\n\n2\n4 2 7 4\n9 9 1 9\n\n\nOutput\n\n5\n8\nA: ```q=abs;s=lambda t,i:0--t//3**i;m=lambda\
  \ a,b,c,d:max([i for i in range(30)if s(a,i)==s(c,i)and s(a,i)%3==2and 1<q(s(b,i)-s(d,i))]+[-1])+1\n\
  for _ in[0]*int(input()):\n  a,b,c,d=map(int,input().split());h=m(a,b,c,d);w=m(b,a,d,c)\n\
  \  if h==w==0:print(q(b-d)+q(a-c));continue\n  if h<w:h,a,b,c,d=w,b,a,d,c\n  i=3**h//3;x=2*i+1;g=a-(a-1)%(3*i)-1;a-=g;c-=g;print(q(b-d)+min(q(i-a)+q(i-c),q(x-a)+q(x-c)))```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nChristmas is coming,\
  \ Icy has just received a box of chocolates from her grandparents! The box contains\
  \ n chocolates. The i-th chocolate has a non-negative integer type a_i.\n\nIcy believes\
  \ that good things come in pairs. Unfortunately, all types of chocolates are distinct\
  \ (all a_i are distinct). Icy wants to make at least one pair of chocolates the\
  \ same type. \n\nAs a result, she asks her grandparents to perform some chocolate\
  \ exchanges. Before performing any chocolate exchanges, Icy chooses two chocolates\
  \ with indices x and y (1 \u2264 x, y \u2264 n, x \u2260 y).\n\nIn a chocolate exchange,\
  \ Icy's grandparents choose a non-negative integer k, such that 2^k \u2265 a_x,\
  \ and change the type of the chocolate x from a_x to 2^k - a_x (that is, perform\
  \ a_x := 2^k - a_x).\n\nThe chocolate exchanges will be stopped only when a_x =\
  \ a_y. Note that other pairs of equal chocolate types do not stop the procedure.\n\
  \nIcy's grandparents are smart, so they would choose the sequence of chocolate exchanges\
  \ that minimizes the number of exchanges needed. Since Icy likes causing trouble,\
  \ she wants to maximize the minimum number of exchanges needed by choosing x and\
  \ y appropriately. She wonders what is the optimal pair (x, y) such that the minimum\
  \ number of exchanges needed is maximized across all possible choices of (x, y).\n\
  \nSince Icy is not good at math, she hopes that you can help her solve the problem.\n\
  \nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264\
  \ 2 \u22C5 10^5) \u2014 the number of chocolates.\n\nThe second line of the input\
  \ contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed\
  \ that all a_i are distinct.\n\nOutput\n\nOutput three integers x, y, and m.\n\n\
  x and y are indices of the optimal chocolates to perform exchanges on. Your output\
  \ must satisfy 1 \u2264 x, y \u2264 n, x \u2260 y.\n\nm is the number of exchanges\
  \ needed to obtain a_x = a_y. We can show that m \u2264 10^9 for any pair of chocolates.\n\
  \nIf there are multiple solutions, output any.\n\nExamples\n\nInput\n\n\n5\n5 6\
  \ 7 8 9\n\n\nOutput\n\n\n2 5 5\n\n\nInput\n\n\n2\n4 8\n\n\nOutput\n\n\n1 2 2\n\n\
  Note\n\nIn the first test case, the minimum number of exchanges needed to exchange\
  \ a chocolate of type 6 to a chocolate of type 9 is 5. The sequence of exchanges\
  \ is as follows: 6 \u2192 2 \u2192 0 \u2192 1 \u2192 7 \u2192 9.\n\nIn the second\
  \ test case, the minimum number of exchanges needed to exchange a chocolate of type\
  \ 4 to a chocolate of type 8 is 2. The sequence of exchanges is as follows: 4 \u2192\
  \ 0 \u2192 8.\nA:"
question: "Christmas is coming, Icy has just received a box of chocolates from her\
  \ grandparents! The box contains n chocolates. The i-th chocolate has a non-negative\
  \ integer type a_i.\n\nIcy believes that good things come in pairs. Unfortunately,\
  \ all types of chocolates are distinct (all a_i are distinct). Icy wants to make\
  \ at least one pair of chocolates the same type. \n\nAs a result, she asks her grandparents\
  \ to perform some chocolate exchanges. Before performing any chocolate exchanges,\
  \ Icy chooses two chocolates with indices x and y (1 \u2264 x, y \u2264 n, x \u2260\
  \ y).\n\nIn a chocolate exchange, Icy's grandparents choose a non-negative integer\
  \ k, such that 2^k \u2265 a_x, and change the type of the chocolate x from a_x to\
  \ 2^k - a_x (that is, perform a_x := 2^k - a_x).\n\nThe chocolate exchanges will\
  \ be stopped only when a_x = a_y. Note that other pairs of equal chocolate types\
  \ do not stop the procedure.\n\nIcy's grandparents are smart, so they would choose\
  \ the sequence of chocolate exchanges that minimizes the number of exchanges needed.\
  \ Since Icy likes causing trouble, she wants to maximize the minimum number of exchanges\
  \ needed by choosing x and y appropriately. She wonders what is the optimal pair\
  \ (x, y) such that the minimum number of exchanges needed is maximized across all\
  \ possible choices of (x, y).\n\nSince Icy is not good at math, she hopes that you\
  \ can help her solve the problem.\n\nInput\n\nThe first line of the input contains\
  \ a single integer n (2 \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number of chocolates.\n\
  \nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264\
  \ a_i \u2264 10^9).\n\nIt is guaranteed that all a_i are distinct.\n\nOutput\n\n\
  Output three integers x, y, and m.\n\nx and y are indices of the optimal chocolates\
  \ to perform exchanges on. Your output must satisfy 1 \u2264 x, y \u2264 n, x \u2260\
  \ y.\n\nm is the number of exchanges needed to obtain a_x = a_y. We can show that\
  \ m \u2264 10^9 for any pair of chocolates.\n\nIf there are multiple solutions,\
  \ output any.\n\nExamples\n\nInput\n\n\n5\n5 6 7 8 9\n\n\nOutput\n\n\n2 5 5\n\n\n\
  Input\n\n\n2\n4 8\n\n\nOutput\n\n\n1 2 2\n\nNote\n\nIn the first test case, the\
  \ minimum number of exchanges needed to exchange a chocolate of type 6 to a chocolate\
  \ of type 9 is 5. The sequence of exchanges is as follows: 6 \u2192 2 \u2192 0 \u2192\
  \ 1 \u2192 7 \u2192 9.\n\nIn the second test case, the minimum number of exchanges\
  \ needed to exchange a chocolate of type 4 to a chocolate of type 8 is 2. The sequence\
  \ of exchanges is as follows: 4 \u2192 0 \u2192 8."
samples:
- " ```n = int(input())\na = list(map(int, input().split()))\nx, y = 0, 0\nm = 0\n\
  for i in range(n):\n    for j in range(i+1, n):\n        if a[i] > a[j]:\n     \
  \       x, y = i, j\n            m = a[i] - a[j]\n        elif a[i] < a[j]:\n  \
  \          x, y = j, i\n            m = a[j] - a[i]\n        else:\n           \
  \ x, y = i, j\n            m = 0\n            break\nprint(x+1, y+1, m)```\nQ:"
- " ```n = int(input())\na = list(map(int, input().split()))\nx, y = 0, 0\nm = float('inf')\n\
  \nfor i in range(n):\n    for j in range(i + 1, n):\n        if a[i] != a[j]:\n\
  \            k = 0\n            while (1 << k) < a[i]:\n                k += 1\n\
  \            while (1 << k) > a[j]:\n                k -= 1\n            m = min(m,\
  \ k + 1)\n            if m == k + 1:\n                x, y = i + 1, j + 1\n\nprint(x,\
  \ y, m)\n``` ```\n```\n```python\nn = int(input())\nk = int(input())\nA = int(input())\n\
  B = int(input())\n\nans = 0\nif k == 1:\n    print(A*(n-1))\n    exit(0)\n\nwhile\
  \ n > 1:\n    subt = (n % k)\n    ans += A * subt\n    n -= (n%k)\n    ans += min(A\
  \ * (n - (n // k)),B)\n    n //= k\n\nif n == 0:\n    ans -= A\n\nprint(ans)\n```\n\
  ```python\nq=abs;s=lambda t,i:0--t//3**i;m=lambda a,b,c,d:max([i for i in range(30)if\
  \ s(a,i)==s(c,i)and s(a,i)%3==2and 1<q(s(b,i)-s(d,i))]+[-1])+1\nfor _ in[0]*int(input()):\n\
  \    a,b,c,d=map(int,input().split());h=m(a,b,c,d);w=m(b,a,d,c)\n    if h==w==0:print(q(b-d)+q(a-c));continue\n\
  \    if h<w:h,a,b,c,d=w,b,a,d,c\n    i=3**h//3;x=2*i+1;g=a-(a-1)%(3*i)-1;a-=g;c-=g;print(q(b-d)+min(q(i-a)+q(i-c),q(x-a)+q(x-c)))\n\
  ```\n```python\nq=abs;s=lambda t,i:0--t//3**i;m=lambda a,b,c,d:max([i for i in range(30)if\
  \ s(a,i)==s(c,i)and s(a,i)%3==2and 1<q(s(b,i)-s(d,i))]+[-1])+1\nfor _ in[0]*int(input()):\n\
  \    a,b,c,d=map(int,input().split());h=m(a,b,c,d);w=m(b,a,d,c)\n    if h==w==0:print(q(b-d)+q(a-c));continue\n\
  \    if h<w:h,a,b,c,d=w,b,a,d,c\n    i=3**h//3;x=2*i+1;g=a-(a-1)%(3*i)-1;a-=g;c-=g;print(q(b-d)+min(q(i-a)+q(i-c),q(x-a)+q(x-c)))\n\
  ```\n```python\nn = int(input())\na = list(map(int, input().split()))\nx, y = 0,\
  \ 0\nm = float('inf')\n\nfor i in range(n):\n    for j in range(i + 1, n):\n   \
  \     if a[i] != a[j]:\n            k = 0\n            while (1 << k) < a[i]:\n\
  \                k += 1\n            while (1 << k) > a[j]:\n                k -=\
  \ 1\n            m = min(m, k + 1)\n            if m == k + 1:\n               \
  \ x, y = i + 1, j + 1\n\nprint(x, y, m)\n``` ```python\nn = int(input())\nk = int(input())\n\
  A = int(input())\nB = int(input())\n\nans = 0\nif k == 1:\n    print(A*(n-1))\n\
  \    exit(0)\n\nwhile n > 1:\n    subt = (n % k)\n    ans += A * subt\n    n -=\
  \ (n%k)\n    ans += min(A * (n - (n // k)),B)\n    n //= k\n\nif n == 0:\n    ans\
  \ -= A\n\nprint(ans)\n```\n```python\nq=abs;s=lambda t,i:0--t//3**i;m=lambda a,b,c,d:max([i\
  \ for i in range(30)if s(a,i)==s(c,i)and s(a,i)%3==2and 1<q(s(b,i)-s(d,i))]+[-1])+1\n\
  for _ in[0]*int(input()):\n    a,b,c,d=map(int,input().split());h=m(a,b,c,d);w=m(b,a,d,c)\n\
  \    if h==w==0:print(q"
test_cases:
  input:
  - '2

    4 8

    '
  - '5

    5 6 7 8 9

    '
  - '5

    0 3 1 2 4

    '
  - '16

    9260395 11200954 12565768 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    6820143 155663 11055052 2624039 6069297 9303161

    '
  - '16

    9260395 11200954 12565768 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    6820143 155663 11055052 2624039 6069297 9303161

    '
  - '5

    5 6 7 8 9

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 337 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    60253 56012 398 14855 99307 93134 50355 82806 42446 67694

    '
  - '13

    5 7 3 11 12 1 9 10 8 6 2 4 0

    '
  - '2

    7 9

    '
  - '10

    4 0 5 1 7 2 3 9 8 6

    '
  - '10

    60253 56012 398 14855 99307 93134 50355 82806 42446 67694

    '
  - '2

    8 6

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 337 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '8

    7133779 11010202 10352361 12948862 2541393 5835697 6588686 9297238

    '
  - '2

    0 1

    '
  - '2

    38 22

    '
  - '3

    7 9 23

    '
  - '2

    4 12

    '
  - '2

    1000000000 1

    '
  - '3

    23 9 7

    '
  - '13

    5 7 3 11 12 1 9 10 8 6 2 4 0

    '
  - '2

    9 7

    '
  - '3

    2 23 27

    '
  - '8

    7133779 11010202 10352361 12948862 2541393 5835697 6588686 9297238

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 776 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 854 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 232
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 464 512 404 457 195
    290 127 868 663 814 553 604 790 537 987 951 743 47 357 153 493 13 601 490 530

    '
  - '2

    4 8

    '
  - '10

    4 0 5 1 7 2 3 9 8 6

    '
  - '2

    529 302

    '
  - '17

    11 13 8 3 5 10 0 1 15 14 9 7 4 16 6 12 2

    '
  - '3

    2 23 27

    '
  - '32

    823660 11344325 5298940 6280378 15694184 3424995 2140609 13618136 8594136 11132237
    7864395 9307374 2549838 3716880 8109447 1989734 12950900 14771702 15314771 1563916
    15846364 10489467 3074912 7059563 8946652 5477362 5922853 16291445 3508052 16086447
    10352431 277463

    '
  - '17

    11 13 8 3 5 10 0 1 15 14 9 7 4 16 6 12 2

    '
  - '5

    0 3 1 2 4

    '
  - '50

    42 39 27 31 49 28 44 48 1 4 22 6 30 34 37 3 15 7 19 32 12 38 8 16 17 36 41 24
    13 40 9 26 2 47 25 18 46 23 20 5 10 33 29 21 43 45 0 11 35 14

    '
  - '3

    681 1365 2

    '
  - '2

    13 27

    '
  - '5

    0 3 1 2 7

    '
  - '16

    9260395 11200954 10608378 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    6820143 155663 11055052 2624039 6069297 9303161

    '
  - '16

    16638257 11200954 12565768 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    6820143 155663 11055052 2624039 6069297 9303161

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 337 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    60253 56012 39 14855 99307 93134 50355 82806 42446 67694

    '
  - '13

    5 7 3 11 12 1 9 13 8 6 2 4 0

    '
  - '2

    8 9

    '
  - '10

    4 0 5 1 2 2 3 9 8 6

    '
  - '2

    8 11

    '
  - '8

    7133779 11010202 10352361 23991520 2541393 5835697 6588686 9297238

    '
  - '2

    38 31

    '
  - '3

    7 8 23

    '
  - '2

    1 12

    '
  - '2

    1000000000 2

    '
  - '3

    23 9 4

    '
  - '13

    5 7 3 11 12 0 9 10 8 6 2 4 0

    '
  - '3

    2 23 47

    '
  - '8

    7133779 11010202 10352361 12948862 2541393 5835697 6588686 6023003

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 854 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 232
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 464 512 404 457 195
    290 127 868 663 814 553 604 790 537 987 951 743 47 357 153 493 13 601 490 530

    '
  - '2

    0 8

    '
  - '2

    55 302

    '
  - '17

    11 13 8 3 5 10 0 1 15 14 9 7 4 16 6 12 1

    '
  - '32

    823660 11344325 5298940 6280378 15694184 3424995 2140609 13618136 8594136 11132237
    7864395 9307374 2549838 3716880 8109447 1989734 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 16086447
    10352431 277463

    '
  - '50

    42 39 27 31 49 28 44 48 2 4 22 6 30 34 37 3 15 7 19 32 12 38 8 16 17 36 41 24
    13 40 9 26 2 47 25 18 46 23 20 5 10 33 29 21 43 45 0 11 35 14

    '
  - '3

    681 2226 2

    '
  - '2

    2 8

    '
  - '16

    9260395 16767348 10608378 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    6820143 155663 11055052 2624039 6069297 9303161

    '
  - '10

    4 0 5 1 2 2 3 18 8 6

    '
  - '3

    14 8 23

    '
  - '8

    7133779 11010202 10352361 12948862 2541393 5835697 5417755 6023003

    '
  - '50

    51 39 27 31 49 28 44 48 2 4 22 6 30 34 37 3 15 7 19 32 12 38 8 16 17 36 41 24
    13 40 9 26 2 47 25 18 46 23 20 5 10 33 29 21 43 45 0 11 35 14

    '
  - '2

    1000100000 0

    '
  - '3

    2 26 47

    '
  - '2

    55 210

    '
  - '3

    0 23 10

    '
  - '10

    117890 56012 39 14855 99307 57734 23806 82806 42446 67694

    '
  - '3

    2 28 47

    '
  - '32

    823660 11344325 5298940 6280378 7873014 3424995 2140609 13618136 8594136 9962713
    7864395 9307374 2549838 3716880 8109447 1681207 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 16086447
    10352431 277463

    '
  - '16

    16638257 4886794 12565768 9097948 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 155663 11055052 1496649 6069297 9303161

    '
  - '10

    4 0 5 2 2 2 3 23 8 1

    '
  - '2

    1000000010 1

    '
  - '13

    4 7 3 11 15 0 9 18 8 6 2 7 0

    '
  - '8

    6542239 10795715 10352361 12948862 2541393 5835697 5417755 11551316

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 1038 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 364
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 382 512 404 457 195
    290 127 868 663 814 553 604 790 537 987 951 743 47 357 153 493 13 601 490 888

    '
  - '3

    1435 2226 5

    '
  - '73

    565 927 81 544 585 496 409 648 13 630 162 641 55 241 988 985 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 342 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '32

    823660 11344325 5298940 6280378 7873014 3424995 2140609 13618136 8594136 9962713
    7864395 9307374 2549838 3716880 8109447 1681207 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 15693504
    2727101 277463

    '
  - '3

    1458 2226 5

    '
  - '10

    4 0 5 2 2 2 3 23 11 2

    '
  - '8

    7133779 11010202 3262522 23991520 405183 5893982 6978081 517542

    '
  - '3

    20 11 1

    '
  - '3

    3 13 47

    '
  - '3

    988 2226 5

    '
  - '16

    4477179 13145451 10608378 9097948 3699090 13208278 8853864 7073953 3971192 2777328
    2550426 155663 11055052 2624039 6069297 9303161

    '
  - '10

    48263 88439 39 14855 99307 57734 24157 82806 42446 5155

    '
  - '10

    4 0 5 2 2 2 3 16 11 2

    '
  - '8

    7133779 19122770 3262522 23991520 405183 5893982 6978081 517542

    '
  - '10

    48263 125906 39 14855 99307 57734 24157 82806 42446 5155

    '
  - '10

    60253 33465 398 18264 181327 63307 94397 73551 41593 76741

    '
  - '3

    1075 886 5

    '
  - '2

    1000000110 2

    '
  - '17

    11 1 12 4 5 10 0 1 31 14 9 22 7 28 6 12 1

    '
  - '16

    16638257 4328909 12565768 277309 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 226612 2598135 2913335 6788868 7165463

    '
  - '10

    60253 16556 402 18264 181327 63307 94397 73551 41593 76741

    '
  - '8

    355771 19122770 671484 23991520 405183 5893982 21910534 517542

    '
  - '32

    823660 11344325 5298940 6280378 7873014 3424995 1589335 13618136 8594136 9962713
    7864395 9307374 4114459 1234407 9129356 1412314 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 15693504
    2288548 277463

    '
  - '10

    3613 16556 402 18264 181327 63307 94397 73551 41593 76741

    '
  - '16

    4477179 3316125 10608378 9097948 3699090 25541413 8853864 7073953 3971192 2777328
    1517558 155663 12421314 3702335 6069297 17677765

    '
  - '10

    48263 125906 20 14855 99307 57734 1623 82806 29678 5155

    '
  - '8

    355771 22871265 671484 23991520 405183 5893982 21910534 539794

    '
  - '8

    302381 26323936 268712 25829512 2671217 5835697 5417755 11551316

    '
  - '16

    4477179 3316125 10608378 9097948 3699090 4700463 8853864 7073953 3971192 2777328
    1517558 155663 12421314 3702335 2868054 17677765

    '
  - '10

    84754 125906 20 14855 99307 57734 1623 82806 29678 5155

    '
  - '10

    6153 16556 402 18264 181327 24872 94397 73551 7248 76741

    '
  - '10

    60253 56012 398 14855 99307 93134 34743 82806 42446 67694

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '3

    0 23 27

    '
  - '17

    11 13 8 3 9 10 0 1 15 14 9 7 4 16 6 12 2

    '
  - '2

    13 18

    '
  - '5

    5 6 7 8 0

    '
  - '16

    16638257 11200954 12565768 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    6820143 155663 11055052 1177048 6069297 9303161

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 654 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    60253 56012 39 14855 99307 93134 23806 82806 42446 67694

    '
  - '2

    13 9

    '
  - '10

    60253 56012 398 14855 99307 63307 34743 82806 42446 67694

    '
  - '2

    16 9

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '8

    7133779 11010202 10352361 23991520 3338410 5835697 6588686 9297238

    '
  - '2

    32 31

    '
  - '2

    2 12

    '
  - '2

    1000100000 2

    '
  - '13

    5 7 3 11 15 0 9 10 8 6 2 4 0

    '
  - '3

    2 16 47

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 854 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 232
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 382 512 404 457 195
    290 127 868 663 814 553 604 790 537 987 951 743 47 357 153 493 13 601 490 530

    '
  - '2

    55 227

    '
  - '17

    11 13 8 4 5 10 0 1 15 14 9 7 4 16 6 12 1

    '
  - '3

    0 23 8

    '
  - '32

    823660 11344325 5298940 6280378 15694184 3424995 2140609 13618136 8594136 11132237
    7864395 9307374 2549838 3716880 8109447 1681207 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 16086447
    10352431 277463

    '
  - '17

    11 13 8 3 9 10 0 1 15 26 9 7 4 16 6 12 2

    '
  - '3

    681 2226 4

    '
  - '2

    13 8

    '
  - '2

    2 7

    '
  - '16

    9260395 16767348 10608378 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    2164023 155663 11055052 2624039 6069297 9303161

    '
  - '16

    16638257 11200954 12565768 9097948 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 155663 11055052 1177048 6069297 9303161

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 1678 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 654 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    60253 56012 39 14855 99307 57734 23806 82806 42446 67694

    '
  - '2

    19 8

    '
  - '10

    4 0 5 2 2 2 3 18 8 6

    '
  - '10

    60253 56012 398 14855 181327 63307 34743 82806 42446 67694

    '
  - '2

    16 11

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 641 55 241 988 985 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '8

    7133779 11010202 10352361 23991520 3338410 5835697 6978081 9297238

    '
  - '2

    2 31

    '
  - '3

    14 8 40

    '
  - '2

    0 12

    '
  - '13

    5 7 3 11 15 0 9 10 8 6 2 7 0

    '
  - '8

    7133779 10795715 10352361 12948862 2541393 5835697 5417755 6023003

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 854 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 364
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 382 512 404 457 195
    290 127 868 663 814 553 604 790 537 987 951 743 47 357 153 493 13 601 490 530

    '
  - '17

    11 13 8 4 5 10 0 1 26 14 9 7 4 16 6 12 1

    '
  - '32

    823660 11344325 5298940 6280378 7873014 3424995 2140609 13618136 8594136 11132237
    7864395 9307374 2549838 3716880 8109447 1681207 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 16086447
    10352431 277463

    '
  - '17

    11 12 8 3 9 10 0 1 15 26 9 7 4 16 6 12 2

    '
  - '50

    51 39 27 31 49 28 44 48 2 4 22 6 30 34 37 3 15 7 19 32 12 38 8 16 17 36 41 24
    13 40 9 26 2 14 25 18 46 23 20 5 10 33 29 21 43 45 0 11 35 14

    '
  - '3

    681 2226 5

    '
  - '2

    1 8

    '
  - '2

    1 7

    '
  - '16

    9260395 16767348 10608378 9097948 2148381 13208278 8853864 7915641 3971192 2777328
    2550426 155663 11055052 2624039 6069297 9303161

    '
  - '16

    16638257 11200954 12565768 9097948 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 155663 11055052 1496649 6069297 9303161

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 1678 525 393 914 27 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 654 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '2

    19 1

    '
  - '10

    4 0 5 2 2 2 3 18 8 1

    '
  - '10

    60253 56012 398 14855 181327 63307 63881 82806 42446 67694

    '
  - '2

    17 11

    '
  - '73

    565 927 81 544 585 496 409 892 13 630 162 641 55 241 988 985 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '8

    7133779 11010202 10352361 23991520 3338410 5893982 6978081 9297238

    '
  - '2

    2 9

    '
  - '3

    14 8 1

    '
  - '2

    1000100000 1

    '
  - '13

    5 7 3 11 15 0 9 18 8 6 2 7 0

    '
  - '8

    7133779 10795715 10352361 12948862 2541393 5835697 5417755 11551316

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 854 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 364
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 382 512 404 457 195
    290 127 868 663 814 553 604 790 537 987 951 743 47 357 153 493 13 601 490 888

    '
  - '2

    55 0

    '
  - '17

    11 1 8 4 5 10 0 1 26 14 9 7 4 16 6 12 1

    '
  - '17

    11 12 8 0 9 10 0 1 15 26 9 7 4 16 6 12 2

    '
  - '50

    51 39 27 31 79 28 44 48 2 4 22 6 30 34 37 3 15 7 19 32 12 38 8 16 17 36 41 24
    13 40 9 26 2 14 25 18 46 23 20 5 10 33 29 21 43 45 0 11 35 14

    '
  - '3

    919 2226 5

    '
  - '2

    1 9

    '
  - '16

    9260395 16767348 10608378 9097948 3699090 13208278 8853864 7915641 3971192 2777328
    2550426 155663 11055052 2624039 6069297 9303161

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 1678 525 393 914 27 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 91 392 245 654 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    117890 56012 39 14855 99307 57734 23806 82806 42446 5155

    '
  - '2

    19 2

    '
  - '10

    60253 56012 398 14855 181327 63307 63881 73551 42446 67694

    '
  - '2

    1 11

    '
  - '73

    565 927 81 544 585 496 409 648 13 630 162 641 55 241 988 985 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '8

    7133779 11010202 3262522 23991520 3338410 5893982 6978081 9297238

    '
  - '2

    1 10

    '
  - '3

    14 11 1

    '
  - '3

    3 28 47

    '
  - '2

    104 0

    '
  - '17

    11 1 8 4 5 10 0 1 26 14 9 13 4 16 6 12 1

    '
  - '32

    823660 11344325 5298940 6280378 7873014 3424995 2140609 13618136 8594136 9962713
    7864395 9307374 2549838 3716880 8109447 1681207 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 16086447
    2727101 277463

    '
  - '50

    51 39 27 31 79 28 44 48 2 4 22 6 30 34 37 3 15 7 19 32 12 38 8 16 17 36 41 24
    13 40 9 26 2 14 25 18 46 23 20 5 10 7 29 21 43 45 0 11 35 14

    '
  - '2

    1 15

    '
  - '16

    9260395 16767348 10608378 9097948 3699090 13208278 8853864 7073953 3971192 2777328
    2550426 155663 11055052 2624039 6069297 9303161

    '
  - '16

    16638257 4328909 12565768 9097948 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 155663 11055052 1496649 6069297 9303161

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 162 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 1678 525 392 914 27 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 91 392 245 654 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    48263 56012 39 14855 99307 57734 23806 82806 42446 5155

    '
  - '2

    17 2

    '
  - '10

    4 0 5 2 2 2 3 23 8 2

    '
  - '10

    60253 56012 398 14855 181327 63307 63881 73551 41593 67694

    '
  - '2

    2 11

    '
  - '8

    7133779 11010202 3262522 23991520 405183 5893982 6978081 9297238

    '
  - '2

    1 3

    '
  - '3

    13 11 1

    '
  - '2

    0000000010 1

    '
  - '3

    3 24 47

    '
  - '8

    6542239 10795715 10352361 12948862 1722937 5835697 5417755 11551316

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 1038 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 364
    991 508 693 296 997 223 649 566 716 703 305 204 307 746 635 382 512 404 457 195
    290 127 868 663 814 553 124 790 537 987 951 743 47 357 153 493 13 601 490 888

    '
  - '17

    11 1 8 4 5 10 0 1 26 14 9 13 7 16 6 12 1

    '
  - '2

    1 26

    '
  - '16

    4477179 16767348 10608378 9097948 3699090 13208278 8853864 7073953 3971192 2777328
    2550426 155663 11055052 2624039 6069297 9303161

    '
  - '16

    16638257 4328909 12565768 9097948 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 155663 11055052 1496649 6069297 7165463

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 178 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 1678 525 392 914 27 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 91 392 245 654 440 588 133 32 448 380 388
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '10

    48263 56012 39 14855 99307 57734 24157 82806 42446 5155

    '
  - '2

    5 2

    '
  - '10

    60253 56012 398 14855 181327 63307 94397 73551 41593 67694

    '
  - '2

    0 11

    '
  - '73

    565 927 81 544 585 496 409 648 13 630 5 641 55 241 988 985 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 342 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  - '2

    1 6

    '
  - '2

    0000001010 1

    '
  - '8

    6542239 10795715 3555270 12948862 1722937 5835697 5417755 11551316

    '
  - '100

    992 505 272 422 137 719 29 841 468 494 460 284 914 336 524 482 115 132 116 92
    577 666 560 36 700 366 899 21 939 265 975 967 165 964 783 539 241 712 683 412
    592 233 1038 471 384 999 97 257 563 811 714 375 860 11 901 981 850 133 160 364
    991 508 693 296 997 223 649 566 1094 703 305 204 307 746 635 382 512 404 457 195
    290 127 868 663 814 553 124 790 537 987 951 743 47 357 153 493 13 601 490 888

    '
  - '17

    11 1 8 4 5 10 0 1 26 14 9 13 7 28 6 12 1

    '
  - '32

    823660 11344325 5298940 6280378 7873014 3424995 2140609 13618136 8594136 9962713
    7864395 9307374 2549838 3716880 8109447 1412314 12950900 14771702 15314771 1563916
    15846364 10489467 3142426 7059563 8946652 5477362 5922853 16291445 3508052 15693504
    2727101 277463

    '
  - '2

    1 18

    '
  - '16

    16638257 4328909 12565768 9097948 2148381 13208278 13057646 7915641 3971192 2777328
    6820143 155663 2598135 1496649 6069297 7165463

    '
  - '73

    565 927 81 544 585 496 213 892 13 630 178 547 55 241 988 985 950 287 108 515 639
    104 225 836 799 797 313 1678 525 392 914 27 612 381 429 231 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 91 392 245 654 440 588 133 32 448 380 388
    46 378 382 495 126 832 607 288 858 746 627

    '
  - '2

    5 4

    '
  - '10

    60253 56012 398 14855 181327 63307 94397 73551 41593 76741

    '
  - '2

    0 13

    '
  - '73

    565 927 81 544 585 496 409 648 13 630 5 641 55 241 988 933 950 287 90 515 639
    104 225 836 799 797 313 992 525 393 914 26 612 381 429 342 398 775 528 674 472
    42 101 158 531 35 666 785 573 192 107 763 392 245 400 440 588 133 32 448 380 776
    729 378 382 495 126 832 607 288 858 746 627

    '
  output:
  - '2 1 2

    '
  - '5 2 5

    '
  - '2 4 3

    '
  - '1 2 35

    '
  - '1 2 35

    '
  - '5 2 5

    '
  - '40 1 14

    '
  - '1 2 21

    '
  - '4 8 7

    '
  - '2 1 1

    '
  - '3 10 5

    '
  - '1 2 21

    '
  - '2 1 3

    '
  - '40 1 14

    '
  - '8 1 32

    '
  - '2 1 1

    '
  - '2 1 4

    '
  - '3 1 2

    '
  - '2 1 1

    '
  - '1 2 14

    '
  - '1 3 2

    '
  - '4 8 7

    '
  - '1 2 1

    '
  - '2 3 6

    '
  - '8 1 32

    '
  - '39 43 18

    '
  - '2 1 2

    '
  - '3 10 5

    '
  - '2 1 11

    '
  - '1 6 7

    '
  - '2 3 6

    '
  - '10 30 31

    '
  - '1 6 7

    '
  - '2 4 3

    '
  - '45 1 11

    '
  - '2 1 18

    '
  - '2 1 3

    '
  - '2 4 3

    '
  - '2 1 35

    '
  - '2 4 33

    '
  - '40 1 14

    '
  - '2 1 21

    '
  - '5 4 6

    '
  - '2 1 4

    '
  - '3 10 5

    '
  - '2 1 5

    '
  - '8 1 32

    '
  - '2 1 6

    '
  - '2 3 5

    '
  - '2 1 3

    '
  - '2 1 14

    '
  - '3 1 5

    '
  - '8 4 7

    '
  - '2 3 6

    '
  - '4 1 30

    '
  - '39 43 18

    '
  - '2 1 1

    '
  - '2 1 10

    '
  - '6 1 7

    '
  - '10 30 31

    '
  - '45 1 11

    '
  - '2 1 16

    '
  - '2 1 2

    '
  - '4 1 34

    '
  - '3 8 6

    '
  - '3 1 6

    '
  - '4 7 32

    '
  - '7 45 10

    '
  - '2 1 13

    '
  - '3 2 7

    '
  - '2 1 9

    '
  - '2 3 7

    '
  - '2 8 20

    '
  - '3 2 6

    '
  - '19 30 30

    '
  - '4 6 32

    '
  - '8 1 5

    '
  - '2 1 18

    '
  - '4 8 7

    '
  - '7 4 32

    '
  - '39 22 17

    '
  - '2 1 15

    '
  - '36 1 15

    '
  - '19 4 29

    '
  - '3 1 10

    '
  - '8 9 6

    '
  - '4 1 28

    '
  - '2 1 7

    '
  - '3 2 5

    '
  - '2 1 11

    '
  - '4 2 34

    '
  - '8 2 22

    '
  - '9 1 5

    '
  - '2 1 31

    '
  - '8 7 19

    '
  - '4 1 19

    '
  - '2 1 12

    '
  - '2 1 17

    '
  - '12 1 8

    '
  - '6 16 32

    '
  - '2 1 19

    '
  - '2 1 29

    '
  - '19 15 30

    '
  - '2 10 19

    '
  - '4 6 31

    '
  - '8 1 18

    '
  - '7 1 28

    '
  - '7 8 31

    '
  - '4 15 30

    '
  - '5 1 19

    '
  - '10 2 19

    '
  - '2 1 21

    '
  - '40 1 14

    '
  - '2 3 6

    '
  - '6 1 7

    '
  - '2 1 6

    '
  - '2 1 5

    '
  - '2 4 33

    '
  - '40 1 14

    '
  - '2 1 21

    '
  - '2 1 4

    '
  - '2 1 21

    '
  - '2 1 4

    '
  - '40 1 14

    '
  - '8 1 32

    '
  - '2 1 3

    '
  - '2 1 3

    '
  - '2 1 14

    '
  - '8 4 7

    '
  - '3 1 5

    '
  - '39 43 18

    '
  - '2 1 6

    '
  - '6 1 7

    '
  - '2 3 5

    '
  - '10 30 31

    '
  - '6 1 7

    '
  - '2 1 16

    '
  - '2 1 4

    '
  - '2 1 3

    '
  - '4 1 34

    '
  - '2 4 33

    '
  - '40 1 14

    '
  - '2 1 21

    '
  - '2 1 5

    '
  - '3 8 6

    '
  - '2 1 21

    '
  - '2 1 5

    '
  - '40 1 14

    '
  - '8 1 32

    '
  - '2 1 3

    '
  - '3 1 5

    '
  - '2 1 2

    '
  - '8 4 7

    '
  - '4 7 32

    '
  - '39 43 18

    '
  - '6 1 7

    '
  - '10 30 31

    '
  - '6 1 7

    '
  - '7 45 10

    '
  - '2 1 16

    '
  - '2 1 2

    '
  - '2 1 1

    '
  - '4 1 34

    '
  - '2 4 33

    '
  - '40 1 14

    '
  - '2 1 3

    '
  - '3 8 6

    '
  - '2 1 21

    '
  - '2 1 5

    '
  - '40 1 14

    '
  - '8 1 32

    '
  - '2 1 4

    '
  - '2 1 3

    '
  - '2 1 14

    '
  - '8 4 7

    '
  - '4 7 32

    '
  - '39 43 18

    '
  - '2 1 4

    '
  - '6 1 7

    '
  - '6 1 7

    '
  - '7 45 10

    '
  - '2 1 13

    '
  - '2 1 2

    '
  - '4 1 34

    '
  - '40 1 14

    '
  - '2 8 20

    '
  - '2 1 5

    '
  - '2 1 21

    '
  - '2 1 3

    '
  - '40 1 14

    '
  - '8 1 32

    '
  - '2 1 4

    '
  - '2 1 6

    '
  - '2 3 6

    '
  - '2 1 3

    '
  - '6 1 7

    '
  - '19 30 30

    '
  - '7 45 10

    '
  - '2 1 1

    '
  - '4 1 34

    '
  - '4 6 32

    '
  - '40 1 14

    '
  - '2 8 20

    '
  - '2 1 4

    '
  - '8 1 5

    '
  - '2 1 21

    '
  - '2 1 5

    '
  - '8 1 32

    '
  - '2 1 1

    '
  - '2 1 3

    '
  - '2 1 4

    '
  - '2 3 6

    '
  - '7 4 32

    '
  - '39 22 17

    '
  - '6 1 7

    '
  - '2 1 4

    '
  - '4 6 32

    '
  - '4 6 32

    '
  - '40 1 14

    '
  - '2 8 20

    '
  - '2 1 4

    '
  - '2 1 21

    '
  - '2 1 4

    '
  - '36 1 15

    '
  - '2 1 3

    '
  - '2 1 4

    '
  - '7 4 32

    '
  - '39 22 17

    '
  - '6 1 7

    '
  - '19 4 29

    '
  - '2 1 4

    '
  - '4 6 32

    '
  - '40 1 14

    '
  - '2 1 4

    '
  - '2 1 21

    '
  - '2 1 3

    '
  - '36 1 15

    '
timeout: 4.0
