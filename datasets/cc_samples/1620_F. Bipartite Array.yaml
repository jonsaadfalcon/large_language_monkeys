prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nLook for the\
  \ Winner!\n\nThe citizens of TKB City are famous for their deep love in elections\
  \ and vote counting. Today they hold an election for the next chairperson of the\
  \ electoral commission. Now the voting has just been closed and the counting is\
  \ going to start. The TKB citizens have strong desire to know the winner as early\
  \ as possible during vote counting.\n\nThe election candidate receiving the most\
  \ votes shall be the next chairperson. Suppose for instance that we have three candidates\
  \ A, B, and C and ten votes. Suppose also that we have already counted six of the\
  \ ten votes and the vote counts of A, B, and C are four, one, and one, respectively.\
  \ At this moment, every candidate has a chance to receive four more votes and so\
  \ everyone can still be the winner. However, if the next vote counted is cast for\
  \ A, A is ensured to be the winner since A already has five votes and B or C can\
  \ have at most four votes at the end. In this example, therefore, the TKB citizens\
  \ can know the winner just when the seventh vote is counted.\n\nYour mission is\
  \ to write a program that receives every vote counted, one by one, identifies the\
  \ winner, and determines when the winner gets ensured.\n\nInput\n\nThe input consists\
  \ of at most 1500 datasets, each consisting of two lines in the following format.\n\
  \nn\nc1 c2 \u2026 cn\n\n\nn in the first line represents the number of votes, and\
  \ is a positive integer no greater than 100. The second line represents the n votes,\
  \ separated by a space. Each ci (1 \u2264 i \u2264 n) is a single uppercase letter,\
  \ i.e. one of 'A' through 'Z'. This represents the election candidate for which\
  \ the i-th vote was cast. Counting shall be done in the given order from c1 to cn.\n\
  \nYou should assume that at least two stand as candidates even when all the votes\
  \ are cast for one candidate.\n\nThe end of the input is indicated by a line containing\
  \ a zero.\n\nOutput\n\nFor each dataset, unless the election ends in a tie, output\
  \ a single line containing an uppercase letter c and an integer d separated by a\
  \ space: c should represent the election winner and d should represent after counting\
  \ how many votes the winner is identified. Otherwise, that is, if the election ends\
  \ in a tie, output a single line containing `TIE'.\n\nSample Input\n\n\n1\nA\n4\n\
  A A B B\n5\nL M N L N\n6\nK K K K K K\n6\nX X X Y Z X\n10\nA A A B A C A C C B\n\
  10\nU U U U U V V W W W\n0\n\n\nOutput for the Sample Input\n\n\nA 1\nTIE\nTIE\n\
  K 4\nX 5\nA 7\nU 8\n\n\n\n\n\n\nExample\n\nInput\n\n1\nA\n4\nA A B B\n5\nL M N L\
  \ N\n6\nK K K K K K\n6\nX X X Y Z X\n10\nA A A B A C A C C B\n10\nU U U U U V V\
  \ W W W\n0\n\n\nOutput\n\nA 1\nTIE\nTIE\nK 4\nX 5\nA 7\nU 8\nA: ```from collections\
  \ import Counter\nwhile True:\n    n = int(input())\n    if n == 0:\n        quit()\n\
  \    elif n == 1:\n         print(input(), 1)\n    else:\n        c = list(input().split())\n\
  \        h = [0 for i in range(26)]\n        flag = 0\n        for i in range(n):\n\
  \            h[ord(c[i])-65] += 1\n            if sorted(h)[-1] - sorted(h)[-2]\
  \ >= (n-i):\n                print(chr(h.index(max(h))+65), i+1)\n             \
  \   flag = 1\n                break\n        if flag == 0:\n            print('TIE')```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nNew Year is coming and\
  \ you are excited to know how many minutes remain before the New Year. You know\
  \ that currently the clock shows h hours and m minutes, where 0 \u2264 hh < 24 and\
  \ 0 \u2264 mm < 60. We use 24-hour time format!\n\nYour task is to find the number\
  \ of minutes before the New Year. You know that New Year comes when the clock shows\
  \ 0 hours and 0 minutes.\n\nYou have to answer t independent test cases.\n\nInput\n\
  \nThe first line of the input contains one integer t (1 \u2264 t \u2264 1439) \u2014\
  \ the number of test cases.\n\nThe following t lines describe test cases. The i-th\
  \ line contains the time as two integers h and m (0 \u2264 h < 24, 0 \u2264 m <\
  \ 60). It is guaranteed that this time is not a midnight, i.e. the following two\
  \ conditions can't be met at the same time: h=0 and m=0. It is guaranteed that both\
  \ h and m are given without leading zeros.\n\nOutput\n\nFor each test case, print\
  \ the answer on it \u2014 the number of minutes before the New Year.\n\nExample\n\
  \nInput\n\n\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\n\nOutput\n\n\n5\n60\n1439\n1180\n\
  1\nA: ```for _ in range(int(input())):\n    h,m = map(int,input().split())\n   \
  \ print((24*60)-(h*60+m))```\nQ: Write python code to solve the following coding\
  \ problem that obeys the constraints and passes the example test cases. The output\
  \ code needs to read from and write to standard IO. Please wrap your code answer\
  \ using ```:\nYou are given a permutation p consisting of n integers 1, 2, ...,\
  \ n (a permutation is an array where each element from 1 to n occurs exactly once).\n\
  \nLet's call an array a bipartite if the following undirected graph is bipartite:\n\
  \n  * the graph consists of n vertices; \n  * two vertices i and j are connected\
  \ by an edge if i < j and a_i > a_j. \n\n\n\nYour task is to find a bipartite array\
  \ of integers a of size n, such that a_i = p_i or a_i = -p_i, or report that no\
  \ such array exists. If there are multiple answers, print any of them.\n\nInput\n\
  \nThe first line contains a single integer t (1 \u2264 t \u2264 2 \u22C5 10^5) \u2014\
  \ the number of test cases.\n\nThe first line of each test case contains a single\
  \ integer n (1 \u2264 n \u2264 10^6) \u2014 the size of the permutation.\n\nThe\
  \ second line contains n integers p_1, p_2, ..., p_n.\n\nThe sum of n over all test\
  \ cases doesn't exceed 10^6.\n\nOutput\n\nFor each test case, print the answer in\
  \ the following format. If such an array a does not exist, print \"NO\" in a single\
  \ line. Otherwise, print \"YES\" in the first line and n integers \u2014 array a\
  \ in the second line.\n\nExample\n\nInput\n\n\n4\n3\n1 2 3\n6\n1 3 2 6 5 4\n4\n\
  4 1 3 2\n8\n3 2 1 6 7 8 5 4\n\n\nOutput\n\n\nYES\n1 2 3\nNO\nYES\n-4 -1 -3 -2\n\
  YES\n-3 -2 1 6 7 -8 -5 -4\nA:"
question: "You are given a permutation p consisting of n integers 1, 2, ..., n (a\
  \ permutation is an array where each element from 1 to n occurs exactly once).\n\
  \nLet's call an array a bipartite if the following undirected graph is bipartite:\n\
  \n  * the graph consists of n vertices; \n  * two vertices i and j are connected\
  \ by an edge if i < j and a_i > a_j. \n\n\n\nYour task is to find a bipartite array\
  \ of integers a of size n, such that a_i = p_i or a_i = -p_i, or report that no\
  \ such array exists. If there are multiple answers, print any of them.\n\nInput\n\
  \nThe first line contains a single integer t (1 \u2264 t \u2264 2 \u22C5 10^5) \u2014\
  \ the number of test cases.\n\nThe first line of each test case contains a single\
  \ integer n (1 \u2264 n \u2264 10^6) \u2014 the size of the permutation.\n\nThe\
  \ second line contains n integers p_1, p_2, ..., p_n.\n\nThe sum of n over all test\
  \ cases doesn't exceed 10^6.\n\nOutput\n\nFor each test case, print the answer in\
  \ the following format. If such an array a does not exist, print \"NO\" in a single\
  \ line. Otherwise, print \"YES\" in the first line and n integers \u2014 array a\
  \ in the second line.\n\nExample\n\nInput\n\n\n4\n3\n1 2 3\n6\n1 3 2 6 5 4\n4\n\
  4 1 3 2\n8\n3 2 1 6 7 8 5 4\n\n\nOutput\n\n\nYES\n1 2 3\nNO\nYES\n-4 -1 -3 -2\n\
  YES\n-3 -2 1 6 7 -8 -5 -4"
samples:
- " ```for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int,\
  \ input().split()))\n    a = [0] * n\n    for i in range(n):\n        if p[i] >\
  \ i+1:\n            a[i] = -p[i]\n        else:\n            a[i] = p[i]\n    if\
  \ all(a[i] <= a[i-1] for i in range(1, n)):\n        print(\"YES\")\n        print('\
  \ '.join(map(str, a)))\n    else:\n        print(\"NO\")````\nQ:"
- " ```for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int,\
  \ input().split()))\n    a = []\n    for i in range(n):\n        if p[i] > i+1:\n\
  \            a.append(-p[i])\n        else:\n            a.append(p[i])\n    if\
  \ all(a[i] > a[i-1] for i in range(1, n)):\n        print(\"YES\")\n        print('\
  \ '.join(map(str, a)))\n    else:\n        print(\"NO\")```\n\n\nQ:"
test_cases:
  input:
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 0 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 2

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 1

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 1

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 2 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 2 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 5

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 0 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 0

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 0

    8

    3 2 1 6 7 8 5 1

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 4 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    3 2 1 2 7 8 5 4

    '
  - '4

    3

    1 2 8

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 1

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 2 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 0

    8

    3 2 1 6 7 8 2 8

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 7

    '
  - '4

    3

    1 2 0

    6

    1 4 2 3 5 4

    4

    4 1 3 2

    8

    3 0 1 0 3 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    4 2 1 2 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 3 5 4

    4

    4 1 0 2

    8

    3 0 1 0 3 9 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 4

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    0 2 3

    6

    1 3 2 0 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 2 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 4

    8

    3 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 0 5 4

    4

    4 1 3 2

    8

    3 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 3 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 4 6 5 1

    4

    4 0 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 0 6 2 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 0

    8

    3 2 1 5 7 8 2 4

    '
  - '4

    3

    0 2 1

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 2 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 0

    8

    3 2 1 6 7 8 2 8

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 4 1 5 7

    '
  - '4

    3

    1 2 1

    6

    1 4 2 3 5 4

    4

    4 1 3 2

    8

    3 0 1 0 3 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    1 2 1 2 7 8 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 3

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 1 4 2

    8

    6 2 1 6 7 1 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    3 0 4 2

    8

    6 2 1 6 7 0 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    5 3 1 2 7 0 5 4

    '
  - '4

    3

    1 2 4

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 0 1 5 4

    '
  - '4

    3

    1 2 1

    6

    1 3 2 6 2 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 0

    6

    0 3 2 6 1 4

    4

    4 1 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 0

    8

    3 2 1 6 7 5 2 8

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    1 0 1 2 7 8 5 4

    '
  - '4

    3

    0 2 4

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 0 1 5 4

    '
  - '4

    3

    1 2 1

    6

    1 3 2 6 2 4

    4

    0 1 3 2

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    1 0 1 2 7 8 5 1

    '
  - '4

    3

    1 2 1

    6

    1 3 2 6 2 4

    4

    0 1 3 0

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    3 1 4 2

    8

    6 0 1 6 14 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 0 1 6 5 4

    4

    4 0 3 2

    8

    4 2 1 6 11 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 0 1 6 5 4

    4

    4 0 3 1

    8

    4 2 1 6 11 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 0 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 6 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 6 7 8 5 3

    '
  - '4

    3

    1 0 3

    6

    1 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 1

    8

    3 0 1 0 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    2 1 3 1

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 1

    8

    3 2 1 6 7 8 5 0

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 2 8 2 4

    '
  - '4

    3

    1 0 3

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 3 4

    4

    4 1 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 0

    8

    3 2 1 6 7 0 2 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 0

    8

    5 2 1 6 7 8 5 1

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 1

    4

    3 0 3 2

    8

    3 2 1 6 13 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 0 6 5 4

    4

    4 1 4 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    3 2 1 6 7 1 5 7

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 1 0 6 2 8 5 4

    '
  - '4

    3

    1 3 0

    6

    1 3 2 6 5 1

    4

    4 1 0 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 1 0

    8

    3 2 1 6 7 8 2 8

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 7 4 1 5 7

    '
  - '4

    3

    1 2 0

    6

    0 3 2 6 1 4

    4

    4 1 3 4

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 3 0

    8

    3 4 1 6 7 5 2 8

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 4

    4

    4 2 1 2

    8

    1 0 1 2 7 8 5 4

    '
  - '4

    3

    0 2 4

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    4 2 1 6 0 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 1 6 5 4

    4

    4 0 3 2

    8

    4 2 1 6 2 1 5 4

    '
  - '4

    3

    1 2 1

    6

    1 3 2 6 2 1

    4

    0 1 3 0

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 0

    4

    4 1 3 2

    8

    1 0 1 4 7 1 6 0

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 3 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    2 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 3 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 9 5 4

    4

    4 1 3 2

    8

    3 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    4 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 1

    4

    4 0 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 1

    8

    3 2 1 6 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    1 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 2 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 3 9 5 4

    '
  - '4

    3

    1 2 0

    6

    2 3 2 6 5 4

    4

    4 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 0 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 1

    4

    4 0 3 2

    8

    3 2 1 6 13 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 0 2

    8

    6 0 2 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    2 4 2 6 5 4

    4

    4 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 0 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 0

    '
  - '4

    3

    1 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 2 3 2

    8

    3 0 1 0 14 8 4 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 0

    '
  - '4

    3

    1 2 3

    6

    0 3 1 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 0

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    6 2 1 6 7 1 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    6 2 1 6 7 0 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    5 2 1 6 7 0 5 4

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    5 3 1 6 7 0 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 6 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 2 0 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 3 2

    8

    2 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 6 7 1 5 4

    '
  - '4

    3

    1 2 1

    6

    2 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    2 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 3 2

    8

    3 2 1 6 11 1 5 4

    '
  - '4

    3

    1 2 0

    6

    0 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 1

    4

    4 1 0 2

    8

    6 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 5 9 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 1

    4

    4 0 3 2

    8

    3 2 1 6 13 1 5 4

    '
  - '4

    3

    1 2 0

    6

    2 3 2 6 5 4

    4

    4 2 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 0 2

    8

    6 0 2 0 7 9 7 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 3 0

    '
  - '4

    3

    1 2 1

    6

    2 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 14 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 3 2

    8

    4 2 1 6 11 1 5 4

    '
  - '4

    3

    -1 2 1

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 2 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 1

    4

    4 1 3 2

    8

    3 2 1 4 7 1 3 0

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 1 4 2

    8

    6 2 1 6 14 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 1 6 5 4

    4

    4 0 3 2

    8

    4 2 1 6 11 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 0

    4

    4 1 3 2

    8

    3 2 1 4 7 1 3 0

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 1 4 2

    8

    6 0 1 6 14 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 1 6 5 4

    4

    4 -1 3 2

    8

    4 2 1 6 11 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 0

    4

    4 1 3 2

    8

    1 2 1 4 7 1 3 0

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 0

    4

    4 1 3 2

    8

    1 0 1 4 7 1 3 0

    '
  - '4

    3

    1 2 0

    6

    1 3 2 9 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 3 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 6 5 0

    4

    4 1 3 2

    8

    3 2 1 6 7 8 2 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    4 1 3 2

    8

    5 0 1 0 7 9 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 9 3 5 4

    '
  - '4

    3

    1 2 0

    6

    1 4 2 9 5 4

    4

    4 1 3 2

    8

    3 0 1 0 1 9 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 3 2

    8

    3 2 0 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 6 5 1

    4

    4 1 3 2

    8

    6 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 2 10 5 1

    4

    4 0 3 2

    8

    3 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 4 2

    8

    2 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    4 1 0 2

    8

    6 0 2 -1 7 9 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 0

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 0

    '
  - '4

    3

    1 2 0

    6

    1 4 2 3 5 4

    4

    4 1 0 2

    8

    3 0 1 0 5 9 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 1

    4

    4 1 3 2

    8

    0 2 1 6 7 1 5 0

    '
  - '4

    3

    1 2 3

    6

    -1 3 1 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 7 1 5 0

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    6 2 1 6 7 1 5 3

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 0 4 2

    8

    1 2 1 6 7 0 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 0 6 5 4

    4

    4 1 3 2

    8

    3 0 2 0 7 8 5 4

    '
  - '4

    3

    1 2 0

    6

    1 3 2 6 5 4

    4

    2 1 3 2

    8

    6 0 1 0 7 10 5 4

    '
  - '4

    3

    1 2 3

    6

    1 4 2 6 5 4

    4

    4 0 3 2

    8

    3 1 1 6 11 1 5 4

    '
  - '4

    3

    1 2 3

    6

    -1 3 2 6 5 1

    4

    4 1 3 2

    8

    3 2 1 6 3 1 5 4

    '
  - '4

    3

    1 2 0

    6

    -1 3 2 6 5 4

    4

    4 1 3 2

    8

    3 0 1 0 14 8 5 4

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 1

    4

    4 0 3 2

    8

    3 2 1 6 7 1 3 0

    '
  - '4

    3

    0 2 3

    6

    2 4 0 6 5 4

    4

    4 1 4 2

    8

    6 2 1 6 7 1 5 4

    '
  - '4

    3

    1 2 0

    6

    0 3 0 6 5 1

    4

    4 1 3 2

    8

    3 2 1 4 7 1 3 0

    '
  - '4

    3

    0 2 3

    6

    1 4 0 6 5 4

    4

    4 1 4 2

    8

    6 2 1 6 14 2 5 4

    '
  - '4

    3

    1 2 3

    6

    1 3 2 11 5 4

    4

    4 2 3 2

    8

    1 0 1 2 7 8 5 1

    '
  - '4

    3

    1 2 3

    6

    0 3 0 6 5 0

    4

    4 0 3 2

    8

    3 2 1 4 7 1 3 0

    '
  - '4

    3

    1 2 3

    6

    0 1 0 6 5 0

    4

    4 1 3 2

    8

    1 2 1 4 7 1 3 0

    '
  - '4

    3

    1 2 3

    6

    1 0 1 6 5 4

    4

    4 0 3 2

    8

    4 2 1 6 12 1 5 4

    '
  output:
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 0 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    YES

    -3 0 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    YES

    -1 -3 -2 0 5 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 2

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 1

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 1

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    YES

    0 -3 2 6 2 4

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 2 8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 5

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 0

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 0

    YES

    -3 -2 1 6 7 -8 -5 1

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    YES

    -3 -2 1 2 7 -8 -5 4

    '
  - 'YES

    1 2 8

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -2 -3 2

    NO

    '
  - 'YES

    -1 -2 1

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 0

    YES

    -3 -2 1 6 7 -8 -2 8

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 -7 1 5 7

    '
  - 'YES

    -1 -2 0

    YES

    -1 -4 2 3 5 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    YES

    -4 -2 1 2 7 -8 -5 4

    '
  - 'YES

    -1 -2 0

    YES

    -1 -4 2 3 5 4

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    1 2 4

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    0 2 3

    YES

    -1 -3 -2 0 5 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    YES

    -1 -3 2 6 2 4

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 1 3 4

    NO

    '
  - 'YES

    -1 -2 0

    YES

    -1 -4 -2 0 5 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 -3 1 5 4

    '
  - 'YES

    1 2 3

    YES

    0 3 4 -6 -5 1

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 0 -6 2 8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 0

    YES

    -3 -2 1 5 7 -8 2 4

    '
  - 'YES

    0 -2 1

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 0

    YES

    -3 -2 1 6 7 -8 -2 8

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 -4 1 5 7

    '
  - 'YES

    -1 -2 1

    YES

    -1 -4 2 3 5 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 3

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 -1 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -3 0 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    YES

    -5 -3 1 2 -7 0 5 4

    '
  - 'YES

    1 2 4

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 0 1 -5 4

    '
  - 'YES

    -1 -2 1

    YES

    -1 -3 2 6 2 4

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    -1 -2 0

    YES

    0 -3 2 6 1 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 0

    YES

    -3 -2 1 6 -7 -5 -2 8

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    YES

    -1 0 1 2 7 -8 -5 4

    '
  - 'YES

    0 2 4

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 0 1 -5 4

    '
  - 'YES

    -1 -2 1

    YES

    -1 -3 2 6 2 4

    YES

    0 1 -3 2

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    YES

    -1 0 1 2 7 -8 -5 1

    '
  - 'YES

    -1 -2 1

    YES

    -1 -3 2 6 2 4

    YES

    0 1 -3 0

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    0 2 3

    NO

    YES

    -3 -1 -4 2

    NO

    '
  - 'YES

    1 2 3

    YES

    -1 0 1 -6 -5 4

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    YES

    -1 0 1 -6 -5 4

    YES

    -4 0 -3 1

    NO

    '
  - 'YES

    1 2 3

    YES

    -1 0 2 -6 -5 4

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -6 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    YES

    -3 0 1 6 7 -8 -5 3

    '
  - 'YES

    -1 0 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 1

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 1

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 1

    YES

    -3 -2 1 6 7 -8 -5 0

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 2 8 2 4

    '
  - 'YES

    -1 0 3

    NO

    YES

    -4 -2 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    -1 -2 0

    YES

    -1 -3 2 6 3 4

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 0

    YES

    -3 -2 1 6 -7 0 2 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 0

    YES

    -5 -2 1 6 7 -8 -5 1

    '
  - 'YES

    1 2 3

    NO

    YES

    -3 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    YES

    -3 -2 1 6 -7 1 5 7

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -1 0 -6 2 8 -5 4

    '
  - 'YES

    -1 -3 0

    NO

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -1 0

    YES

    -3 -2 1 6 7 -8 -2 8

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -7 -4 1 5 7

    '
  - 'YES

    -1 -2 0

    YES

    0 -3 2 6 1 4

    YES

    -4 1 3 4

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 0

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 1 2

    YES

    -1 0 1 2 7 -8 -5 4

    '
  - 'YES

    0 2 4

    NO

    YES

    -4 -1 -3 2

    YES

    -4 -2 -1 -6 0 1 -5 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    YES

    -4 -2 -1 -6 -2 1 5 4

    '
  - 'YES

    -1 -2 1

    YES

    -1 -3 2 6 -2 1

    YES

    0 1 -3 0

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -1 0 1 4 -7 -1 6 0

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 1

    YES

    -3 -2 1 6 7 -8 -5 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -2 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 0 1 6 7 -8 -5 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 1

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -2 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 1

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    -1 -2 1

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 -1 -4 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 -1 -4 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 1 6 7 -8 2 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    YES

    -1 -4 2 3 5 4

    YES

    -4 -1 0 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 0 -4 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -2 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    YES

    -3 -2 -1 -6 -3 1 5 4

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 -1 -4 2

    NO

    '
  - 'YES

    -1 -2 0

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    0 2 3

    NO

    YES

    -4 -1 -4 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -2 -3 2

    YES

    -1 0 1 2 7 -8 -5 1

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 0 -3 2

    NO

    '
  - 'YES

    1 2 3

    NO

    YES

    -4 -1 -3 2

    NO

    '
  - 'YES

    1 2 3

    YES

    -1 0 1 -6 -5 4

    YES

    -4 0 -3 2

    NO

    '
timeout: 2.0
