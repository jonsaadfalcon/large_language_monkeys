prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nAtCoder currently\
  \ hosts three types of contests: ABC, ARC, and AGC. As the number of users has grown,\
  \ in order to meet the needs of more users, AtCoder has decided to increase the\
  \ number of contests to 26 types, from AAC to AZC. For convenience, we number these\
  \ 26 types as type 1 through type 26. AtCoder wants to schedule contests for D days\
  \ so that user satisfaction is as high as possible. For every day, AtCoder will\
  \ hold exactly one contest, and each contest will end on that day. The satisfaction\
  \ is calculated as follows.\n\n* The satisfaction at the beginning of day 1 is 0.\
  \ Satisfaction can be negative.\n* Holding contests increases satisfaction. The\
  \ amount of increase will vary depending on a variety of factors. Specifically,\
  \ we know in advance that holding a contest of type i on day d will increase the\
  \ satisfaction by s_{d,i}.\n* If a particular type of contest is not held for a\
  \ while, the satisfaction decreases. Each contest type i has an integer c_i, and\
  \ at the end of each day d=1,2,...,D, the satisfaction decreases as follows. Let\
  \ \\mathrm{last}(d,i) be the last day before day d (including d) on which a contest\
  \ of type i was held. If contests of type i have never been held yet, we define\
  \ \\mathrm{last}(d,i)=0. At the end of day d, the satisfaction decreases by \\sum\
  \ _{i=1}^{26}c_i \\times (d-\\mathrm{last}(d,i)).\n\n\n\nPlease schedule contests\
  \ on behalf of AtCoder. If the satisfaction at the end of day D is S, you will get\
  \ a score of \\max(10^6 + S, 0). There are 50 test cases, and the score of a submission\
  \ is the total scores for each test case. You can make submissions multiple times,\
  \ and the highest score among your submissions will be your score.\n\nConstraints\n\
  \n* D = 365\n* Each c_i is an integer satisfying 0\\leq c_i \\leq 100.\n* Each s_{d,i}\
  \ is an integer satisfying 0\\leq s_{d,i} \\leq 20000.\n\nInput\n\nInput is given\
  \ from Standard Input in the following format:\n\n\nD\nc_1 c_2 \\cdots c_{26}\n\
  s_{1,1} s_{1,2} \\cdots s_{1,26}\n\\vdots\ns_{D,1} s_{D,2} \\cdots s_{D,26}\n\n\n\
  Output\n\nLet t_d (1\\leq t_d \\leq 26) be the type of the contest that will be\
  \ held at day d. Print D integers t_d to Standard Output in the following format:\n\
  \n\nt_1\nt_2\n\\vdots\nt_D\n\n\nAny output that does not follow the above format\
  \ may result in ~~0 points~~ WA for that test case.\n\nInput Generation\n\nEach\
  \ integer c_i and s_{d,i} is generated independently and uniformly at random from\
  \ the integers in the range described in the problem statement.\n\nExample\n\nInput\n\
  \n5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n\
  19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396\
  \ 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855\
  \ 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277\
  \ 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563\
  \ 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921\
  \ 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395\
  \ 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197\
  \ 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922\
  \ 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n\n\nOutput\n\
  \n1\n17\n13\n14\n13\nA: ```from random import randint\nfor i in range(365):\n  print(randint(1,26))```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nThe 9-th grade student\
  \ Gabriel noticed a caterpillar on a tree when walking around in a forest after\
  \ the classes. The caterpillar was on the height h1 cm from the ground. On the height\
  \ h2 cm (h2 > h1) on the same tree hung an apple and the caterpillar was crawling\
  \ to the apple.\n\nGabriel is interested when the caterpillar gets the apple. He\
  \ noted that the caterpillar goes up by a cm per hour by day and slips down by b\
  \ cm per hour by night.\n\nIn how many days Gabriel should return to the forest\
  \ to see the caterpillar get the apple. You can consider that the day starts at\
  \ 10 am and finishes at 10 pm. Gabriel's classes finish at 2 pm. You can consider\
  \ that Gabriel noticed the caterpillar just after the classes at 2 pm.\n\nNote that\
  \ the forest is magic so the caterpillar can slip down under the ground and then\
  \ lift to the apple.\n\nInput\n\nThe first line contains two integers h1, h2 (1\
  \ \u2264 h1 < h2 \u2264 105) \u2014 the heights of the position of the caterpillar\
  \ and the apple in centimeters.\n\nThe second line contains two integers a, b (1\
  \ \u2264 a, b \u2264 105) \u2014 the distance the caterpillar goes up by day and\
  \ slips down by night, in centimeters per hour.\n\nOutput\n\nPrint the only integer\
  \ k \u2014 the number of days Gabriel should wait to return to the forest and see\
  \ the caterpillar getting the apple.\n\nIf the caterpillar can't get the apple print\
  \ the only integer  - 1.\n\nExamples\n\nInput\n\n10 30\n2 1\n\n\nOutput\n\n1\n\n\
  \nInput\n\n10 13\n1 1\n\n\nOutput\n\n0\n\n\nInput\n\n10 19\n1 2\n\n\nOutput\n\n\
  -1\n\n\nInput\n\n1 50\n5 4\n\n\nOutput\n\n1\n\nNote\n\nIn the first example at 10\
  \ pm of the first day the caterpillar gets the height 26. At 10 am of the next day\
  \ it slips down to the height 14. And finally at 6 pm of the same day the caterpillar\
  \ gets the apple.\n\nNote that in the last example the caterpillar was slipping\
  \ down under the ground and getting the apple on the next day.\nA: ```#! /usr/bin/env\
  \ python3\n'''\n' Title:\t\n' Author:\tCheng-Shih, Wong\n' Date:\t\t\n'''\n\nimport\
  \ math\n\nh1, h2 = map(int, input().split())\na, b = map(int, input().split())\n\
  \nif h1+a*8 >= h2: print(0)\nelif a <= b: print(-1)\nelse:\n\tprint( math.ceil((h2-h1-8*a)/(12*(a-b)))\
  \ )```\nQ: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nThere are three\
  \ sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly\
  \ one of them into two pieces in such a way that: \n\n  * both pieces have positive\
  \ (strictly greater than 0) integer length; \n  * the total length of the pieces\
  \ is equal to the original length of the stick; \n  * it's possible to construct\
  \ a rectangle from the resulting four sticks such that each stick is used as exactly\
  \ one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine\
  \ if it's possible to do that.\n\nInput\n\nThe first line contains a single integer\
  \ t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of\
  \ each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8)\
  \ \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\"\
  \ if it's possible to break one of the sticks into two pieces with positive integer\
  \ length in such a way that it's possible to construct a rectangle from the resulting\
  \ four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case\
  \ you want (so, for example, the strings yEs, yes, Yes and YES are all recognized\
  \ as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\
  \n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick\
  \ can be broken into parts of length 1 and 5. We can construct a rectangle with\
  \ opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick\
  \ of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made\
  \ into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1,\
  \ 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase,\
  \ the second stick can be broken into parts of length 2 and 2. The resulting rectangle\
  \ has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the\
  \ third stick can be broken into parts of length 2 and 2. The resulting rectangle\
  \ has opposite sides 2 and 5.\nA:"
question: "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are\
  \ asked to break exactly one of them into two pieces in such a way that: \n\n  *\
  \ both pieces have positive (strictly greater than 0) integer length; \n  * the\
  \ total length of the pieces is equal to the original length of the stick; \n  *\
  \ it's possible to construct a rectangle from the resulting four sticks such that\
  \ each stick is used as exactly one of its sides. \n\n\n\nA square is also considered\
  \ a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line\
  \ contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\
  \nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264\
  \ l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase,\
  \ print \"YES\" if it's possible to break one of the sticks into two pieces with\
  \ positive integer length in such a way that it's possible to construct a rectangle\
  \ from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every\
  \ letter in any case you want (so, for example, the strings yEs, yes, Yes and YES\
  \ are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n\
  2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase,\
  \ the first stick can be broken into parts of length 1 and 5. We can construct a\
  \ rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking\
  \ the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't\
  \ be made into a rectangle. Breaking the stick of length 5 can produce results 2,\
  \ 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase,\
  \ the second stick can be broken into parts of length 2 and 2. The resulting rectangle\
  \ has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the\
  \ third stick can be broken into parts of length 2 and 2. The resulting rectangle\
  \ has opposite sides 2 and 5."
samples:
- " ``````python\nfor _ in range(int(input())):\n    l1, l2, l3 = map(int, input().split())\n\
  \    if l1+l2+l3 != 2*(l1+l2+l3-1):\n        print(\"NO\")\n    else:\n        print(\"\
  YES\")```````\nQ:"
- " ``````python\nimport sys\nfor _ in range(int(input())):\n    l1, l2, l3 = map(int,\
  \ input().split())\n    if l1+l2+l3 != 0:\n        print(\"NO\")\n    elif l1 >\
  \ l2 and l1 > l3:\n        if l1 % 2 == 0:\n            print(\"YES\")\n       \
  \ else:\n            print(\"NO\")\n    elif l2 > l1 and l2 > l3:\n        if l2\
  \ % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\"\
  )\n    elif l3 > l1 and l3 > l2:\n        if l3 % 2 == 0:\n            print(\"\
  YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"YES\"\
  )\n````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````"
test_cases:
  input:
  - '4

    6 1 5

    2 5 2

    2 4 2

    5 5 4

    '
  - '2

    1 2 3

    2 2 4

    '
  - '1

    1 98 99

    '
  - '3

    1 1 1

    2 1 3

    5 6 7

    '
  - '6

    2 2 4

    1 1 2

    3 5 6

    1 2 3

    6 7 8

    10 10 20

    '
  - '4

    6 1 5

    2 5 2

    2 4 2

    7 101 108

    '
  - '1

    100000 100000 100000

    '
  - '1

    12344 1 1

    '
  - '68

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    '
  - '2

    1 2 3

    4 5 6

    '
  - '2

    1 3 3

    2 2 4

    '
  - '1

    1 98 186

    '
  - '3

    1 1 1

    2 1 2

    5 6 7

    '
  - '6

    2 2 4

    1 1 2

    3 5 6

    1 2 3

    6 7 8

    10 11 20

    '
  - '4

    6 1 10

    2 5 2

    2 4 2

    7 101 108

    '
  - '1

    100000 100000 100100

    '
  - '68

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 1

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    '
  - '2

    1 1 3

    4 5 6

    '
  - '4

    6 1 5

    2 5 2

    2 4 2

    5 9 4

    '
  - '4

    6 1 10

    2 5 2

    2 4 2

    7 101 179

    '
  - '68

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    2 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 1

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    '
  - '2

    2 1 3

    1 5 6

    '
  - '4

    6 1 10

    2 6 2

    2 4 2

    7 101 144

    '
  - '3

    2 1 1

    2 1 2

    3 8 12

    '
  - '68

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 3

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    1 1 2

    '
  - '2

    1 2 3

    4 8 6

    '
  - '3

    1 1 1

    1 1 2

    5 6 12

    '
  - '4

    6 1 10

    2 6 2

    3 4 2

    7 101 144

    '
  - '3

    2 1 1

    1 1 2

    5 6 12

    '
  - '6

    2 2 6

    1 1 2

    3 10 6

    2 2 3

    6 7 8

    10 11 20

    '
  - '3

    3 1 1

    2 1 2

    1 8 9

    '
  - '6

    2 2 4

    1 1 1

    3 5 18

    1 2 3

    6 7 8

    10 11 20

    '
  - '4

    1 1 10

    2 6 2

    3 4 2

    7 101 144

    '
  - '3

    3 1 1

    2 2 2

    1 8 9

    '
  - '1

    12344 2 1

    '
  - '1

    2 98 186

    '
  - '3

    1 1 1

    2 1 2

    5 6 12

    '
  - '6

    2 2 4

    1 1 2

    3 10 6

    1 2 3

    6 7 8

    10 11 20

    '
  - '1

    100010 100000 100100

    '
  - '1

    20237 2 1

    '
  - '2

    1 1 3

    1 5 6

    '
  - '1

    2 98 239

    '
  - '3

    1 1 1

    2 1 2

    5 8 12

    '
  - '4

    6 1 10

    2 5 2

    2 4 2

    7 101 144

    '
  - '1

    100110 100000 100100

    '
  - '1

    20237 4 1

    '
  - '1

    1 98 239

    '
  - '3

    1 1 1

    2 1 2

    3 8 12

    '
  - '1

    100110 101000 100100

    '
  - '1

    20237 3 1

    '
  - '1

    100111 101000 100100

    '
  - '1

    21851 3 1

    '
  - '3

    2 1 1

    2 1 2

    1 8 12

    '
  - '1

    100011 101000 100100

    '
  - '1

    21851 3 2

    '
  - '1

    100011 101001 100100

    '
  - '1

    100011 101001 100000

    '
  - '1

    110011 101001 100000

    '
  - '1

    110011 001001 100000

    '
  - '1

    110011 001001 110000

    '
  - '1

    100011 001001 110000

    '
  - '1

    100011 001001 111000

    '
  - '1

    100011 001101 111000

    '
  - '1

    100011 001101 111001

    '
  - '1

    100011 001101 111011

    '
  - '1

    100011 001111 111011

    '
  - '1

    100011 001110 111011

    '
  - '1

    110011 001110 111011

    '
  - '1

    110011 001010 111011

    '
  - '1

    110011 001011 111011

    '
  - '1

    110011 000011 111011

    '
  - '1

    110011 000011 111111

    '
  - '1

    110011 000011 011111

    '
  - '1

    110011 000011 011101

    '
  - '1

    110011 100011 011101

    '
  - '1

    110011 100011 011100

    '
  - '1

    110011 100011 011000

    '
  - '1

    110011 100011 001100

    '
  - '1

    010011 100011 001100

    '
  - '1

    010111 100011 001100

    '
  - '1

    010111 100011 001000

    '
  - '1

    010111 000011 001000

    '
  - '1

    010111 000011 001001

    '
  - '1

    010111 000010 001001

    '
  - '1

    010111 100010 001001

    '
  - '1

    010111 100010 000001

    '
  - '1

    010111 000010 000001

    '
  - '1

    010111 000010 000011

    '
  - '1

    000111 000010 000011

    '
  - '1

    000111 000010 100011

    '
  - '1

    000111 000010 101011

    '
  - '1

    000111 000010 101010

    '
  - '1

    000111 000011 101010

    '
  - '1

    000111 100011 101010

    '
  - '1

    000111 101011 101010

    '
  - '1

    000111 101001 101010

    '
  - '1

    010111 101001 101010

    '
  - '1

    010111 101101 101010

    '
  - '1

    010111 001101 101010

    '
  - '1

    010111 001101 101110

    '
  - '1

    010101 001101 101110

    '
  - '1

    010101 001101 101010

    '
  - '1

    110101 001101 101010

    '
  - '1

    110101 001101 101110

    '
  - '1

    110101 101101 101110

    '
  - '1

    110111 101101 101110

    '
  - '1

    110111 101100 101110

    '
  - '1

    110111 101110 101110

    '
  - '1

    110111 101110 101010

    '
  - '1

    111111 101110 101010

    '
  - '1

    111111 101110 101011

    '
  - '1

    111111 101110 100011

    '
  - '1

    111111 101110 100010

    '
  - '1

    011111 101110 100010

    '
  - '1

    010111 101110 100010

    '
  - '1

    010111 101100 100010

    '
  - '1

    010111 111110 100010

    '
  - '1

    010111 011110 100010

    '
  - '1

    000111 011110 100010

    '
  - '1

    100111 011110 100010

    '
  - '1

    001111 011110 100010

    '
  - '1

    001101 011110 100010

    '
  - '1

    000101 011110 100010

    '
  - '1

    000101 011111 100010

    '
  - '1

    000101 011101 100010

    '
  - '1

    000101 111101 100010

    '
  - '1

    000001 111101 100010

    '
  - '1

    000001 111101 100011

    '
  - '1

    000001 111101 100000

    '
  - '1

    000001 111001 100000

    '
  - '1

    000001 111001 100010

    '
  - '1

    000001 111001 000010

    '
  - '1

    000011 111001 000010

    '
  - '1

    000011 111001 000011

    '
  - '1

    100011 111001 000011

    '
  - '1

    100011 111001 000010

    '
  - '1

    100011 111101 000010

    '
  - '1

    100011 111101 001010

    '
  - '1

    100011 111100 001010

    '
  - '1

    100011 110100 001010

    '
  - '1

    100011 111100 011010

    '
  - '1

    100011 110100 011010

    '
  - '1

    101011 110100 011010

    '
  - '1

    101111 110100 011010

    '
  - '1

    101111 110100 011110

    '
  - '1

    001111 110100 011110

    '
  - '1

    101111 010100 011110

    '
  - '1

    101111 010100 011010

    '
  - '1

    101111 010000 011010

    '
  - '1

    101111 010000 111010

    '
  - '1

    101111 010000 111011

    '
  - '1

    001111 010000 111011

    '
  - '1

    001111 010000 111001

    '
  - '2

    1 4 3

    2 2 4

    '
  - '1

    1 98 108

    '
  - '3

    1 1 1

    2 1 4

    5 6 7

    '
  - '1

    100010 100000 100000

    '
  - '1

    2465 1 1

    '
  - '4

    6 2 5

    2 5 2

    2 4 2

    5 5 4

    '
  - '2

    1 3 3

    4 2 4

    '
  - '1

    3 98 186

    '
  - '3

    2 1 1

    2 1 2

    5 6 7

    '
  - '6

    2 2 4

    1 1 2

    3 5 10

    1 2 3

    6 7 8

    10 11 20

    '
  - '4

    6 1 10

    2 3 2

    2 4 2

    7 101 108

    '
  - '1

    100010 100001 100000

    '
  - '1

    19251 2 1

    '
  - '2

    1 1 3

    4 5 1

    '
  - '4

    9 1 5

    2 5 2

    2 4 2

    5 9 4

    '
  - '6

    2 2 6

    1 1 2

    3 10 6

    1 2 3

    6 7 8

    10 11 20

    '
  - '4

    10 1 10

    2 5 2

    2 4 2

    7 101 179

    '
  - '1

    110010 100000 100100

    '
  - '1

    8323 2 1

    '
  - '1

    3 98 239

    '
  - '3

    1 1 1

    2 1 4

    5 8 12

    '
  - '4

    6 1 9

    2 5 2

    2 4 2

    7 101 144

    '
  - '1

    101110 100000 100100

    '
  - '1

    21283 4 1

    '
  - '2

    2 1 3

    1 5 5

    '
  - '1

    1 98 468

    '
  - '1

    110110 100000 100100

    '
  - '1

    35510 2 1

    '
  - '3

    2 1 1

    2 1 2

    3 8 17

    '
  - '1

    110111 101000 100100

    '
  - '1

    12451 3 1

    '
  - '3

    3 1 1

    2 1 2

    1 8 12

    '
  - '1

    100001 101000 100100

    '
  - '1

    21851 2 2

    '
  - '1

    100010 101000 100100

    '
  - '1

    100011 100001 100000

    '
  - '1

    110011 001001 100010

    '
  - '1

    110011 000001 110000

    '
  - '1

    101011 001001 110000

    '
  - '1

    110011 001001 111000

    '
  - '1

    101011 001101 111000

    '
  - '1

    100011 011101 111001

    '
  - '1

    100001 001101 111011

    '
  - '1

    100011 001111 011011

    '
  - '1

    101011 001110 111011

    '
  - '1

    110011 001110 110011

    '
  - '1

    110111 001010 111011

    '
  - '1

    010011 001011 111011

    '
  - '1

    110111 000011 111011

    '
  - '1

    110011 010011 011111

    '
  - '1

    010011 000011 011111

    '
  - '1

    110011 010011 011101

    '
  - '1

    110010 100011 011101

    '
  - '1

    110011 100011 011110

    '
  - '1

    111011 100011 011000

    '
  - '1

    110011 000011 001100

    '
  - '1

    010110 100011 001100

    '
  output:
  - 'YES

    NO

    YES

    YES

    '
  - 'YES

    YES

    '
  - 'YES

    '
  - 'NO

    YES

    NO

    '
  - 'YES

    YES

    NO

    YES

    NO

    YES

    '
  - 'YES

    NO

    YES

    YES

    '
  - 'YES

    '
  - 'YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    '
  - 'NO

    YES

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    '
  - 'NO

    NO

    YES

    YES

    '
  - 'YES

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    NO

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'NO

    NO

    '
  - 'YES

    NO

    YES

    YES

    '
  - 'NO

    NO

    YES

    NO

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    NO

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    NO

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    YES

    '
  - 'NO

    YES

    YES

    NO

    '
  - 'YES

    NO

    NO

    '
  - 'YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    NO

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    YES

    '
  - 'YES

    NO

    '
  - 'NO

    YES

    NO

    '
  - 'NO

    YES

    NO

    NO

    '
  - 'YES

    YES

    NO

    '
  - 'YES

    YES

    NO

    NO

    NO

    NO

    '
  - 'NO

    NO

    YES

    '
  - 'YES

    NO

    NO

    YES

    NO

    NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    YES

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    YES

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'NO

    NO

    YES

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    NO

    YES

    YES

    '
  - 'NO

    YES

    '
  - 'NO

    '
  - 'YES

    NO

    NO

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    '
  - 'NO

    NO

    YES

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    YES

    '
  - 'NO

    NO

    YES

    YES

    '
  - 'YES

    YES

    NO

    YES

    NO

    NO

    '
  - 'NO

    NO

    YES

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'NO

    NO

    YES

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
timeout: 2.0
