prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou like numbers,\
  \ don't you? Nastia has a lot of numbers and she wants to share them with you! Isn't\
  \ it amazing?\n\nLet a_i be how many numbers i (1 \u2264 i \u2264 k) you have.\n\
  \nAn n \xD7 n matrix is called beautiful if it contains all the numbers you have,\
  \ and for each 2 \xD7 2 submatrix of the original matrix is satisfied: \n\n  1.\
  \ The number of occupied cells doesn't exceed 3; \n  2. The numbers on each diagonal\
  \ are distinct. \n\n\n\nMake a beautiful matrix of minimum size.\n\nInput\n\nThe\
  \ first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number\
  \ of test cases.\n\nThe first line of each test case contains 2 integers m and k\
  \ (1 \u2264 m, k \u2264 10^5) \u2014 how many numbers Nastia gave you and the length\
  \ of the array a, respectively.\n\nThe second line of each test case contains k\
  \ integers a_1, a_2, \u2026, a_{k} (0 \u2264 a_i \u2264 m, a_1 + a_2 + \u2026 +\
  \ a_{k} = m), where a_i is how many numbers i you have.\n\nIt's guaranteed that\
  \ the sum of m and k in one test doesn't exceed 2 \u22C5 10^5.\n\nOutput\n\nFor\
  \ each t test case print a single integer n \u2014 the size of the beautiful matrix.\n\
  \nIn the next n lines print n integers b_{i, j} (0 \u2264 b_{i, j} \u2264 k; if\
  \ position is empty, print b_{i, j} = 0) \u2014 the beautiful matrix b you made\
  \ up. \n\nExample\n\nInput\n\n\n2\n3 4\n2 0 0 1\n15 4\n2 4 8 1\n\n\nOutput\n\n\n\
  2\n4 1\n0 1\n5\n3 0 0 2 2\n3 2 3 3 0\n0 1 0 4 0\n3 0 0 0 0\n2 1 3 3 3\n\nNote\n\n\
  Note that 0 in this problem represents a blank, not a number.\n\nExamples of possible\
  \ answers for the first test case:\n\n\\begin{array}{cc} 1 & 1 \\\\\\ 4 & 0 \\\\\
  \\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 1 & 4 \\\\\\ 1 & 0 \\\\\\ \\\
  end{array} \\hspace{0,5cm} \\begin{array}{cc} 4 & 0 \\\\\\ 1 & 1 \\\\\\ \\end{array}\n\
  \nExamples of not beautiful matrices for the first test case:\n\n\\begin{array}{cc}\
  \ 1 & 0 \\\\\\ 4 & 1 \\\\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 4 &\
  \ 1 \\\\\\ 7 & 1 \\\\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 1 & 0 \\\
  \\\\ 4 & 0 \\\\\\ \\end{array}\n\nThe example of the not beautiful matrix for the\
  \ second test case:\n\n\\begin{array}{cc} 3 & 4 & 0 & 2 & 2 \\\\\\ 3 & 2 & 3 & 3\
  \ & 0 \\\\\\ 0 & 1 & 0 & 0 & 0 \\\\\\ 3 & 0 & 0 & 0 & 0 \\\\\\ 2 & 1 & 3 & 3 & 3\
  \ \\\\\\ \\end{array}\n\nEverything is okay, except the left-top submatrix contains\
  \ 4 numbers.\nA: ```def cheak(x):\n    return x**2-(x//2)**2>=m and x*(x//2+(1 if\
  \ x%2!=0 else 0))>=mx\nfor test in range(int(input())):\n    m,k=(int(i) for i in\
  \ input().split())\n    a=[int(i) for i in input().split()]\n    mx=max(a)\n   \
  \ z=0;y=m*4\n    while z!=y:\n        x=(z+y)//2\n        if cheak(x):\n       \
  \     y=x\n        else:\n            z=x+1\n    else:\n        x=z\n    a=sorted(list(map(list,zip(a,range(1,len(a)+1)))))\n\
  \    def get():\n        i=len(a)\n        while i!=0:\n            i-=1\n     \
  \       while a[i][0]>0:\n                a[i][0]-=1\n                yield a[i][1]\
  \ \n        yield 0\n    mt=[[0 for i in range(x)] for j in range(x)]\n    t=1\n\
  \    it=get()\n    for i in range(0,x,2):\n        if t==0:break\n        for j\
  \ in range(1,x,2):\n            t=next(it)\n            if t:mt[i][j]=t\n      \
  \      else:break\n    for i in range(0,x,2):\n        if t==0:break\n        for\
  \ j in range(0,x,2):\n            t=next(it)\n            if t:mt[i][j]=t\n    \
  \        else:break\n    for i in range(1,x,2):\n        if t==0:break\n       \
  \ for j in range(0,x,2):\n            t=next(it)\n            if t:mt[i][j]=t\n\
  \            else:break\n    print(len(mt))\n    for i in mt:\n        print(*i)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nAlice has a cute cat.\
  \ To keep her cat fit, Alice wants to design an exercising walk for her cat! \n\n\
  Initially, Alice's cat is located in a cell (x,y) of an infinite grid. According\
  \ to Alice's theory, cat needs to move: \n\n  * exactly a steps left: from (u,v)\
  \ to (u-1,v); \n  * exactly b steps right: from (u,v) to (u+1,v); \n  * exactly\
  \ c steps down: from (u,v) to (u,v-1); \n  * exactly d steps up: from (u,v) to (u,v+1).\
  \ \n\n\n\nNote that the moves can be performed in an arbitrary order. For example,\
  \ if the cat has to move 1 step left, 3 steps right and 2 steps down, then the walk\
  \ right, down, left, right, right, down is valid.\n\nAlice, however, is worrying\
  \ that her cat might get lost if it moves far away from her. So she hopes that her\
  \ cat is always in the area [x_1,x_2]\xD7 [y_1,y_2], i.e. for every cat's position\
  \ (u,v) of a walk x_1 \u2264 u \u2264 x_2 and y_1 \u2264 v \u2264 y_2 holds.\n\n\
  Also, note that the cat can visit the same cell multiple times.\n\nCan you help\
  \ Alice find out if there exists a walk satisfying her wishes?\n\nFormally, the\
  \ walk should contain exactly a+b+c+d unit moves (a to the left, b to the right,\
  \ c to the down, d to the up). Alice can do the moves in any order. Her current\
  \ position (u, v) should always satisfy the constraints: x_1 \u2264 u \u2264 x_2,\
  \ y_1 \u2264 v \u2264 y_2. The staring point is (x, y).\n\nYou are required to answer\
  \ t test cases independently.\n\nInput\n\nThe first line contains a single integer\
  \ t (1 \u2264 t \u2264 10^3) \u2014 the number of testcases. \n\nThe first line\
  \ of each test case contains four integers a, b, c, d (0 \u2264 a,b,c,d \u2264 10^8,\
  \ a+b+c+d \u2265 1).\n\nThe second line of the test case contains six integers x,\
  \ y, x_1, y_1, x_2, y_2 (-10^8 \u2264 x_1\u2264 x \u2264 x_2 \u2264 10^8, -10^8\
  \ \u2264 y_1 \u2264 y \u2264 y_2 \u2264 10^8).\n\nOutput\n\nFor each test case,\
  \ output \"YES\" in a separate line, if there exists a walk satisfying her wishes.\
  \ Otherwise, output \"NO\" in a separate line. \n\nYou can print each letter in\
  \ any case (upper or lower).\n\nExample\n\nInput\n\n\n6\n3 2 2 2\n0 0 -2 -2 2 2\n\
  3 1 4 1\n0 0 -1 -1 1 1\n1 1 1 1\n1 1 1 1 1 1\n0 0 0 1\n0 0 0 0 0 1\n5 1 1 1\n0 0\
  \ -100 -100 0 100\n1 1 5 1\n0 0 -100 -100 100 0\n\n\nOutput\n\n\nYes\nNo\nNo\nYes\n\
  Yes\nYes\n\nNote\n\nIn the first test case, one valid exercising walk is $$$(0,0)\u2192\
  \ (-1,0) \u2192 (-2,0)\u2192 (-2,1) \u2192 (-2,2)\u2192 (-1,2)\u2192(0,2)\u2192\
  \ (0,1)\u2192 (0,0) \u2192 (-1,0)$$$\nA: ```import sys\n\nI = lambda: int(input())\n\
  readline = lambda: sys.stdin.readline().strip('\\n')\nRM = readmap  = lambda x=int:\
  \ map(x,readline().split(' '))\n\n#1332 630 div2\nfor _ in range(I()):\n    a,b,c,d,x,y,x1,y1,x2,y2\
  \ = *RM(),*RM()\n    flag1 = x2-x >= b-a and x-x1 >= a-b and y2-y >= d-c and y-y1\
  \ >= c-d\n    flag2 = ((b==0 and a==0) or x2-x1>0) and ((c==0 and d==0) or y2-y1>0)\n\
  \    print([\"NO\",\"YES\"][flag1 and flag2])```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nYou are given n lengths of segments that need\
  \ to be placed on an infinite axis with coordinates.\n\nThe first segment is placed\
  \ on the axis so that one of its endpoints lies at the point with coordinate 0.\
  \ Let's call this endpoint the \"start\" of the first segment and let's call its\
  \ \"end\" as that endpoint that is not the start. \n\nThe \"start\" of each following\
  \ segment must coincide with the \"end\" of the previous one. Thus, if the length\
  \ of the next segment is d and the \"end\" of the previous one has the coordinate\
  \ x, the segment can be placed either on the coordinates [x-d, x], and then the\
  \ coordinate of its \"end\" is x - d, or on the coordinates [x, x+d], in which case\
  \ its \"end\" coordinate is x + d.\n\nThe total coverage of the axis by these segments\
  \ is defined as their overall union which is basically the set of points covered\
  \ by at least one of the segments. It's easy to show that the coverage will also\
  \ be a segment on the axis. Determine the minimal possible length of the coverage\
  \ that can be obtained by placing all the segments on the axis without changing\
  \ their order.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264\
  \ 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions\
  \ of the test cases. \n\nThe first line of each test case description contains an\
  \ integer n (1 \u2264 n \u2264 10^4) \u2014 the number of segments. The second line\
  \ of the description contains n space-separated integers a_i (1 \u2264 a_i \u2264\
  \ 1000) \u2014 lengths of the segments in the same order they should be placed on\
  \ the axis.\n\nIt is guaranteed that the sum of n over all test cases does not exceed\
  \ 10^4.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding\
  \ test case. The answer to a test case should be a single integer \u2014 the minimal\
  \ possible length of the axis coverage.\n\nExample\n\nInput\n\n\n6\n2\n1 3\n3\n\
  1 2 3\n4\n6 2 3 9\n4\n6 8 4 5\n7\n1 2 4 6 7 7 3\n8\n8 6 5 1 2 2 3 6\n\n\nOutput\n\
  \n\n3\n3\n9\n9\n7\n8\n\nNote\n\nIn the third sample test case the segments should\
  \ be arranged as follows: [0, 6] \u2192 [4, 6] \u2192 [4, 7] \u2192 [-2, 7]. As\
  \ you can see, the last segment [-2, 7] covers all the previous ones, and the total\
  \ length of coverage is 9.\n\nIn the fourth sample test case the segments should\
  \ be arranged as [0, 6] \u2192 [-2, 6] \u2192 [-2, 2] \u2192 [2, 7]. The union of\
  \ these segments also occupies the area [-2, 7] and has the length of 9.\nA:"
question: "You are given n lengths of segments that need to be placed on an infinite\
  \ axis with coordinates.\n\nThe first segment is placed on the axis so that one\
  \ of its endpoints lies at the point with coordinate 0. Let's call this endpoint\
  \ the \"start\" of the first segment and let's call its \"end\" as that endpoint\
  \ that is not the start. \n\nThe \"start\" of each following segment must coincide\
  \ with the \"end\" of the previous one. Thus, if the length of the next segment\
  \ is d and the \"end\" of the previous one has the coordinate x, the segment can\
  \ be placed either on the coordinates [x-d, x], and then the coordinate of its \"\
  end\" is x - d, or on the coordinates [x, x+d], in which case its \"end\" coordinate\
  \ is x + d.\n\nThe total coverage of the axis by these segments is defined as their\
  \ overall union which is basically the set of points covered by at least one of\
  \ the segments. It's easy to show that the coverage will also be a segment on the\
  \ axis. Determine the minimal possible length of the coverage that can be obtained\
  \ by placing all the segments on the axis without changing their order.\n\nInput\n\
  \nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number\
  \ of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\
  \nThe first line of each test case description contains an integer n (1 \u2264 n\
  \ \u2264 10^4) \u2014 the number of segments. The second line of the description\
  \ contains n space-separated integers a_i (1 \u2264 a_i \u2264 1000) \u2014 lengths\
  \ of the segments in the same order they should be placed on the axis.\n\nIt is\
  \ guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\
  \nPrint t lines, each line containing the answer to the corresponding test case.\
  \ The answer to a test case should be a single integer \u2014 the minimal possible\
  \ length of the axis coverage.\n\nExample\n\nInput\n\n\n6\n2\n1 3\n3\n1 2 3\n4\n\
  6 2 3 9\n4\n6 8 4 5\n7\n1 2 4 6 7 7 3\n8\n8 6 5 1 2 2 3 6\n\n\nOutput\n\n\n3\n3\n\
  9\n9\n7\n8\n\nNote\n\nIn the third sample test case the segments should be arranged\
  \ as follows: [0, 6] \u2192 [4, 6] \u2192 [4, 7] \u2192 [-2, 7]. As you can see,\
  \ the last segment [-2, 7] covers all the previous ones, and the total length of\
  \ coverage is 9.\n\nIn the fourth sample test case the segments should be arranged\
  \ as [0, 6] \u2192 [-2, 6] \u2192 [-2, 2] \u2192 [2, 7]. The union of these segments\
  \ also occupies the area [-2, 7] and has the length of 9."
samples:
- " ```for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,\
  \ input().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    while i < n:\n  \
  \      ans = max(ans, a[i] + i)\n        i += 1\n    print(ans)```\nQ:"
- " ```def solve():\n    for _ in range(int(input())):\n        n = int(input())\n\
  \        segments = list(map(int, input().split()))\n        segments.sort()\n \
  \       res = 0\n        for i in range(n):\n            res = max(res, segments[i])\n\
  \        print(res)\nfor _ in range(int(input())):\n    solve()``` ```python\n```python\n\
  import sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range(I()):\n    n = I()\n    a = sorted(RM())\n    print(max(a))``` ```python\n\
  ```python\nimport sys\nI = lambda: int(input())\nreadline = lambda: sys.stdin.readline().strip('\\\
  n')\nRM = readmap  = lambda x=int: map(x,readline().split(' '))\n\n#1332 630 div2\n\
  for _ in range"
test_cases:
  input:
  - '6

    2

    1 3

    3

    1 2 3

    4

    6 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 0

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 13 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 5

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 9 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    12 8 4 5

    7

    1 0 4 6 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 5

    3

    1 2 0

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 4

    7

    1 0 4 6 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 4 6 1 2 2 0 6

    '
  - '6

    2

    1 8

    3

    1 2 3

    4

    4 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 2

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 23 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 9 7 7 3

    8

    8 6 0 2 2 4 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 4

    7

    1 0 4 12 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 7 1 2 1 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 10 1 0 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    13 4 6 1 2 2 0 6

    '
  - '6

    2

    1 4

    3

    1 2 0

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 0 5 1 2 4 6 6

    '
  - '6

    2

    1 8

    3

    1 2 3

    4

    4 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    15 2 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    4 4 3 2

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 4

    8

    8 3 6 1 2 4 6 2

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 10

    7

    1 2 4 6 7 7 0

    8

    8 6 5 1 2 4 5 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 9 7 10 3

    8

    8 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 1 9

    7

    1 2 4 6 12 7 3

    8

    8 6 7 1 2 1 3 6

    '
  - '6

    2

    1 2

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    13 4 6 1 2 2 0 6

    '
  - '6

    2

    1 4

    3

    1 2 0

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    15 0 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 6 5

    7

    1 0 4 6 7 7 3

    8

    7 6 5 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 8

    7

    1 2 4 9 7 10 3

    8

    8 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    2 0 6

    4

    11 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 5

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 8 4 5

    7

    1 3 1 6 7 7 3

    8

    8 5 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 4 30

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    8 6 0 1 4 4 3 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 1

    7

    1 2 4 6 12 6 3

    8

    8 6 5 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 14

    7

    1 2 4 6 7 7 0

    8

    8 6 5 1 2 4 7 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 6 5

    7

    1 0 4 6 7 7 3

    8

    2 6 5 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 8 3 5

    7

    1 3 1 6 7 7 3

    8

    8 5 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 4 30

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    9 6 0 1 4 4 3 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 1

    7

    1 2 4 6 12 6 3

    8

    8 6 8 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 8 4 14

    7

    1 2 4 9 7 10 3

    8

    8 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 15 3 5

    7

    1 3 1 6 7 7 3

    8

    8 5 6 1 2 4 6 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    6 8 4 1

    7

    1 2 4 6 12 6 3

    8

    8 6 8 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 8 4 14

    7

    1 2 4 9 7 10 3

    8

    8 6 0 2 3 4 3 6

    '
  - '6

    2

    1 3

    3

    2 0 6

    4

    11 2 3 9

    4

    6 8 4 0

    7

    1 2 1 6 7 7 3

    8

    8 6 5 1 1 2 3 5

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    7 2 3 9

    4

    6 3 1 9

    7

    2 2 4 6 12 7 3

    8

    8 6 7 1 2 1 3 6

    '
  - '6

    2

    2 4

    3

    1 2 1

    4

    2 0 3 9

    4

    6 8 4 2

    7

    1 0 4 6 4 7 3

    8

    15 0 5 1 3 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 12 4 14

    7

    1 2 4 9 7 10 3

    8

    8 6 0 3 3 4 3 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    10 8 8 1

    7

    1 2 4 6 12 6 5

    8

    8 6 8 1 2 0 0 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    9 8 8 1

    7

    1 2 4 6 12 6 5

    8

    8 6 8 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    16 6 5 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    12 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 5

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 2

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 6 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 12 5 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    7 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    6 8 4 3

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 9 6

    '
  - '6

    2

    1 6

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 2 3 9

    4

    6 6 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 0

    3

    1 2 3

    4

    2 2 3 14

    4

    6 9 4 5

    7

    1 2 4 6 7 7 2

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 5

    3

    1 2 0

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    9 6 5 1 2 2 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 4

    7

    1 0 4 6 7 8 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 7 7 1

    8

    8 2 10 1 2 4 6 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 3 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 5 1 2 2 0 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 1 5

    7

    1 0 4 6 4 7 3

    8

    8 0 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 2

    4

    6 8 4 5

    7

    1 0 4 6 0 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 5

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 9 7 7 3

    8

    8 6 0 2 2 4 3 10

    '
  - '6

    2

    2 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 7 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    12 2 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 12

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 4

    8

    8 3 6 1 2 4 9 2

    '
  - '6

    2

    1 0

    3

    1 2 3

    4

    2 2 3 9

    4

    6 23 4 5

    7

    1 2 4 6 7 7 6

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 4 23

    4

    6 8 4 5

    7

    1 2 4 9 8 7 3

    8

    8 6 0 1 4 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 12 1 9

    7

    1 2 4 6 5 7 3

    8

    8 6 7 1 2 1 3 6

    '
  - '6

    2

    1 3

    3

    2 4 3

    4

    2 2 4 30

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    8 6 0 1 4 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 1

    4

    6 8 4 14

    7

    1 2 4 6 7 7 0

    8

    8 6 5 1 2 4 7 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 6 5

    7

    1 0 4 6 7 7 3

    8

    2 6 10 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 8 4 8

    7

    1 2 4 9 7 10 3

    8

    2 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 8 3 5

    7

    1 3 1 6 7 7 3

    8

    12 5 6 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 0

    4

    2 0 3 8

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    15 0 5 1 3 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 8 4 14

    7

    1 2 4 9 7 10 3

    8

    1 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 15 3 5

    7

    1 3 1 6 7 7 3

    8

    6 5 6 1 2 4 6 6

    '
  - '6

    2

    2 4

    3

    1 4 0

    4

    2 0 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    15 0 5 1 3 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    7 2 3 9

    4

    6 3 1 9

    7

    2 2 4 6 12 7 3

    8

    14 6 7 1 2 1 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 8 4 14

    7

    1 2 4 9 13 10 3

    8

    8 6 0 3 3 4 3 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    10 8 8 1

    7

    1 2 4 6 12 6 5

    8

    14 6 8 1 2 0 0 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    9 8 8 1

    7

    1 2 4 6 2 6 5

    8

    8 6 8 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 3 7 3

    8

    12 6 6 1 2 4 6 6

    '
  - '6

    2

    1 5

    3

    1 2 5

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 2

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 4 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    7 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    6 8 4 3

    7

    1 2 4 6 7 7 3

    8

    6 6 0 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 1 4 9 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 13 0

    8

    8 3 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 13 4 5

    7

    2 2 4 6 7 7 3

    8

    14 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 1 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 11 5 1 2 4 6 6

    '
  - '6

    2

    1 0

    3

    1 2 2

    4

    2 2 3 14

    4

    6 9 4 5

    7

    1 2 4 6 7 7 2

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 4

    4

    2 2 3 14

    4

    6 8 4 4

    7

    1 0 4 6 7 8 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    15 6 5 1 2 1 3 2

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 6 5

    7

    1 0 4 6 7 7 1

    8

    8 2 10 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 7 5

    7

    1 1 4 6 4 7 3

    8

    8 2 5 1 0 4 6 6

    '
  - '6

    2

    1 3

    3

    1 0 3

    4

    2 2 3 9

    4

    6 23 4 5

    7

    1 2 4 6 7 8 3

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 7 4 5

    7

    1 2 4 9 7 7 3

    8

    8 6 0 2 2 4 3 10

    '
  - '6

    2

    1 3

    3

    2 2 6

    4

    6 2 5 9

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 10 1 2 2 3 5

    '
  - '6

    2

    1 0

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 0 12 7 3

    8

    13 4 6 1 2 2 0 6

    '
  - '6

    2

    1 8

    3

    1 2 3

    4

    4 2 3 5

    4

    6 8 4 5

    7

    1 0 4 6 4 7 6

    8

    15 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 0 4

    8

    8 3 6 1 2 4 9 2

    '
  - '6

    2

    2 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 9 7 10 3

    8

    8 6 0 2 2 4 1 6

    '
  - '6

    2

    1 3

    3

    2 0 6

    4

    6 2 0 9

    4

    6 8 2 9

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 5

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 1 9

    4

    6 8 1 9

    7

    1 2 7 6 12 7 3

    8

    8 6 7 1 2 1 3 6

    '
  - '6

    2

    1 4

    3

    1 2 0

    4

    4 2 3 9

    4

    6 8 4 5

    7

    1 0 4 8 4 7 3

    8

    15 0 5 1 2 4 6 6

    '
  - '6

    2

    1 2

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 6 5

    7

    1 0 4 6 6 7 3

    8

    7 6 5 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 11

    7

    1 2 4 3 7 10 3

    8

    8 6 0 2 2 4 3 6

    '
  - '6

    2

    2 3

    3

    1 2 3

    4

    6 2 3 9

    4

    6 8 4 2

    7

    1 2 4 6 12 6 3

    8

    8 6 5 1 2 0 0 6

    '
  - '6

    2

    1 1

    3

    1 2 3

    4

    2 2 3 1

    4

    6 8 4 14

    7

    1 2 4 6 7 7 0

    8

    8 6 5 1 2 4 7 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 12

    4

    6 8 3 5

    7

    1 3 1 6 7 7 3

    8

    12 5 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 4 30

    4

    6 8 1 5

    7

    1 2 4 6 8 7 1

    8

    9 6 0 1 4 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 1

    4

    1 2 3 14

    4

    6 8 4 14

    7

    1 2 4 9 7 10 3

    8

    1 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 15 3 5

    7

    1 3 1 6 7 7 3

    8

    6 5 12 1 2 4 6 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    6 8 4 1

    7

    1 1 4 6 12 6 3

    8

    8 11 8 1 2 0 0 6

    '
  - '6

    2

    2 4

    3

    1 4 0

    4

    2 0 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    28 0 5 1 3 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    1 2 3 14

    4

    6 8 4 11

    7

    1 2 4 9 13 10 3

    8

    8 6 0 3 3 4 3 6

    '
  - '6

    2

    2 4

    3

    1 2 6

    4

    6 2 3 4

    4

    9 8 8 1

    7

    1 2 4 6 2 6 5

    8

    8 6 8 1 2 0 0 6

    '
  - '6

    2

    2 4

    3

    1 2 1

    4

    2 0 3 9

    4

    8 8 4 2

    7

    1 0 4 6 3 7 2

    8

    3 0 5 1 3 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 3 2 3

    8

    12 6 6 1 2 4 6 6

    '
  - '6

    2

    1 5

    3

    1 2 5

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 2

    8

    8 4 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 2 3 14

    4

    6 8 4 1

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 1 4 9 6

    '
  - '6

    2

    1 4

    3

    1 3 3

    4

    2 2 3 14

    4

    6 5 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 11 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 5 7 7 0

    8

    8 6 7 1 2 2 3 5

    '
  - '6

    2

    1 4

    3

    1 2 4

    4

    2 2 3 11

    4

    6 8 4 4

    7

    1 0 4 6 7 8 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 8

    3

    1 2 3

    4

    4 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 1 1 2 6 3 6

    '
  - '6

    2

    1 0

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 1

    8

    8 12 5 1 2 4 5 6

    '
  - '6

    2

    1 6

    3

    1 2 1

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    9 2 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 1 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 12

    4

    6 8 4 5

    7

    1 3 4 6 7 13 4

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 4 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 7 1 1 1 3 6

    '
  - '6

    2

    1 4

    3

    3 2 0

    4

    2 2 3 9

    4

    6 8 4 8

    7

    1 0 4 6 4 7 3

    8

    8 0 5 1 2 4 6 6

    '
  - '6

    2

    1 8

    3

    1 2 3

    4

    4 2 3 5

    4

    6 8 4 5

    7

    1 0 4 6 4 7 6

    8

    18 2 5 1 2 4 6 6

    '
  - '6

    2

    1 0

    3

    1 2 3

    4

    2 2 3 9

    4

    6 23 4 5

    7

    1 2 7 6 7 7 4

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    4 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 7 7 3

    8

    7 6 5 1 0 2 4 7

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 1 9

    4

    6 14 1 9

    7

    1 2 7 6 12 7 3

    8

    8 6 7 1 2 1 3 6

    '
  - '6

    2

    1 3

    3

    1 2 2

    4

    4 2 3 9

    4

    6 23 8 5

    7

    1 3 4 6 7 7 6

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 5

    4

    2 2 3 14

    4

    6 8 4 11

    7

    1 2 4 3 7 10 3

    8

    8 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 8 4 5

    7

    1 3 1 5 7 7 3

    8

    8 5 6 1 1 4 6 12

    '
  - '6

    2

    1 3

    3

    4 2 3

    4

    2 2 4 30

    4

    6 8 1 5

    7

    1 2 4 6 8 7 1

    8

    9 6 0 1 4 4 3 6

    '
  - '6

    2

    1 4

    3

    1 2 0

    4

    2 0 3 8

    4

    6 1 4 5

    7

    1 0 4 6 4 7 3

    8

    15 1 5 1 3 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 1

    4

    1 2 3 14

    4

    6 8 4 14

    7

    1 2 4 9 7 16 3

    8

    1 6 0 2 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 3 4

    4

    2 0 3 7

    4

    6 15 3 5

    7

    1 3 1 6 7 7 3

    8

    6 5 12 1 2 4 6 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 4

    4

    6 8 4 1

    7

    1 1 4 6 23 6 3

    8

    8 11 8 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 2

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 6 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 7 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 5 1 2 2 0 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 6 1 2 2 0 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 3 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 4

    8

    8 3 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 0

    8

    8 6 5 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 1 14

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 9 4 5

    7

    1 2 4 6 7 7 2

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 0 2 3 6

    '
  - '6

    2

    2 3

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 5

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 5 1 2 1 3 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 3 23

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 7 7 1

    8

    8 2 5 1 2 4 6 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 5 1 2 2 0 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 2 5 1 0 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 3

    8

    8 0 5 1 2 4 6 6

    '
  - '6

    2

    1 4

    3

    1 2 3

    4

    4 4 3 9

    4

    6 8 4 5

    7

    1 0 4 6 4 7 4

    8

    8 3 5 1 2 4 6 2

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 0

    8

    8 6 5 1 2 4 5 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 2 4 6 7 7 3

    8

    7 6 5 1 0 2 4 6

    '
  - '6

    2

    2 4

    3

    1 2 3

    4

    2 2 3 14

    4

    6 8 4 5

    7

    1 3 4 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    2 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 5

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 23

    4

    12 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 0 1 2 4 3 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 3 23

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    8 6 0 1 4 4 3 6

    '
  - '6

    2

    2 3

    3

    1 2 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 12 7 3

    8

    8 6 5 1 2 0 0 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 23 4 5

    7

    1 2 4 6 7 7 6

    8

    8 6 5 1 2 2 3 6

    '
  - '6

    2

    1 3

    3

    1 2 3

    4

    2 2 3 9

    4

    6 8 4 5

    7

    1 0 4 6 7 7 3

    8

    7 6 5 1 0 2 4 6

    '
  - '6

    2

    1 3

    3

    2 0 6

    4

    6 2 3 9

    4

    6 8 4 9

    7

    1 2 4 6 7 7 3

    8

    8 6 5 1 2 2 3 5

    '
  - '6

    2

    1 3

    3

    1 3 3

    4

    2 0 3 7

    4

    6 8 4 5

    7

    1 3 1 6 7 7 3

    8

    8 6 6 1 2 4 6 6

    '
  - '6

    2

    1 3

    3

    2 2 3

    4

    2 2 4 23

    4

    6 8 4 5

    7

    1 2 4 6 8 7 3

    8

    8 6 0 1 4 4 3 6

    '
  output:
  - '3

    3

    9

    9

    7

    8

    '
  - '3

    3

    9

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    9

    7

    8

    '
  - '3

    3

    9

    9

    7

    7

    '
  - '3

    6

    9

    12

    7

    8

    '
  - '3

    2

    9

    9

    7

    7

    '
  - '3

    3

    23

    9

    7

    8

    '
  - '4

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    12

    12

    8

    '
  - '3

    3

    23

    9

    8

    8

    '
  - '4

    3

    14

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '3

    3

    9

    13

    7

    8

    '
  - '5

    6

    9

    9

    7

    8

    '
  - '3

    3

    14

    9

    9

    8

    '
  - '3

    3

    14

    12

    7

    8

    '
  - '5

    2

    9

    9

    7

    7

    '
  - '3

    3

    23

    12

    7

    8

    '
  - '4

    3

    14

    8

    7

    8

    '
  - '3

    6

    9

    12

    12

    10

    '
  - '8

    3

    9

    9

    9

    8

    '
  - '4

    3

    4

    9

    9

    8

    '
  - '3

    3

    9

    23

    7

    8

    '
  - '3

    3

    14

    9

    9

    9

    '
  - '4

    3

    14

    8

    12

    8

    '
  - '3

    3

    7

    9

    7

    8

    '
  - '3

    6

    9

    12

    12

    9

    '
  - '4

    3

    14

    9

    9

    11

    '
  - '3

    6

    9

    12

    12

    13

    '
  - '4

    2

    9

    9

    9

    8

    '
  - '8

    3

    9

    9

    9

    15

    '
  - '3

    3

    4

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    9

    '
  - '3

    3

    9

    12

    7

    8

    '
  - '3

    3

    14

    9

    12

    9

    '
  - '3

    6

    9

    9

    12

    9

    '
  - '2

    6

    9

    12

    12

    13

    '
  - '4

    2

    9

    9

    9

    15

    '
  - '3

    3

    9

    8

    7

    7

    '
  - '3

    3

    14

    12

    12

    9

    '
  - '3

    6

    12

    12

    7

    8

    '
  - '3

    3

    7

    9

    7

    9

    '
  - '3

    3

    30

    9

    8

    8

    '
  - '3

    6

    9

    8

    12

    8

    '
  - '3

    3

    9

    14

    7

    8

    '
  - '3

    3

    9

    8

    7

    6

    '
  - '3

    3

    7

    8

    7

    9

    '
  - '3

    3

    30

    9

    8

    9

    '
  - '3

    6

    9

    8

    12

    10

    '
  - '3

    3

    14

    14

    12

    9

    '
  - '3

    3

    7

    15

    7

    9

    '
  - '3

    6

    6

    8

    12

    10

    '
  - '3

    3

    14

    14

    12

    8

    '
  - '3

    6

    12

    8

    7

    8

    '
  - '3

    6

    9

    10

    12

    9

    '
  - '4

    2

    9

    8

    9

    15

    '
  - '3

    3

    14

    16

    12

    8

    '
  - '3

    6

    6

    10

    12

    10

    '
  - '3

    6

    6

    9

    12

    10

    '
  - '3

    3

    9

    9

    7

    16

    '
  - '3

    3

    14

    9

    7

    12

    '
  - '3

    5

    14

    9

    7

    8

    '
  - '3

    3

    9

    9

    7

    12

    '
  - '3

    3

    14

    9

    7

    7

    '
  - '3

    3

    23

    8

    7

    8

    '
  - '3

    3

    14

    9

    7

    9

    '
  - '6

    3

    9

    9

    9

    8

    '
  - '4

    3

    9

    7

    9

    8

    '
  - '1

    3

    14

    9

    7

    8

    '
  - '5

    2

    9

    9

    7

    9

    '
  - '4

    3

    14

    8

    8

    8

    '
  - '4

    3

    14

    9

    7

    10

    '
  - '3

    6

    9

    9

    12

    8

    '
  - '4

    3

    9

    8

    9

    8

    '
  - '4

    3

    4

    9

    7

    8

    '
  - '3

    5

    9

    9

    7

    7

    '
  - '3

    3

    14

    9

    9

    10

    '
  - '4

    3

    14

    9

    7

    9

    '
  - '3

    3

    23

    14

    7

    8

    '
  - '3

    3

    12

    9

    7

    8

    '
  - '4

    3

    9

    9

    9

    10

    '
  - '1

    3

    9

    23

    7

    8

    '
  - '3

    3

    23

    9

    9

    8

    '
  - '3

    6

    9

    12

    8

    9

    '
  - '3

    4

    30

    9

    8

    8

    '
  - '3

    3

    3

    14

    7

    8

    '
  - '3

    3

    9

    8

    7

    10

    '
  - '3

    3

    14

    12

    12

    7

    '
  - '3

    3

    7

    8

    7

    12

    '
  - '4

    2

    8

    9

    9

    15

    '
  - '3

    3

    14

    14

    12

    7

    '
  - '3

    3

    7

    15

    7

    7

    '
  - '4

    4

    9

    9

    9

    15

    '
  - '3

    6

    9

    10

    12

    14

    '
  - '3

    3

    14

    14

    13

    8

    '
  - '3

    6

    6

    10

    12

    14

    '
  - '3

    6

    6

    9

    8

    10

    '
  - '3

    3

    14

    9

    9

    12

    '
  - '5

    5

    14

    9

    7

    8

    '
  - '3

    4

    14

    9

    7

    7

    '
  - '3

    3

    23

    8

    7

    7

    '
  - '3

    3

    14

    9

    7

    10

    '
  - '4

    3

    9

    9

    13

    8

    '
  - '3

    3

    9

    13

    7

    14

    '
  - '3

    3

    14

    9

    7

    11

    '
  - '1

    2

    14

    9

    7

    8

    '
  - '4

    4

    14

    8

    8

    8

    '
  - '3

    6

    9

    12

    12

    15

    '
  - '4

    3

    14

    8

    7

    10

    '
  - '4

    3

    14

    8

    9

    8

    '
  - '3

    3

    9

    23

    8

    8

    '
  - '3

    3

    14

    8

    9

    10

    '
  - '3

    6

    9

    12

    7

    12

    '
  - '1

    6

    9

    12

    12

    13

    '
  - '8

    3

    5

    9

    9

    15

    '
  - '4

    3

    9

    9

    6

    10

    '
  - '3

    3

    14

    9

    12

    8

    '
  - '3

    6

    9

    10

    7

    8

    '
  - '3

    6

    9

    9

    13

    9

    '
  - '4

    2

    9

    9

    11

    15

    '
  - '2

    3

    9

    8

    7

    7

    '
  - '3

    3

    14

    12

    10

    9

    '
  - '3

    3

    9

    8

    12

    8

    '
  - '1

    3

    3

    14

    7

    8

    '
  - '3

    3

    12

    8

    7

    12

    '
  - '3

    3

    30

    8

    8

    9

    '
  - '3

    2

    14

    14

    12

    7

    '
  - '3

    3

    7

    15

    7

    12

    '
  - '3

    6

    6

    8

    12

    11

    '
  - '4

    4

    9

    9

    9

    28

    '
  - '3

    3

    14

    12

    13

    8

    '
  - '4

    6

    6

    9

    8

    10

    '
  - '4

    2

    9

    8

    9

    6

    '
  - '3

    3

    14

    9

    6

    12

    '
  - '5

    5

    14

    9

    7

    10

    '
  - '3

    3

    14

    8

    7

    10

    '
  - '4

    3

    14

    6

    9

    11

    '
  - '3

    6

    9

    12

    7

    9

    '
  - '4

    4

    11

    8

    8

    8

    '
  - '8

    3

    9

    9

    9

    9

    '
  - '1

    3

    9

    9

    7

    12

    '
  - '6

    2

    9

    9

    7

    7

    '
  - '3

    3

    23

    11

    7

    8

    '
  - '3

    3

    12

    9

    13

    8

    '
  - '4

    6

    9

    12

    12

    9

    '
  - '4

    3

    9

    12

    9

    8

    '
  - '8

    3

    5

    9

    9

    18

    '
  - '1

    3

    9

    23

    8

    8

    '
  - '4

    3

    9

    9

    7

    7

    '
  - '3

    6

    9

    14

    13

    9

    '
  - '3

    2

    9

    23

    7

    8

    '
  - '3

    5

    14

    12

    10

    9

    '
  - '3

    3

    7

    9

    7

    12

    '
  - '3

    5

    30

    8

    8

    9

    '
  - '4

    2

    8

    6

    9

    15

    '
  - '3

    2

    14

    14

    16

    7

    '
  - '3

    4

    7

    15

    7

    12

    '
  - '3

    6

    6

    8

    23

    11

    '
  - '3

    3

    9

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    9

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '4

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    12

    12

    8

    '
  - '3

    6

    9

    12

    12

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '3

    3

    9

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    3

    9

    9

    7

    7

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    12

    7

    8

    '
  - '3

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    12

    12

    8

    '
  - '3

    3

    23

    9

    8

    8

    '
  - '4

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    12

    12

    8

    '
  - '4

    3

    14

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '4

    3

    9

    9

    9

    8

    '
  - '3

    3

    9

    9

    7

    8

    '
  - '3

    3

    9

    9

    7

    7

    '
  - '4

    3

    14

    9

    7

    8

    '
  - '3

    6

    9

    12

    7

    8

    '
  - '3

    3

    23

    12

    7

    8

    '
  - '3

    3

    23

    9

    8

    8

    '
  - '3

    6

    9

    12

    12

    8

    '
  - '3

    3

    9

    23

    7

    8

    '
  - '3

    3

    9

    9

    7

    7

    '
  - '3

    6

    9

    12

    7

    8

    '
  - '3

    3

    7

    9

    7

    8

    '
  - '3

    3

    23

    9

    8

    8

    '
timeout: 1.0
