prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nPavel made\
  \ a photo of his favourite stars in the sky. His camera takes a photo of all points\
  \ of the sky that belong to some rectangle with sides parallel to the coordinate\
  \ axes.\n\nStrictly speaking, it makes a photo of all points with coordinates (x,\
  \ y), such that x_1 \u2264 x \u2264 x_2 and y_1 \u2264 y \u2264 y_2, where (x_1,\
  \ y_1) and (x_2, y_2) are coordinates of the left bottom and the right top corners\
  \ of the rectangle being photographed. The area of this rectangle can be zero.\n\
  \nAfter taking the photo, Pavel wrote down coordinates of n of his favourite stars\
  \ which appeared in the photo. These points are not necessarily distinct, there\
  \ can be multiple stars in the same point of the sky.\n\nPavel has lost his camera\
  \ recently and wants to buy a similar one. Specifically, he wants to know the dimensions\
  \ of the photo he took earlier. Unfortunately, the photo is also lost. His notes\
  \ are also of not much help; numbers are written in random order all over his notepad,\
  \ so it's impossible to tell which numbers specify coordinates of which points.\n\
  \nPavel asked you to help him to determine what are the possible dimensions of the\
  \ photo according to his notes. As there are multiple possible answers, find the\
  \ dimensions with the minimal possible area of the rectangle.\n\nInput\n\nThe first\
  \ line of the input contains an only integer n (1 \u2264 n \u2264 100 000), the\
  \ number of points in Pavel's records.\n\nThe second line contains 2 \u22C5 n integers\
  \ a_1, a_2, ..., a_{2 \u22C5 n} (1 \u2264 a_i \u2264 10^9), coordinates, written\
  \ by Pavel in some order.\n\nOutput\n\nPrint the only integer, the minimal area\
  \ of the rectangle which could have contained all points from Pavel's records.\n\
  \nExamples\n\nInput\n\n4\n4 1 3 2 3 2 1 3\n\n\nOutput\n\n1\n\nInput\n\n3\n5 8 5\
  \ 5 7 5\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample stars in Pavel's records\
  \ can be (1, 3), (1, 3), (2, 3), (2, 4). In this case, the minimal area of the rectangle,\
  \ which contains all these points is 1 (rectangle with corners at (1, 3) and (2,\
  \ 4)).\nA: ```n = int(input())\na = [int(x) for x in input().split()]\n\na.sort()\n\
  \ntop = [a[0], a[-1]]\nright = [a[n - 1], a[n]]\ncase2 = abs((top[0] - right[0])*(top[1]\
  \ - right[1]))\n\ncase1 = top[-1] - top[0]\nmny = 10000000000\n\nfor i in range(1,\
  \ n):\n    mny = min(mny, abs(a[i] - a[i + n-1]))\n    #print(mny)\ncase1 *= mny\n\
  print(min(abs(case1), case2))```\nQ: Write python code to solve the following coding\
  \ problem that obeys the constraints and passes the example test cases. The output\
  \ code needs to read from and write to standard IO. Please wrap your code answer\
  \ using ```:\n\n\nInput\n\nThe input contains two integers a1, a2 (0 \u2264 ai \u2264\
  \ 109), separated by a single space.\n\nOutput\n\nOutput a single integer.\n\nExamples\n\
  \nInput\n\n3 14\n\n\nOutput\n\n44\n\n\nInput\n\n27 12\n\n\nOutput\n\n48\n\n\nInput\n\
  \n100 200\n\n\nOutput\n\n102\nA: ```from math import floor\n\nx, y = input().split()\n\
  x = int(x)\ny = int(y)\n\nrev = 0\nwhile y > 0:\n    a = int(y % 10)\n    rev =\
  \ rev * 10 + a\n    y = floor(y / 10)\nb = x + rev\nprint(b)```\nQ: Write python\
  \ code to solve the following coding problem that obeys the constraints and passes\
  \ the example test cases. The output code needs to read from and write to standard\
  \ IO. Please wrap your code answer using ```:\nMonocarp is playing yet another computer\
  \ game. In this game, his character has to kill a dragon. The battle with the dragon\
  \ lasts 100^{500} seconds, during which Monocarp attacks the dragon with a poisoned\
  \ dagger. The i-th attack is performed at the beginning of the a_i-th second from\
  \ the battle start. The dagger itself does not deal damage, but it applies a poison\
  \ effect on the dragon, which deals 1 damage during each of the next k seconds (starting\
  \ with the same second when the dragon was stabbed by the dagger). However, if the\
  \ dragon has already been poisoned, then the dagger updates the poison effect (i.e.\
  \ cancels the current poison effect and applies a new one).\n\nFor example, suppose\
  \ k = 4, and Monocarp stabs the dragon during the seconds 2, 4 and 10. Then the\
  \ poison effect is applied at the start of the 2-nd second and deals 1 damage during\
  \ the 2-nd and 3-rd seconds; then, at the beginning of the 4-th second, the poison\
  \ effect is reapplied, so it deals exactly 1 damage during the seconds 4, 5, 6 and\
  \ 7; then, during the 10-th second, the poison effect is applied again, and it deals\
  \ 1 damage during the seconds 10, 11, 12 and 13. In total, the dragon receives 10\
  \ damage.\n\nMonocarp knows that the dragon has h hit points, and if he deals at\
  \ least h damage to the dragon during the battle \u2014 he slays the dragon. Monocarp\
  \ has not decided on the strength of the poison he will use during the battle, so\
  \ he wants to find the minimum possible value of k (the number of seconds the poison\
  \ effect lasts) that is enough to deal at least h damage to the dragon.\n\nInput\n\
  \nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the\
  \ number of test cases.\n\nThe first line of the test case contains two integers\
  \ n and h (1 \u2264 n \u2264 100; 1 \u2264 h \u2264 10^{18}) \u2014 the number of\
  \ Monocarp's attacks and the amount of damage that needs to be dealt.\n\nThe second\
  \ line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9; a_i < a_{i\
  \ + 1}), where a_i is the second when the i-th attack is performed.\n\nOutput\n\n\
  For each test case, print a single integer \u2014 the minimum value of the parameter\
  \ k, such that Monocarp will cause at least h damage to the dragon.\n\nExample\n\
  \nInput\n\n\n4\n2 5\n1 5\n3 10\n2 4 10\n5 3\n1 2 4 5 7\n4 1000\n3 25 64 1337\n\n\
  \nOutput\n\n\n3\n4\n1\n470\n\nNote\n\nIn the first example, for k=3, damage is dealt\
  \ in seconds [1, 2, 3, 5, 6, 7].\n\nIn the second example, for k=4, damage is dealt\
  \ in seconds [2, 3, 4, 5, 6, 7, 10, 11, 12, 13].\n\nIn the third example, for k=1,\
  \ damage is dealt in seconds [1, 2, 4, 5, 7].\nA:"
question: "Monocarp is playing yet another computer game. In this game, his character\
  \ has to kill a dragon. The battle with the dragon lasts 100^{500} seconds, during\
  \ which Monocarp attacks the dragon with a poisoned dagger. The i-th attack is performed\
  \ at the beginning of the a_i-th second from the battle start. The dagger itself\
  \ does not deal damage, but it applies a poison effect on the dragon, which deals\
  \ 1 damage during each of the next k seconds (starting with the same second when\
  \ the dragon was stabbed by the dagger). However, if the dragon has already been\
  \ poisoned, then the dagger updates the poison effect (i.e. cancels the current\
  \ poison effect and applies a new one).\n\nFor example, suppose k = 4, and Monocarp\
  \ stabs the dragon during the seconds 2, 4 and 10. Then the poison effect is applied\
  \ at the start of the 2-nd second and deals 1 damage during the 2-nd and 3-rd seconds;\
  \ then, at the beginning of the 4-th second, the poison effect is reapplied, so\
  \ it deals exactly 1 damage during the seconds 4, 5, 6 and 7; then, during the 10-th\
  \ second, the poison effect is applied again, and it deals 1 damage during the seconds\
  \ 10, 11, 12 and 13. In total, the dragon receives 10 damage.\n\nMonocarp knows\
  \ that the dragon has h hit points, and if he deals at least h damage to the dragon\
  \ during the battle \u2014 he slays the dragon. Monocarp has not decided on the\
  \ strength of the poison he will use during the battle, so he wants to find the\
  \ minimum possible value of k (the number of seconds the poison effect lasts) that\
  \ is enough to deal at least h damage to the dragon.\n\nInput\n\nThe first line\
  \ contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test\
  \ cases.\n\nThe first line of the test case contains two integers n and h (1 \u2264\
  \ n \u2264 100; 1 \u2264 h \u2264 10^{18}) \u2014 the number of Monocarp's attacks\
  \ and the amount of damage that needs to be dealt.\n\nThe second line contains n\
  \ integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9; a_i < a_{i + 1}), where\
  \ a_i is the second when the i-th attack is performed.\n\nOutput\n\nFor each test\
  \ case, print a single integer \u2014 the minimum value of the parameter k, such\
  \ that Monocarp will cause at least h damage to the dragon.\n\nExample\n\nInput\n\
  \n\n4\n2 5\n1 5\n3 10\n2 4 10\n5 3\n1 2 4 5 7\n4 1000\n3 25 64 1337\n\n\nOutput\n\
  \n\n3\n4\n1\n470\n\nNote\n\nIn the first example, for k=3, damage is dealt in seconds\
  \ [1, 2, 3, 5, 6, 7].\n\nIn the second example, for k=4, damage is dealt in seconds\
  \ [2, 3, 4, 5, 6, 7, 10, 11, 12, 13].\n\nIn the third example, for k=1, damage is\
  \ dealt in seconds [1, 2, 4, 5, 7]."
samples:
- " ```t = int(input())\nfor _ in range(t):\n    n, h = map(int, input().split())\n\
  \    a = list(map(int, input().split()))\n    a.sort()\n    k = 1\n    res = 0\n\
  \    for i in range(n):\n        res += a[i] - a[i - 1]\n        while res >= h:\n\
  \            h -= res\n            k += 1\n    print(k)```\nQ:"
- " ```t = int(input())\nfor _ in range(t):\n    n, h = map(int, input().split())\n\
  \    a = list(map(int, input().split()))\n    a.sort()\n    res = 0\n    curr =\
  \ 0\n    for i in range(n):\n        curr += a[i] - a[i - 1] if i > 0 else a[i]\n\
  \        while curr >= h:\n            res = max(res, a[i] - a[i - 1] if i > 0 else\
  \ a[i] - a[0] + 1)\n            curr -= a[i] - a[i - 1] if i > 0 else a[i] - a[0]\n\
  \    print(res)```\n\n\nQ:"
test_cases:
  input:
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    3 25 64 1337

    '
  - '1

    2 1000000000000000000

    1 1000000000

    '
  - '1

    2 1000000000000000000

    1000000 1000000000

    '
  - '1

    1 1000000000000000000

    1000000

    '
  - '1

    1 1000000000000000000

    1000000000

    '
  - '1

    2 1000000000000000000

    1 1001000000

    '
  - '1

    2 1000000000000000000

    1000100 1000000000

    '
  - '1

    1 1000000000000000000

    1010000000

    '
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    5 25 64 1337

    '
  - '4

    2 5

    1 5

    3 10

    1 4 10

    5 3

    1 2 4 5 7

    4 1000

    2 5 64 1337

    '
  - '1

    2 1000000000000000000

    2 1001000000

    '
  - '1

    2 1000000000000100000

    1000100 1000000000

    '
  - '1

    2 1000000000000101000

    1000100 1000000000

    '
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    2 5 16 1337

    '
  - '1

    2 1000000000000101000

    1000100 1000000100

    '
  - '4

    2 5

    1 5

    3 3

    1 4 14

    5 3

    0 2 4 5 7

    4 1000

    5 25 64 1337

    '
  - '1

    2 1000000000000101000

    1000100 1100000100

    '
  - '1

    2 1000000000000101000

    1001100 1100000100

    '
  - '1

    2 1000000000000101000

    1101100 1100000100

    '
  - '1

    2 1000000000000101000

    1001101 1100000100

    '
  - '1

    2 1000000000000000000

    1000100 1000000100

    '
  - '4

    2 5

    1 5

    3 10

    1 4 10

    5 3

    1 2 4 5 7

    4 1100

    5 25 64 1337

    '
  - '1

    2 1000000000000100000

    1000100 1000010000

    '
  - '1

    2 1000000000000101000

    1100100 1000000000

    '
  - '1

    2 1000000000000101000

    1000000 1000000100

    '
  - '1

    2 1000000000000101000

    1000100 1100000110

    '
  - '1

    2 1000000001000101000

    1001100 1100000100

    '
  - '1

    2 1000000000001101000

    1101100 1100000100

    '
  - '1

    2 1000000000100000000

    1000100 1000000100

    '
  - '4

    2 8

    1 5

    3 10

    1 4 10

    5 3

    1 2 4 3 7

    4 1000

    5 5 64 1337

    '
  - '1

    2 1000000000000100000

    1000100 1000110000

    '
  - '1

    2 1000000000000101001

    1100100 1000000000

    '
  - '1

    2 1000000000010101000

    1000100 1100000110

    '
  - '1

    2 1000000001000101000

    1000100 1100000100

    '
  - '1

    2 1000000000100000000

    1000100 1000000101

    '
  - '1

    2 0000000000000100000

    1000100 1000110000

    '
  - '1

    2 1000000000010100000

    1000100 1100000110

    '
  - '1

    2 1000000000100000000

    1000100 1001000101

    '
  - '4

    2 5

    1 5

    3 11

    1 4 20

    5 3

    1 2 4 6 7

    4 1000

    5 25 95 1337

    '
  - '1

    2 1000000000100000000

    1100100 1001000101

    '
  - '1

    2 0000000000000100010

    1000100 1001110000

    '
  - '1

    2 1000000000100000000

    1100100 1001000001

    '
  - '1

    2 0000000000000101010

    1000100 1001110000

    '
  - '1

    2 1000000000000000000

    1000010 1000000000

    '
  - '4

    2 1

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    3 25 64 1337

    '
  - '1

    2 1000000000000000010

    1 1001000000

    '
  - '1

    2 1000000000000000000

    1000110 1000000000

    '
  - '4

    2 5

    1 5

    3 10

    4 4 10

    5 3

    1 2 4 5 7

    4 1000

    5 25 64 1337

    '
  - '1

    2 1000000000000000000

    1001100 1000000000

    '
  - '1

    2 1000000000000101000

    0000100 1000000000

    '
  - '1

    2 1000000000000101000

    1000100 1000000101

    '
  - '4

    2 5

    1 5

    3 3

    1 4 14

    5 3

    0 2 4 5 7

    4 1000

    10 25 64 1337

    '
  - '1

    2 1000000000000101000

    1000000 1100000100

    '
  - '1

    2 1000000000000101000

    1001110 1100000100

    '
  - '1

    2 1000000000000101000

    0101100 1100000100

    '
  - '1

    2 1000000000000101000

    1000101 1100000100

    '
  - '1

    2 1000000000010000000

    1000100 1000000100

    '
  - '1

    2 1000000000000100000

    1000100 1000010010

    '
  - '1

    2 1000000000100101000

    1100100 1000000000

    '
  - '1

    2 1000000001000101000

    1001101 1100000100

    '
  - '1

    2 1000000000001101000

    1001100 1100000100

    '
  - '1

    2 1000000000100000000

    1000000 1000000100

    '
  - '1

    2 1000000000000100000

    1000100 1000111000

    '
  - '1

    2 1000000000010101000

    1010100 1100000110

    '
  - '1

    2 1000000001000101000

    1000000 1100000100

    '
  - '1

    2 1000000000110000000

    1000100 1000000101

    '
  - '1

    2 1000000000010100000

    1000100 1110000110

    '
  - '1

    2 1000000000100000000

    1100110 1001000101

    '
  - '4

    2 9

    1 5

    3 11

    1 4 20

    5 3

    1 2 4 8 7

    4 1000

    5 25 95 1337

    '
  - '1

    2 0000000000000001010

    1000100 1001110000

    '
  - '1

    2 1000000000000000010

    1 1001000100

    '
  - '1

    2 1000000000000000000

    1010110 1000000000

    '
  - '4

    2 5

    1 5

    3 19

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    2 8 64 1337

    '
  - '1

    2 1000000000000101000

    1100000 1100000100

    '
  - '1

    2 1000000000000101000

    1001110 1101000100

    '
  - '1

    2 1000000000000101000

    0001100 1100000100

    '
  - '1

    2 1000000000010000000

    1000000 1000000100

    '
  - '1

    2 1000000000100101000

    1100000 1000000000

    '
  - '1

    2 1000000001000101000

    0001101 1100000100

    '
  - '1

    2 1000000000001101000

    1001100 1100100100

    '
  - '1

    2 1000000000100000000

    1010000 1000000100

    '
  - '1

    2 1000000000000000000

    1000100 1000111000

    '
  - '1

    2 1000000001000101001

    1000000 1100000100

    '
  - '1

    2 1000000000110000000

    1000110 1000000101

    '
  - '1

    2 1000000000010100000

    1010100 1110000110

    '
  - '4

    2 5

    1 5

    3 15

    1 4 20

    5 3

    1 2 4 6 7

    4 1000

    5 16 95 1337

    '
  - '1

    2 1000000000100000000

    1100110 1001000100

    '
  - '4

    2 13

    1 5

    3 11

    1 4 20

    5 3

    1 2 4 8 7

    4 1000

    5 25 95 1337

    '
  - '1

    2 0000000000000000010

    1000100 1001110000

    '
  - '1

    2 1000000000000000000

    1 1001000100

    '
  - '1

    2 1000000000000000000

    0010110 1000000000

    '
  - '4

    2 5

    1 5

    3 19

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    3 8 64 1337

    '
  - '1

    2 1000000000000101000

    1100001 1100000100

    '
  - '1

    2 1000000000000101000

    0001100 0100000100

    '
  - '1

    2 1000000000101101000

    1001100 1100100100

    '
  - '1

    2 1000000000100000000

    1011000 1000000100

    '
  - '1

    2 1000000000000010000

    1000100 1000111000

    '
  - '1

    2 1000000001000101001

    1000001 1100000100

    '
  - '1

    2 1000000000110000100

    1000110 1000000101

    '
  - '1

    2 0000010000000100010

    1000100 1000110100

    '
  - '1

    2 1000000000100000000

    1100110 1000000100

    '
  - '1

    2 1000000000000000000

    1 1011000100

    '
  - '1

    2 1000000000000101000

    1100001 1100010100

    '
  - '1

    2 1000000000001101000

    1001110 1101001100

    '
  - '1

    2 1000000000000101000

    0000100 0100000100

    '
  - '4

    2 9

    1 5

    3 10

    1 4 10

    5 2

    1 2 4 6 20

    4 1000

    2 5 64 1337

    '
  - '1

    2 1000000000100000000

    1011000 1000000101

    '
  - '1

    2 1000000000000010000

    1010100 1000111000

    '
  - '1

    2 1000000001000101001

    1001001 1100000100

    '
  - '1

    2 1000000000100000000

    1100110 1100000100

    '
  - '1

    2 1000000000000101000

    1100001 0100010100

    '
  - '1

    2 1000000000000101000

    0000100 0110000100

    '
  - '1

    2 1000000000100000000

    0011000 1000000101

    '
  - '1

    2 1000000000000010000

    1010100 1001111000

    '
  - '1

    2 1000000000100000000

    1100110 1101000100

    '
  - '1

    2 1000000000100101000

    0000100 0110000100

    '
  - '1

    2 1000000000000010000

    1010101 1001111000

    '
  - '1

    2 1000000000100101000

    0001100 0110000100

    '
  - '1

    2 1000000001000010000

    1010101 1001111000

    '
  - '1

    2 1000000000100111000

    0001100 0110000100

    '
  - '1

    2 1000000001000010000

    1011101 1001111000

    '
  - '1

    2 1000000000100111000

    0001101 0110000100

    '
  - '4

    2 5

    1 5

    3 19

    1 4 10

    5 3

    1 2 4 5 7

    4 1000

    5 5 64 1337

    '
  - '4

    2 9

    1 5

    3 10

    2 4 10

    5 3

    1 2 6 5 7

    4 1000

    5 25 64 1337

    '
  - '4

    2 5

    1 5

    3 10

    1 4 14

    5 3

    0 2 4 5 7

    4 1000

    9 25 64 1337

    '
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    2 5 5 1337

    '
  - '1

    2 1000000000000101000

    1001100 1100100100

    '
  - '1

    2 1000000000000101000

    1100100 1100000100

    '
  - '1

    2 1000000000000101000

    0001101 1100000100

    '
  - '1

    2 1000000000000000000

    0000100 1000000100

    '
  - '4

    2 5

    1 5

    3 4

    1 4 10

    5 3

    1 2 4 5 7

    4 1100

    5 25 64 1337

    '
  - '1

    2 1000000000000100000

    1000100 1010010000

    '
  - '1

    2 0000000000000101000

    1100100 1000000000

    '
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 4 4 5 7

    4 1000

    3 5 16 1337

    '
  - '1

    2 1000000000000101000

    1010000 1000000100

    '
  - '1

    2 1000000000000101001

    1000100 1100000110

    '
  - '1

    2 1000000001000001000

    1001100 1100000100

    '
  - '1

    2 1000000000001101000

    1001100 1100000110

    '
  - '4

    2 8

    1 5

    3 10

    1 4 10

    5 3

    1 2 4 3 7

    4 1010

    5 5 64 1337

    '
  - '1

    2 1000000000000100010

    1000100 1000110000

    '
  - '1

    2 1000000000000101001

    1000100 1000000000

    '
  - '4

    2 5

    1 5

    3 2

    2 4 10

    5 3

    1 4 4 5 7

    4 1000

    2 9 16 1337

    '
  - '1

    2 1000000000100000000

    1000100 1001001101

    '
  - '1

    2 0000000001000100000

    1000100 1001110000

    '
  - '1

    2 0010000000000100010

    1000100 1001110000

    '
  - '4

    2 1

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    3 25 124 1337

    '
  - '4

    2 5

    1 5

    3 10

    4 4 10

    5 3

    1 2 4 5 7

    4 1000

    9 25 64 1337

    '
  - '4

    2 5

    1 5

    3 10

    1 4 6

    5 3

    1 2 4 5 7

    4 1000

    5 5 8 1337

    '
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 2 4 5 7

    4 1000

    2 8 112 1337

    '
  - '1

    2 1000000000000101000

    0000100 1000001000

    '
  - '1

    2 1000000000000101000

    0111100 1100000100

    '
  - '1

    2 1000000000000101000

    1000111 1100000100

    '
  - '1

    2 1000000000010000000

    1000110 1000000100

    '
  - '1

    2 1000000000000100000

    1000101 1000010010

    '
  - '1

    2 1000000001000101100

    1001101 1100000100

    '
  - '1

    2 1000000000100000000

    1001000 1000000100

    '
  - '1

    2 1000000000010101000

    1010100 1101000110

    '
  - '1

    2 1000000001000101000

    1000000 1100001100

    '
  - '1

    2 1000000000110000000

    1000100 1100000101

    '
  - '1

    2 1000000000100000000

    1100110 1001100101

    '
  - '1

    2 0001000000000001010

    1000100 1001110000

    '
  - '1

    2 1000000000000000010

    1 0001000100

    '
  - '1

    2 1000000000000000001

    1010110 1000000000

    '
  - '1

    2 1000000000000101000

    1101000 1100000100

    '
  - '1

    2 1000000000000101000

    1001110 1101001100

    '
  - '1

    2 1000000000100100000

    1100000 1000000000

    '
  - '1

    2 1000000001000101000

    0001101 1101000100

    '
  - '1

    2 1000000000001101001

    1001100 1100100100

    '
  - '1

    2 1000000001000101001

    1001000 1100000100

    '
  - '1

    2 1000000000110000000

    1001110 1000000101

    '
  - '1

    2 1000000000010100000

    1010100 1110000111

    '
  - '1

    2 1000000000000000010

    0010110 1000000000

    '
  - '1

    2 1000000001000101001

    1000001 1100000110

    '
  - '1

    2 0000010000000100010

    1100100 1000110100

    '
  - '1

    2 1000000000100000000

    1100110 1000000101

    '
  - '1

    2 1000000000000101000

    1100000 1100010100

    '
  - '1

    2 1000000000001101000

    1001110 1001001100

    '
  - '4

    2 9

    1 5

    3 10

    2 4 10

    5 2

    1 2 4 6 20

    4 1010

    2 5 64 1337

    '
  - '1

    2 1000000001000101001

    1011001 1100000100

    '
  - '4

    2 1

    2 5

    3 10

    4 4 10

    5 3

    1 2 4 5 7

    4 1001

    3 24 64 668

    '
  - '4

    2 9

    1 5

    3 10

    2 4 10

    5 2

    1 2 4 6 20

    4 1100

    2 5 64 1337

    '
  - '1

    2 1000000000100101000

    0000100 0110100100

    '
  - '1

    2 1000000000100101000

    0101100 0110000100

    '
  - '1

    2 1000000000100111000

    0001101 0110100100

    '
  - '4

    2 5

    1 5

    3 10

    1 4 10

    5 3

    1 2 4 5 7

    4 1000

    5 11 64 336

    '
  - '4

    2 9

    1 5

    3 10

    2 4 10

    5 3

    1 2 6 5 7

    4 1000

    4 25 64 1337

    '
  - '1

    2 1000000000010101001

    1000100 1100000100

    '
  - '1

    2 1000000000000101000

    1100100 1110000100

    '
  - '1

    2 1000000000000101000

    0001111 1100000100

    '
  - '1

    2 1000000000000000000

    0000100 1000000101

    '
  - '1

    2 1000000000000100000

    1000100 1010011000

    '
  - '1

    2 0100000000000101000

    1100100 1000000000

    '
  - '4

    2 5

    1 5

    3 10

    2 4 10

    5 3

    1 4 4 5 7

    4 1000

    3 5 10 1337

    '
  - '1

    2 1000000000000101000

    0010000 1000000100

    '
  - '4

    2 8

    2 5

    3 10

    1 4 10

    5 3

    1 2 4 3 7

    4 1010

    5 5 64 1337

    '
  - '1

    2 1000000000100000000

    1010100 1001001101

    '
  - '1

    2 0010000010000100010

    1000100 1001110000

    '
  - '4

    2 5

    1 5

    3 11

    1 1 20

    5 3

    1 2 4 8 7

    4 1000

    5 25 95 517

    '
  - '4

    2 5

    1 5

    3 8

    1 4 10

    5 3

    2 2 4 5 7

    4 1000

    5 25 64 1467

    '
  - '1

    2 1000000000100101000

    0000100 1000001000

    '
  - '1

    2 1000000000010000000

    1000110 1001000100

    '
  - '1

    2 1000000000000110000

    1000101 1000010010

    '
  - '4

    2 4

    1 5

    3 3

    1 4 12

    5 3

    0 2 3 5 7

    4 1001

    5 25 64 1337

    '
  - '1

    2 1000000000001101000

    0011100 1100000100

    '
  - '1

    2 1000000000000000000

    1001000 1000000100

    '
  output:
  - '3

    4

    1

    470

    '
  - '999999999000000001

    '
  - '999999999001000000

    '
  - '1000000000000000000

    '
  - '1000000000000000000

    '
  - '999999998999000001

    '
  - '999999999001000100

    '
  - '1000000000000000000

    '
  - '3

    4

    1

    471

    '
  - '3

    4

    1

    469

    '
  - '999999998999000002

    '
  - '999999999001100100

    '
  - '999999999001101100

    '
  - '3

    4

    1

    493

    '
  - '999999999001101000

    '
  - '3

    1

    1

    471

    '
  - '999999998901101000

    '
  - '999999998901102000

    '
  - '999999998901202000

    '
  - '999999998901102001

    '
  - '999999999001000000

    '
  - '3

    4

    1

    521

    '
  - '999999999001090100

    '
  - '999999999001201100

    '
  - '999999999001100900

    '
  - '999999998901100990

    '
  - '999999999901102000

    '
  - '999999998902202000

    '
  - '999999999101000000

    '
  - '4

    4

    1

    471

    '
  - '999999999000990100

    '
  - '999999999001201101

    '
  - '999999998911100990

    '
  - '999999999901101000

    '
  - '999999999100999999

    '
  - '50000

    '
  - '999999998911099990

    '
  - '999999999099999999

    '
  - '3

    4

    1

    455

    '
  - '999999999100099999

    '
  - '50005

    '
  - '999999999100100099

    '
  - '50505

    '
  - '999999999001000010

    '
  - '1

    4

    1

    470

    '
  - '999999998999000011

    '
  - '999999999001000110

    '
  - '3

    5

    1

    471

    '
  - '999999999001001100

    '
  - '999999999000101100

    '
  - '999999999001100999

    '
  - '3

    1

    1

    473

    '
  - '999999998901100900

    '
  - '999999998901102010

    '
  - '999999998900202000

    '
  - '999999998901101001

    '
  - '999999999011000000

    '
  - '999999999001090090

    '
  - '999999999101201100

    '
  - '999999999901102001

    '
  - '999999998902102000

    '
  - '999999999100999900

    '
  - '999999999000989100

    '
  - '999999998911110990

    '
  - '999999999901100900

    '
  - '999999999110999999

    '
  - '999999998901099990

    '
  - '999999999100100009

    '
  - '5

    4

    1

    455

    '
  - '505

    '
  - '999999998998999911

    '
  - '999999999001010110

    '
  - '3

    11

    1

    469

    '
  - '999999998901200900

    '
  - '999999998900102010

    '
  - '999999998900102000

    '
  - '999999999010999900

    '
  - '999999999101201000

    '
  - '999999999900102001

    '
  - '999999998902002000

    '
  - '999999999101009900

    '
  - '999999999000889100

    '
  - '999999999901100901

    '
  - '999999999111000009

    '
  - '999999998901109990

    '
  - '3

    6

    1

    455

    '
  - '999999999100100010

    '
  - '9

    4

    1

    455

    '
  - '5

    '
  - '999999998998999901

    '
  - '999999999000010110

    '
  - '3

    11

    1

    470

    '
  - '999999998901200901

    '
  - '999999999900102000

    '
  - '999999999002002000

    '
  - '999999999101010900

    '
  - '999999999000899100

    '
  - '999999999901100902

    '
  - '999999999111000109

    '
  - '9999000990010

    '
  - '999999999101100010

    '
  - '999999998988999901

    '
  - '999999998901190901

    '
  - '999999998901101010

    '
  - '999999999900101000

    '
  - '5

    4

    1

    469

    '
  - '999999999101010899

    '
  - '999999999000909100

    '
  - '999999999901101902

    '
  - '999999999001100010

    '
  - '999999999901190901

    '
  - '999999999890101000

    '
  - '999999999100010899

    '
  - '999999998999909100

    '
  - '999999999000100010

    '
  - '999999999990101000

    '
  - '999999998999909101

    '
  - '999999999990102000

    '
  - '999999999999909101

    '
  - '999999999990112000

    '
  - '999999999999910101

    '
  - '999999999990112001

    '
  - '3

    10

    1

    471

    '
  - '5

    4

    1

    471

    '
  - '3

    4

    1

    473

    '
  - '3

    4

    1

    499

    '
  - '999999998901002000

    '
  - '999999998901201000

    '
  - '999999998900102001

    '
  - '999999999000000000

    '
  - '3

    2

    1

    521

    '
  - '999999998991090100

    '
  - '50500

    '
  - '3

    4

    1

    494

    '
  - '999999999001110900

    '
  - '999999998901100991

    '
  - '999999999901002000

    '
  - '999999998902101990

    '
  - '4

    4

    1

    476

    '
  - '999999999000990110

    '
  - '999999999001101101

    '
  - '3

    1

    1

    493

    '
  - '999999999099998999

    '
  - '500050000

    '
  - '9999998999990110

    '
  - '1

    4

    1

    440

    '
  - '3

    5

    1

    473

    '
  - '3

    5

    1

    499

    '
  - '3

    4

    1

    445

    '
  - '999999999000100100

    '
  - '999999998900212000

    '
  - '999999998901101011

    '
  - '999999999011000010

    '
  - '999999999001090091

    '
  - '999999999901102101

    '
  - '999999999101000900

    '
  - '999999998910110990

    '
  - '999999999901099900

    '
  - '999999999010999999

    '
  - '999999999100000009

    '
  - '999998999891110

    '
  - '999999999998999911

    '
  - '999999999001010111

    '
  - '999999998901201900

    '
  - '999999998900101010

    '
  - '999999999101200000

    '
  - '999999999899102001

    '
  - '999999998902002001

    '
  - '999999999901101901

    '
  - '999999999111001009

    '
  - '999999998901109989

    '
  - '999999999000010120

    '
  - '999999999901100892

    '
  - '9999001090010

    '
  - '999999999101100009

    '
  - '999999998901190900

    '
  - '999999999001101010

    '
  - '5

    4

    1

    474

    '
  - '999999999901111902

    '
  - '1

    5

    1

    470

    '
  - '5

    4

    1

    519

    '
  - '999999999990001000

    '
  - '999999999990202000

    '
  - '999999999990012001

    '
  - '3

    4

    1

    669

    '
  - '5

    4

    1

    470

    '
  - '999999998911101001

    '
  - '999999998891201000

    '
  - '999999998900102011

    '
  - '999999998999999999

    '
  - '999999998991089100

    '
  - '99999999001201100

    '
  - '3

    4

    1

    497

    '
  - '999999999000110900

    '
  - '5

    4

    1

    476

    '
  - '999999999100008999

    '
  - '10000008999990110

    '
  - '3

    6

    1

    488

    '
  - '3

    3

    1

    471

    '
  - '999999999100100100

    '
  - '999999999010000010

    '
  - '999999999001100091

    '
  - '2

    1

    1

    471

    '
  - '999999998901112000

    '
  - '999999999001000900

    '
timeout: 2.0
