prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nSnuke is having\
  \ another barbeque party.\n\nThis time, he will make one serving of Skewer Meal.\n\
  \nHe has a stock of N Skewer Meal Packs. The i-th Skewer Meal Pack contains one\
  \ skewer, A_i pieces of beef and B_i pieces of green pepper. All skewers in these\
  \ packs are different and distinguishable, while all pieces of beef and all pieces\
  \ of green pepper are, respectively, indistinguishable.\n\nTo make a Skewer Meal,\
  \ he chooses two of his Skewer Meal Packs, and takes out all of the contents from\
  \ the chosen packs, that is, two skewers and some pieces of beef or green pepper.\
  \ (Remaining Skewer Meal Packs will not be used.) Then, all those pieces of food\
  \ are threaded onto both skewers, one by one, in any order.\n\n(See the image in\
  \ the Sample section for better understanding.)\n\nIn how many different ways can\
  \ he make a Skewer Meal? Two ways of making a Skewer Meal is different if and only\
  \ if the sets of the used skewers are different, or the orders of the pieces of\
  \ food are different. Since this number can be extremely large, find it modulo 10^9+7.\n\
  \nConstraints\n\n* 2\u2266N\u2266200,000\n* 1\u2266A_i\u22662000, 1\u2266B_i\u2266\
  2000\n\nInput\n\nThe input is given from Standard Input in the following format:\n\
  \n\nN\nA_1 B_1\nA_2 B_2\n:\nA_N B_N\n\n\nOutput\n\nPrint the number of the different\
  \ ways Snuke can make a serving of Skewer Meal, modulo 10^9+7.\n\nExample\n\nInput\n\
  \n3\n1 1\n1 1\n2 1\n\n\nOutput\n\n26\nA: ```mod = 10**9+7\nmod2 = 998244353\nrng\
  \ = 100100\nfctr = [1]\nfinv = [1]\nfor i in range(1,rng):\n  fctr.append(fctr[-1]*i%mod)\n\
  for i in range(1,rng):\n  finv.append(pow(fctr[i],mod-2,mod))\ndef cmb(n,k):\n \
  \ if n<0 or k<0:\n    return 0\n  else:\n    return fctr[n]*finv[n-k]*finv[k]%mod\n\
  n = int(input())\nab = [list(map(int,input().split())) for i in range(n)]\ns = 0\n\
  for a,b in ab:\n  s = max(s,a,b)\ndp = [[0 for i in range(2*s+2)] for j in range(2*s+2)]\n\
  for a,b in ab:\n  dp[s+1-a][s+1-b] += 1\nfor i in range(1,2*s+2):\n  for j in range(1,2*s+2):\n\
  \    dp[i][j] = (dp[i][j]+dp[i-1][j]+dp[i][j-1])%mod\nx = 0\nfor a,b in ab:\n  x\
  \ = (x+dp[s+1+a][s+1+b])%mod\nt = 0\nfor a,b in ab:\n  t = (t+cmb(2*a+2*b,2*a))%mod\n\
  ans = (x-t)*pow(2,mod-2,mod)%mod\nprint(ans)```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nThe customer telephone support center of the computer\
  \ sales company called JAG is now in- credibly confused. There are too many customers\
  \ who request the support, and they call the support center all the time. So, the\
  \ company wants to figure out how many operators needed to handle this situation.\n\
  \nFor simplicity, let us focus on the following simple simulation.\n\nLet N be a\
  \ number of customers. The i-th customer has id i, and is described by three numbers,\
  \ Mi, Li and Ki. Mi is the time required for phone support, Li is the maximum stand\
  \ by time until an operator answers the call, and Ki is the interval time from hanging\
  \ up to calling back. Let us put these in other words: It takes Mi unit times for\
  \ an operator to support i-th customer. If the i-th customer is not answered by\
  \ operators for Li unit times, he hangs up the call. Ki unit times after hanging\
  \ up, he calls back.\n\nOne operator can support only one customer simultaneously.\
  \ When an operator finish a call, he can immediately answer another call. If there\
  \ are more than one customer waiting, an operator will choose the customer with\
  \ the smallest id.\n\nAt the beginning of the simulation, all customers call the\
  \ support center at the same time. The simulation succeeds if operators can finish\
  \ answering all customers within T unit times.\n\nYour mission is to calculate the\
  \ minimum number of operators needed to end this simulation successfully.\n\n\n\n\
  Input\n\nThe input contains multiple datasets. Each dataset has the following format:\n\
  \nN T\nM1 L1 K1\n.\n.\n.\nMN LN KN\n\n\nThe first line of a dataset contains two\
  \ positive integers, N and T (1 \u2264 N \u2264 1000, 1 \u2264 T \u2264 1000). N\
  \ indicates the number of customers in the dataset, and T indicates the time limit\
  \ of the simulation.\n\nThe following N lines describe the information of customers.\
  \ The i-th line contains three integers, Mi, Li and Ki (1 \u2264 Mi \u2264 T , 1\
  \ \u2264 Li \u2264 1000, 1 \u2264 Ki \u2264 1000), describing i-th customer's information.\
  \ Mi indicates the time required for phone support, Li indicates the maximum stand\
  \ by time until an operator answers the call, and Ki indicates the is the interval\
  \ time from hanging up to calling back.\n\nThe end of input is indicated by a line\
  \ containing two zeros. This line is not part of any dataset and hence should not\
  \ be processed.\n\nOutput\n\nFor each dataset, print the minimum number of operators\
  \ needed to end the simulation successfully in a line.\n\nExample\n\nInput\n\n3\
  \ 300\n100 50 150\n100 50 150\n100 50 150\n3 300\n100 50 150\n100 50 150\n200 50\
  \ 150\n9 18\n3 1 1\n3 1 1\n3 1 1\n4 100 1\n5 100 1\n5 100 1\n10 5 3\n10 5 3\n1 7\
  \ 1000\n10 18\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n6 7 8\n7 8 9\n8 9 10\n9 10 11\n\
  10 11 12\n0 0\n\n\nOutput\n\n2\n3\n3\n4\nA: ```import sys\nreadline = sys.stdin.readline\n\
  write = sys.stdout.write\ndef check(N, C, T, x):\n    used = [0]*N\n    S = [0]*(T+1)\n\
  \    cap = x\n    f = 0\n    for t in range(T):\n        cap += S[t]\n        if\
  \ cap == 0:\n            continue\n        for i in range(f, N):\n            if\
  \ used[i]:\n                continue\n            m, l, k = C[i]\n            if\
  \ t+m > T:\n                break\n            if t % (l + k) <= l:\n          \
  \      used[i] = 1\n                S[t+m] += 1\n                cap -= 1\n    \
  \            if i == f:\n                    while f < N and used[f]:\n        \
  \                f += 1\n                if cap == 0:\n                    break\n\
  \    cap += S[T]\n    return sum(used) == N and cap == x\n\ndef solve():\n    N,\
  \ T = map(int, readline().split())\n    if N == 0:\n        return False\n    C\
  \ = [list(map(int, readline().split())) for i in range(N)]\n    for x in range(N+1):\n\
  \        if check(N, C, T, x):\n            write(\"%d\\n\" % x)\n            break\n\
  \    return True\nwhile solve():\n    ...```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nThere is a city park represented as a tree with n\
  \ attractions as its vertices and n - 1 rails as its edges. The i-th attraction\
  \ has happiness value a_i.\n\nEach rail has a color. It is either black if t_i =\
  \ 0, or white if t_i = 1. Black trains only operate on a black rail track, and white\
  \ trains only operate on a white rail track. If you are previously on a black train\
  \ and want to ride a white train, or you are previously on a white train and want\
  \ to ride a black train, you need to use 1 ticket.\n\nThe path of a tour must be\
  \ a simple path \u2014 it must not visit an attraction more than once. You do not\
  \ need a ticket the first time you board a train. You only have k tickets, meaning\
  \ you can only switch train types at most k times. In particular, you do not need\
  \ a ticket to go through a path consisting of one rail color.\n\nDefine f(u, v)\
  \ as the sum of happiness values of the attractions in the tour (u, v), which is\
  \ a simple path that starts at the u-th attraction and ends at the v-th attraction.\
  \ Find the sum of f(u,v) for all valid tours (u, v) (1 \u2264 u \u2264 v \u2264\
  \ n) that does not need more than k tickets, modulo 10^9 + 7.\n\nInput\n\nThe first\
  \ line contains two integers n and k (2 \u2264 n \u2264 2 \u22C5 10^5, 0 \u2264\
  \ k \u2264 n-1) \u2014 the number of attractions in the city park and the number\
  \ of tickets you have.\n\nThe second line contains n integers a_1, a_2,\u2026, a_n\
  \ (0 \u2264 a_i \u2264 10^9) \u2014 the happiness value of each attraction.\n\n\
  The i-th of the next n - 1 lines contains three integers u_i, v_i, and t_i (1 \u2264\
  \ u_i, v_i \u2264 n, 0 \u2264 t_i \u2264 1) \u2014 an edge between vertices u_i\
  \ and v_i with color t_i. The given edges form a tree.\n\nOutput\n\nOutput an integer\
  \ denoting the total happiness value for all valid tours (u, v) (1 \u2264 u \u2264\
  \ v \u2264 n), modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 0\n1 3 2 6 4\n1 2 1\n\
  1 4 0\n3 2 1\n2 5 0\n\n\nOutput\n\n\n45\n\n\nInput\n\n\n3 1\n1 1 1\n1 2 1\n3 2 0\n\
  \n\nOutput\n\n\n10\nA:"
question: "There is a city park represented as a tree with n attractions as its vertices\
  \ and n - 1 rails as its edges. The i-th attraction has happiness value a_i.\n\n\
  Each rail has a color. It is either black if t_i = 0, or white if t_i = 1. Black\
  \ trains only operate on a black rail track, and white trains only operate on a\
  \ white rail track. If you are previously on a black train and want to ride a white\
  \ train, or you are previously on a white train and want to ride a black train,\
  \ you need to use 1 ticket.\n\nThe path of a tour must be a simple path \u2014 it\
  \ must not visit an attraction more than once. You do not need a ticket the first\
  \ time you board a train. You only have k tickets, meaning you can only switch train\
  \ types at most k times. In particular, you do not need a ticket to go through a\
  \ path consisting of one rail color.\n\nDefine f(u, v) as the sum of happiness values\
  \ of the attractions in the tour (u, v), which is a simple path that starts at the\
  \ u-th attraction and ends at the v-th attraction. Find the sum of f(u,v) for all\
  \ valid tours (u, v) (1 \u2264 u \u2264 v \u2264 n) that does not need more than\
  \ k tickets, modulo 10^9 + 7.\n\nInput\n\nThe first line contains two integers n\
  \ and k (2 \u2264 n \u2264 2 \u22C5 10^5, 0 \u2264 k \u2264 n-1) \u2014 the number\
  \ of attractions in the city park and the number of tickets you have.\n\nThe second\
  \ line contains n integers a_1, a_2,\u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014\
  \ the happiness value of each attraction.\n\nThe i-th of the next n - 1 lines contains\
  \ three integers u_i, v_i, and t_i (1 \u2264 u_i, v_i \u2264 n, 0 \u2264 t_i \u2264\
  \ 1) \u2014 an edge between vertices u_i and v_i with color t_i. The given edges\
  \ form a tree.\n\nOutput\n\nOutput an integer denoting the total happiness value\
  \ for all valid tours (u, v) (1 \u2264 u \u2264 v \u2264 n), modulo 10^9 + 7.\n\n\
  Examples\n\nInput\n\n\n5 0\n1 3 2 6 4\n1 2 1\n1 4 0\n3 2 1\n2 5 0\n\n\nOutput\n\n\
  \n45\n\n\nInput\n\n\n3 1\n1 1 1\n1 2 1\n3 2 0\n\n\nOutput\n\n\n10"
samples:
- " ```import sys\nreadline = sys.stdin.readline\nwrite = sys.stdout.write\ndef dfs(u,\
  \ v, c, k, s):\n    if k < 0:\n        return 0\n    if s == n:\n        return\
  \ a[s-1]\n    if (u, v, c, k, s) in memo:\n        return memo[(u, v, c, k, s)]\n\
  \    if (u, v, c, k, s) in memo2:\n        return memo2[(u, v, c, k, s)]\n    if\
  \ c == t[s-1]:\n        res = 0\n        for i in range(1, n):\n            if t[i-1]\
  \ == t[s-1]:\n                res += dfs(s, i, t[i-1], k, i+1)\n        return res\
  \ % mod\n    res = 0\n    for i in range(1, n):\n        if t[i-1] != t[s-1]:\n\
  \            res += dfs(s, i, t[i-1], k-1, i+1)\n    return res % mod\n\nmod = 10**9\
  \ + 7\nn, k = map(int, readline().split())\na = list(map(int, readline().split()))\n\
  t = [0]*(n-1)\nfor i in range(n-1):\n    u, v, c = map(int, readline().split())\n\
  \    t[i] = c\nmemo = {}\nmemo2 = {}\nfor i in range(1, n):\n    memo[(i, i, 0,\
  \ 0, i+1)] = a[i-1]\n    memo2[(i, i, 0, 0, i+1)] = a[i-1]\nfor i in range(1, n):\n\
  \    for j in range(i+1, n):\n        print(dfs(i, j, 0, k, 1) % mod)\n        memo[(i,\
  \ j, 0, 0, 1)] = dfs(i, j, 0, k, 1) % mod\n        memo2[(i, j, 0, 0, 1)] = dfs(i,\
  \ j, 0, k, 1) % mod\n        ...```\nQ:"
- " ```mod = 10**9+7\nk = 0\nn = int(input())\na = list(map(int,input().split()))\n\
  e = []\nfor _ in range(n-1):\n    u, v, t = map(int,input().split())\n    e.append((u,v,t))\n\
  res = 0\nfor u in range(1,n+1):\n    for v in range(u,n+1):\n        if u==v:\n\
  \            continue\n        f = 0\n        for i in range(u-1,v):\n         \
  \   if e[i][2] == e[i-1][2]:\n                f += 1\n        res = (res + a[u-1]+a[v-1])%mod\n\
  res %= mod\nprint(res)```\nQ:"
test_cases:
  input:
  - '5 0

    1 3 2 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '3 1

    1 1 1

    1 2 1

    3 2 0

    '
  - '2 1

    1000000000 0

    2 1 0

    '
  - '4 0

    589284011 636562059 767928733 906523440

    4 1 0

    4 2 0

    3 2 0

    '
  - '2 1

    1000000010 0

    2 1 0

    '
  - '3 2

    1 1 1

    1 2 1

    3 2 0

    '
  - '2 1

    1000000010 1

    2 1 0

    '
  - '5 0

    1 3 4 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '2 1

    1000010010 0

    2 1 0

    '
  - '3 2

    1 1 0

    1 2 1

    3 2 0

    '
  - '5 0

    1 0 4 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '3 2

    1 1 -1

    1 2 1

    3 2 0

    '
  - '5 0

    1 0 4 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 1

    '
  - '4 0

    589284011 636562059 1246248614 906523440

    4 1 0

    4 2 0

    3 2 0

    '
  - '3 1

    1 1 2

    1 2 1

    3 2 0

    '
  - '2 1

    1000011010 0

    2 1 0

    '
  - '5 0

    0 0 4 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '5 0

    1 0 4 6 4

    1 2 0

    1 4 0

    3 2 1

    2 5 1

    '
  - '3 2

    0 1 -1

    1 2 1

    3 2 0

    '
  - '5 0

    1 0 4 6 1

    1 2 0

    1 4 0

    3 2 1

    2 5 1

    '
  - '5 0

    1 0 4 6 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '5 0

    1 0 7 6 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '5 0

    1 0 7 3 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '4 0

    589284011 636562059 1491116421 906523440

    4 1 0

    4 2 0

    3 2 0

    '
  - '2 1

    1010000010 0

    2 1 0

    '
  - '3 0

    1 1 2

    1 2 1

    3 2 0

    '
  - '2 1

    1000000011 2

    2 1 0

    '
  - '5 1

    0 0 4 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '5 0

    1 0 7 6 1

    1 2 0

    2 4 0

    3 2 1

    1 5 1

    '
  - '5 0

    1 0 9 3 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '3 0

    0 1 1

    1 2 1

    3 2 0

    '
  - '5 0

    1 0 7 8 1

    1 2 0

    2 4 0

    3 2 1

    1 5 1

    '
  - '2 1

    1000100011 0

    2 1 0

    '
  - '2 1

    1000101011 0

    2 1 0

    '
  - '5 0

    1 0 7 8 1

    1 2 0

    2 4 0

    3 2 0

    2 5 1

    '
  - '5 0

    1 0 7 8 1

    1 2 0

    2 4 0

    3 2 0

    3 5 1

    '
  - '1 2

    1000101011 0

    2 1 0

    '
  - '1 2

    0000101011 0

    2 1 0

    '
  - '1 2

    0000001011 0

    3 0 0

    '
  - '1 1

    0000001001 1

    3 -1 0

    '
  - '2 1

    1000000000 0

    2 1 1

    '
  - '5 0

    1 3 2 1 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '5 0

    1 0 4 6 4

    1 3 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '3 1

    1 0 -1

    1 2 1

    3 2 0

    '
  - '2 1

    1000011000 0

    2 1 0

    '
  - '5 0

    2 0 4 6 1

    1 2 0

    1 4 0

    3 2 1

    2 5 1

    '
  - '5 0

    1 0 1 3 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '3 1

    2 0 -1

    1 2 1

    3 2 0

    '
  - '5 0

    1 0 7 6 1

    1 2 0

    2 4 0

    3 1 1

    1 5 1

    '
  - '3 2

    0 2 -2

    1 2 1

    3 2 0

    '
  - '2 1

    1100101011 0

    2 1 0

    '
  - '1 3

    0000001010 0

    3 0 0

    '
  - '1 3

    1000001011 0

    3 -1 0

    '
  - '1 0

    0010001001 1

    3 -1 0

    '
  - '5 0

    1 3 2 1 4

    1 2 1

    1 4 0

    3 2 1

    2 5 1

    '
  - '5 0

    2 0 4 6 1

    1 2 0

    1 4 0

    3 4 1

    2 5 1

    '
  - '1 2

    0000001111 0

    3 1 0

    '
  - '1 0

    0001001011 0

    1 -1 0

    '
  - '5 0

    1 3 5 6 4

    1 2 1

    1 4 1

    3 4 1

    2 5 0

    '
  - '5 0

    1 3 5 6 4

    1 2 1

    1 4 1

    3 4 0

    2 5 0

    '
  - '1 2

    0000001101 0

    3 1 1

    '
  - '1 2

    0000101001 -1

    1 2 -1

    '
  - '1 4

    0000101111 0

    6 0 0

    '
  - '1 0

    0011001011 0

    2 -1 -1

    '
  - '1 1

    0000100001 1

    5 -2 -1

    '
  - '1 1

    0100000001 2

    10 -1 -1

    '
  - '1 1

    0001101001 -1

    2 1 0

    '
  - '1 0

    0001100001 -1

    1 1 0

    '
  - '1 1

    0010100001 -1

    0 1 0

    '
  - '1 0

    0010101001 -1

    -2 2 0

    '
  - '4 0

    589284011 636562059 767928733 906523440

    4 1 1

    4 2 0

    3 2 0

    '
  - '3 2

    1 2 1

    1 2 1

    3 2 0

    '
  - '5 0

    2 3 4 6 4

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '2 1

    1000010010 1

    2 1 0

    '
  - '3 1

    1 2 2

    1 2 1

    3 2 0

    '
  - '5 0

    1 0 7 2 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '2 1

    1000000111 0

    2 1 0

    '
  - '5 0

    1 0 7 16 1

    1 2 0

    2 4 0

    3 2 1

    1 5 1

    '
  - '5 0

    1 1 7 8 1

    1 2 0

    2 4 0

    3 2 0

    3 5 1

    '
  - '1 2

    1001101011 0

    2 1 0

    '
  - '1 2

    0001101011 0

    2 1 0

    '
  - '2 2

    0000101011 0

    2 1 0

    '
  - '2 1

    1000100010 2

    2 1 0

    '
  - '5 0

    0 3 4 6 4

    1 2 1

    1 4 0

    3 4 1

    2 5 0

    '
  - '2 1

    1000011000 1

    2 1 0

    '
  - '5 0

    2 0 4 6 1

    1 2 0

    1 4 0

    3 2 0

    2 5 1

    '
  - '3 0

    1 2 2

    1 2 1

    3 1 0

    '
  - '2 2

    0000000011 0

    2 1 0

    '
  - '3 0

    1 1 4

    1 2 1

    3 2 1

    '
  - '1 2

    0000101010 0

    1 1 -1

    '
  - '5 0

    1 0 5 6 4

    1 2 1

    1 4 1

    3 4 1

    2 5 0

    '
  - '1 3

    0001001010 -1

    0 0 0

    '
  - '1 3

    1000001010 0

    4 -1 -1

    '
  - '1 0

    0010011001 2

    3 -2 0

    '
  - '5 0

    2 3 5 6 4

    1 2 1

    1 4 1

    3 4 0

    2 5 0

    '
  - '1 0

    0001011011 0

    2 -1 -1

    '
  - '1 0

    0110001001 2

    3 0 0

    '
  - '1 0

    0111001011 0

    2 -2 0

    '
  - '1 1

    0101000001 1

    14 -1 -1

    '
  - '1 1

    0000111001 -1

    2 0 0

    '
  - '1 1

    1100000001 1

    14 -1 -4

    '
  - '1 1

    0100001001 1

    27 -1 -4

    '
  - '1 1

    0001001001 -1

    2 1 0

    '
  - '1 0

    0001100000 -1

    1 1 0

    '
  - '1 0

    0010100000 -1

    -2 1 0

    '
  - '1 0

    0010110001 -1

    -2 2 0

    '
  - '4 0

    589284011 636562059 767928733 938443548

    4 1 1

    4 2 0

    3 2 0

    '
  - '5 0

    2 3 4 6 6

    1 2 1

    1 4 0

    3 2 1

    2 5 0

    '
  - '2 1

    1000110010 1

    2 1 0

    '
  - '2 1

    1000101111 0

    2 1 1

    '
  - '1 2

    0011101011 0

    2 1 0

    '
  - '2 1

    1001100010 2

    2 1 0

    '
  - '2 1

    1000011000 2

    2 1 0

    '
  - '3 0

    1 2 2

    1 2 0

    3 1 0

    '
  - '1 0

    0000100011 0

    1 1 -1

    '
  - '1 3

    1000001001 0

    4 0 -1

    '
  - '1 1

    0101100001 1

    14 -1 -1

    '
  - '1 1

    0100111001 -1

    2 0 0

    '
  - '1 0

    0001110001 -1

    2 1 0

    '
  - '1 0

    1001100000 -1

    1 1 0

    '
  - '5 0

    1 0 4 6 0

    1 2 0

    1 4 0

    3 2 0

    1 5 1

    '
  - '3 2

    2 1 -1

    1 2 1

    3 2 0

    '
  - '2 1

    1000000011 1

    2 1 0

    '
  - '3 2

    0 1 0

    1 2 1

    3 2 0

    '
  - '3 1

    0 1 -1

    1 2 1

    3 2 0

    '
  - '3 0

    0 1 -1

    1 2 1

    3 2 0

    '
  - '3 2

    0 1 1

    1 2 1

    3 2 0

    '
  - '2 2

    1000000010 1

    2 1 0

    '
  - '3 2

    1 1 -2

    1 2 1

    3 2 0

    '
  - '3 2

    2 1 -2

    1 2 1

    3 2 0

    '
  - '3 1

    1 1 -1

    1 2 1

    3 2 0

    '
  - '3 2

    1 2 -2

    1 2 1

    3 2 0

    '
  - '2 1

    1000000011 0

    2 1 0

    '
  - '5 0

    1 0 7 8 1

    1 2 0

    2 4 0

    3 2 1

    2 5 1

    '
  - '2 2

    1000101011 0

    2 1 0

    '
  - '1 2

    0000101011 0

    3 1 0

    '
  - '1 2

    0000101011 0

    3 0 0

    '
  - '1 3

    0000001011 0

    3 0 0

    '
  - '1 3

    0000001011 0

    3 -1 0

    '
  - '1 0

    0000001011 0

    3 -1 0

    '
  - '1 0

    0000001011 1

    3 -1 0

    '
  - '1 1

    0000001011 1

    3 -1 0

    '
  - '1 0

    0000001001 1

    3 -1 0

    '
  - '1 0

    0000001001 2

    3 -1 0

    '
  - '3 1

    1 1 1

    1 2 0

    3 2 0

    '
  - '3 2

    2 1 1

    1 2 1

    3 2 0

    '
  - '2 1

    1000000010 2

    2 1 0

    '
  - '5 0

    1 3 4 6 4

    1 2 1

    1 4 0

    3 4 1

    2 5 0

    '
  - '2 1

    1000010010 0

    2 1 1

    '
  - '3 2

    0 1 0

    1 2 0

    3 2 0

    '
  - '3 2

    0 2 -1

    1 2 1

    3 2 0

    '
  - '3 0

    1 1 -2

    1 2 1

    3 2 0

    '
  - '3 2

    2 1 0

    1 2 1

    3 2 0

    '
  - '3 0

    1 2 2

    1 2 1

    3 2 0

    '
  - '5 0

    2 0 9 3 1

    1 2 0

    1 4 0

    3 2 1

    1 5 1

    '
  - '2 2

    1000000011 0

    2 1 0

    '
  - '2 1

    1000100011 0

    2 1 1

    '
  - '1 2

    1000101011 0

    1 1 0

    '
  - '1 2

    0000101011 0

    1 1 0

    '
  - '1 3

    0000101011 0

    3 0 0

    '
  - '1 2

    0000001011 0

    3 1 0

    '
  - '1 0

    0000001011 0

    1 -1 0

    '
  - '1 1

    0000001001 1

    3 -2 0

    '
  - '1 0

    0000001001 0

    3 -1 0

    '
  - '2 2

    1000000000 0

    2 1 1

    '
  - '3 1

    2 1 1

    1 2 1

    3 2 0

    '
  - '5 0

    1 3 5 6 4

    1 2 1

    1 4 0

    3 4 1

    2 5 0

    '
  - '3 0

    1 1 4

    1 2 1

    3 2 0

    '
  - '1 3

    1000101011 0

    1 1 0

    '
  - '1 2

    0000101011 0

    1 1 -1

    '
  - '1 3

    0000101011 0

    6 0 0

    '
  - '1 3

    0000001010 0

    0 0 0

    '
  - '1 3

    1000001011 0

    3 -1 -1

    '
  - '1 1

    0000001001 1

    3 -2 -1

    '
  - '1 0

    0010001001 2

    3 -1 0

    '
  - '1 0

    0000001001 0

    3 -2 0

    '
  - '2 2

    1000000000 0

    2 1 0

    '
  - '5 0

    2 0 5 6 1

    1 2 0

    1 4 0

    3 4 1

    2 5 1

    '
  - '1 2

    0000101011 -1

    1 1 -1

    '
  - '1 4

    0000101011 0

    6 0 0

    '
  - '1 2

    0000001111 0

    3 1 1

    '
  - '1 3

    0000001010 -1

    0 0 0

    '
  - '1 3

    1000001011 0

    4 -1 -1

    '
  - '1 0

    0001001011 0

    1 -1 -1

    '
  - '1 1

    0000000001 1

    3 -2 -1

    '
  - '1 0

    0010001001 2

    3 -2 0

    '
  - '1 2

    0000101011 -1

    1 2 -1

    '
  - '1 4

    0000101011 0

    3 0 0

    '
  - '1 3

    1000001011 0

    4 0 -1

    '
  - '1 0

    0001001011 0

    2 -1 -1

    '
  - '1 1

    0000000001 1

    5 -2 -1

    '
  - '1 0

    0010001001 2

    3 0 0

    '
  - '1 0

    0010001001 3

    3 0 0

    '
  - '1 2

    0000101001 -1

    1 0 -1

    '
  - '1 0

    0011001011 0

    2 -1 0

    '
  - '1 1

    0000000001 1

    10 -2 -1

    '
  - '1 0

    0000001001 3

    3 0 0

    '
  - '1 2

    0000101001 -1

    1 -1 -1

    '
  - '1 0

    0011001011 0

    2 -2 0

    '
  - '1 1

    0000000001 1

    10 -1 -1

    '
  - '1 0

    0000001011 3

    3 0 0

    '
  - '1 2

    0000101001 -1

    2 -1 -1

    '
  - '1 1

    0000000001 2

    10 -1 -1

    '
  - '1 0

    0000001011 3

    1 0 0

    '
  output:
  - '45'
  - '10'
  - '999999993'
  - '687363872'
  - '6

    '
  - '10

    '
  - '8

    '
  - '51

    '
  - '20006

    '
  - '7

    '
  - '36

    '
  - '4

    '
  - '49

    '
  - '600643382

    '
  - '13

    '
  - '22006

    '
  - '32

    '
  - '46

    '
  - '1

    '
  - '37

    '
  - '33

    '
  - '39

    '
  - '30

    '
  - '580114603

    '
  - '20000006

    '
  - '9

    '
  - '12

    '
  - '60

    '
  - '38

    '
  - '34

    '
  - '5

    '
  - '44

    '
  - '200008

    '
  - '202008

    '
  - '66

    '
  - '73

    '
  - '101004

    '
  - '101011

    '
  - '1011

    '
  - '1001

    '
  - '999999993

    '
  - '35

    '
  - '40

    '
  - '0

    '
  - '21986

    '
  - '41

    '
  - '18

    '
  - '3

    '
  - '48

    '
  - '2

    '
  - '200202008

    '
  - '1010

    '
  - '1004

    '
  - '10001001

    '
  - '52

    '
  - '42

    '
  - '1111

    '
  - '1001011

    '
  - '85

    '
  - '58

    '
  - '1101

    '
  - '101001

    '
  - '101111

    '
  - '11001011

    '
  - '100001

    '
  - '100000001

    '
  - '1101001

    '
  - '1100001

    '
  - '10100001

    '
  - '10101001

    '
  - '654696154

    '
  - '14

    '
  - '55

    '
  - '20008

    '
  - '17

    '
  - '27

    '
  - '208

    '
  - '68

    '
  - '80

    '
  - '1101004

    '
  - '1101011

    '
  - '202022

    '
  - '200010

    '
  - '43

    '
  - '21988

    '
  - '54

    '
  - '11

    '
  - '22

    '
  - '19

    '
  - '101010

    '
  - '70

    '
  - '1001010

    '
  - '1003

    '
  - '10011001

    '
  - '62

    '
  - '1011011

    '
  - '110001001

    '
  - '111001011

    '
  - '101000001

    '
  - '111001

    '
  - '99999994

    '
  - '100001001

    '
  - '1001001

    '
  - '1100000

    '
  - '10100000

    '
  - '10110001

    '
  - '782376586

    '
  - '59

    '
  - '220008

    '
  - '202208

    '
  - '11101011

    '
  - '2200010

    '
  - '21990

    '
  - '16

    '
  - '100011

    '
  - '994

    '
  - '101100001

    '
  - '100111001

    '
  - '1110001

    '
  - '1099993

    '
  - '47

    '
  - '7

    '
  - '10

    '
  - '4

    '
  - '1

    '
  - '1

    '
  - '7

    '
  - '8

    '
  - '1

    '
  - '4

    '
  - '4

    '
  - '5

    '
  - '8

    '
  - '51

    '
  - '202008

    '
  - '101011

    '
  - '101011

    '
  - '1011

    '
  - '1011

    '
  - '1011

    '
  - '1011

    '
  - '1011

    '
  - '1001

    '
  - '1001

    '
  - '10

    '
  - '13

    '
  - '10

    '
  - '46

    '
  - '20006

    '
  - '4

    '
  - '5

    '
  - '1

    '
  - '10

    '
  - '12

    '
  - '39

    '
  - '8

    '
  - '200008

    '
  - '101004

    '
  - '101011

    '
  - '101011

    '
  - '1011

    '
  - '1011

    '
  - '1001

    '
  - '1001

    '
  - '999999993

    '
  - '13

    '
  - '48

    '
  - '13

    '
  - '101004

    '
  - '101011

    '
  - '101011

    '
  - '1010

    '
  - '1004

    '
  - '1001

    '
  - '10001001

    '
  - '1001

    '
  - '999999993

    '
  - '44

    '
  - '101011

    '
  - '101011

    '
  - '1111

    '
  - '1010

    '
  - '1004

    '
  - '1001011

    '
  - '1

    '
  - '10001001

    '
  - '101011

    '
  - '101011

    '
  - '1004

    '
  - '1001011

    '
  - '1

    '
  - '10001001

    '
  - '10001001

    '
  - '101001

    '
  - '11001011

    '
  - '1

    '
  - '1001

    '
  - '101001

    '
  - '11001011

    '
  - '1

    '
  - '1011

    '
  - '101001

    '
  - '1

    '
  - '1011

    '
timeout: 4.0
