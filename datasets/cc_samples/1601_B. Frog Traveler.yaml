prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nTax Rate Changed\n\
  \nVAT (value-added tax) is a tax imposed at a certain rate proportional to the sale\
  \ price.\n\nOur store uses the following rules to calculate the after-tax prices.\n\
  \n* When the VAT rate is x%, for an item with the before-tax price of p yen, its\
  \ after-tax price of the item is p (100+x) / 100 yen, fractions rounded off.\n*\
  \ The total after-tax price of multiple items paid at once is the sum of after-tax\
  \ prices of the items.\n\n\n\nThe VAT rate is changed quite often. Our accountant\
  \ has become aware that \"different pairs of items that had the same total after-tax\
  \ price may have different total after-tax prices after VAT rate changes.\" For\
  \ example, when the VAT rate rises from 5% to 8%, a pair of items that had the total\
  \ after-tax prices of 105 yen before can now have after-tax prices either of 107,\
  \ 108, or 109 yen, as shown in the table below.\n\nBefore-tax prices of two items|\
  \ After-tax price with 5% VAT| After-tax price with 8% VAT\n---|---|---\n20, 80|\
  \ 21 + 84 = 105| 21 + 86 = 107\n2, 99| 2 + 103 = 105| 2 + 106 = 108\n13, 88| 13\
  \ + 92 = 105| 14 + 95 = 109\n\n\n\nOur accountant is examining effects of VAT-rate\
  \ changes on after-tax prices. You are asked to write a program that calculates\
  \ the possible maximum total after-tax price of two items with the new VAT rate,\
  \ knowing their total after-tax price before the VAT rate change.\n\nInput\n\nThe\
  \ input consists of multiple datasets. Each dataset is in one line, which consists\
  \ of three integers x, y, and s separated by a space. x is the VAT rate in percent\
  \ before the VAT-rate change, y is the VAT rate in percent after the VAT-rate change,\
  \ and s is the sum of after-tax prices of two items before the VAT-rate change.\
  \ For these integers, 0 < x < 100, 0 < y < 100, 10 < s < 1000, and x \u2260 y hold.\
  \ For before-tax prices of items, all possibilities of 1 yen through s-1 yen should\
  \ be considered.\n\nThe end of the input is specified by three zeros separated by\
  \ a space.\n\nOutput\n\nFor each dataset, output in a line the possible maximum\
  \ total after-tax price when the VAT rate is changed to y%.\n\nSample Input\n\n\n\
  5 8 105\n8 5 105\n1 2 24\n99 98 24\n12 13 26\n1 22 23\n1 13 201\n13 16 112\n2 24\
  \ 50\n1 82 61\n1 84 125\n1 99 999\n99 1 999\n98 99 999\n1 99 11\n99 1 12\n0 0 0\n\
  \n\nOutput for the Sample Input\n\n\n109\n103\n24\n24\n26\n27\n225\n116\n62\n111\n\
  230\n1972\n508\n1004\n20\n7\n\n\nHints\n\nIn the following table, an instance of\
  \ a before-tax price pair that has the maximum after-tax price after the VAT-rate\
  \ change is given for each dataset of the sample input.\n\nDataset| Before-tax prices|\
  \ After-tax price with y% VAT\n---|---|---\n5 8 105 |  13, 88|  14 + 95 = 109\n\
  8 5 105 |  12, 87|  12 + 91 = 103\n1 2 24 |  1, 23|  1 + 23 = 24\n99 98 24 |  1,\
  \ 12|  1 + 23 = 24\n12 13 26 |  1, 23|  1 + 25 = 26\n1 22 23 |  1, 22|  1 + 26 =\
  \ 27\n1 13 201 |  1,199|  1 +224 = 225\n13 16 112|  25, 75|  29 + 87 = 116\n2 24\
  \ 50 |  25, 25|  31 + 31 = 62\n1 82 61 |  11, 50|  20 + 91 = 111\n1 84 125 |  50,\
  \ 75|  92 +138 = 230\n1 99 999 |  92,899| 183+1789 =1972\n99 1 999 |  1,502|  1\
  \ +507 = 508\n98 99 999|  5,500|  9 +995 =1004\n1 99 11 |  1, 10|  1 + 19 = 20\n\
  99 1 12 |  1, 6|  1 + 6 = 7\n\n\n\n\n\nExample\n\nInput\n\n5 8 105\n8 5 105\n1 2\
  \ 24\n99 98 24\n12 13 26\n1 22 23\n1 13 201\n13 16 112\n2 24 50\n1 82 61\n1 84 125\n\
  1 99 999\n99 1 999\n98 99 999\n1 99 11\n99 1 12\n0 0 0\n\n\nOutput\n\n109\n103\n\
  24\n24\n26\n27\n225\n116\n62\n111\n230\n1972\n508\n1004\n20\n7\nA: ```from math\
  \ import floor\nwhile(True):\n    x,y,s=map(int,input().split())\n    if (x,y,s)==(0,0,0):\n\
  \        quit()\n    ans=0\n    for i in range(1,s):\n        j=s-floor(i*(100+x)/100)\n\
  \        if j<1:\n            continue\n        j=floor((j+1)*(100/(100+x)))\n \
  \       for k in [j-1,j]:\n            if floor(i*(100+x)/100)+floor(k*(100+x)/100)==s:\n\
  \                ans=max(ans,floor(i*(100+y)/100)+floor(k*(100+y)/100))\n    print(ans)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nTaro and Hanako decided\
  \ to play hit-and-blow. The hit-and-blow rules are as follows.\n\n* Separated into\
  \ questioners and respondents.\n* The questioner decides a 4-digit number (correct\
  \ answer) that does not include duplicate numbers.\n* Respondents guess the 4-digit\
  \ number (answer).\n* For the answer, the questioner gives a hint by the number\
  \ of hits and blows.\n* Comparing the answer and the correct answer, the fact that\
  \ both the number and the digit position are the same is called a hit, and the fact\
  \ that only the number is the same but the digit position is different is called\
  \ a blow. For example, if the correct answer is 1234 and the answer is 1354, the\
  \ questioner gives the hint \"2 hits, 1 blow\" and repeats until the correct answer.\n\
  * The questioner and the respondent take turns playing the game, and the one who\
  \ guesses the correct answer with fewer answers wins.\n\n\n\nTaro and Hanako seem\
  \ to find it a little annoying to judge the number of hits and the number of blows\
  \ each time. For those two, let's create a program that instantly shows the number\
  \ of hits and the number of blows.\n\nCreate a program that inputs the correct answer\
  \ r and the answer a and outputs the number of hits and the number of blows. r and\
  \ a are a sequence of four numbers, 0 to 9, respectively.\n\n\n\nInput\n\nA sequence\
  \ of multiple datasets is given as input. The end of the input is indicated by two\
  \ lines of zeros. For each dataset, r and a are given on one line, separated by\
  \ blanks.\n\nThe number of datasets does not exceed 12000.\n\nOutput\n\nOutputs\
  \ the number of hits and the number of blows on one line for each input dataset.\n\
  \nExample\n\nInput\n\n1234 5678\n1234 1354\n1234 1234\n1230 1023\n0123 1234\n0 0\n\
  \n\nOutput\n\n0 0\n2 1\n4 0\n1 3\n0 3\nA: ```while 1:\n    x,y = map(list,input().split())\n\
  \    if x == ['0'] and y== ['0']: break\n\n    h = b = 0\n    for i in range(len(x)):\n\
  \        if x[i] == y[i]:\n            h += 1\n        elif y[i] in x:\n       \
  \     b += 1\n\n    print ('%d %d' % (h,b))```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nFrog Gorf is traveling through Swamp kingdom. Unfortunately,\
  \ after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom\
  \ of the well and has a long way up.\n\nThe surface of the well's walls vary in\
  \ quality: somewhere they are slippery, but somewhere have convenient ledges. In\
  \ other words, if Gorf is on x meters below ground level, then in one jump he can\
  \ go up on any integer distance from 0 to a_x meters inclusive. (Note that Gorf\
  \ can't jump down, only up).\n\nUnfortunately, Gorf has to take a break after each\
  \ jump (including jump on 0 meters). And after jumping up to position x meters below\
  \ ground level, he'll slip exactly b_x meters down while resting.\n\nCalculate the\
  \ minimum number of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first\
  \ line contains a single integer n (1 \u2264 n \u2264 300 000) \u2014 the depth\
  \ of the well.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264\
  \ a_i \u2264 i), where a_i is the maximum height Gorf can jump from i meters below\
  \ ground level.\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (0 \u2264\
  \ b_i \u2264 n - i), where b_i is the distance Gorf will slip down if he takes a\
  \ break on i meters below ground level.\n\nOutput\n\nIf Gorf can't reach ground\
  \ level, print -1. Otherwise, firstly print integer k \u2014 the minimum possible\
  \ number of jumps.\n\nThen print the sequence d_1,\\,d_2, \u2026,\\,d_k where d_j\
  \ is the depth Gorf'll reach after the j-th jump, but before he'll slip down during\
  \ the break. Ground level is equal to 0.\n\nIf there are multiple answers, print\
  \ any of them.\n\nExamples\n\nInput\n\n\n3\n0 2 2\n1 1 0\n\n\nOutput\n\n\n2\n1 0\
  \ \n\n\nInput\n\n\n2\n1 1\n1 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n10\n0 1 2 3 5\
  \ 5 6 7 8 5\n9 8 7 1 5 4 3 2 0 0\n\n\nOutput\n\n\n3\n9 4 0 \n\nNote\n\nIn the first\
  \ example, Gorf is on the bottom of the well and jump to the height 1 meter below\
  \ ground level. After that he slip down by meter and stays on height 2 meters below\
  \ ground level. Now, from here, he can reach ground level in one jump.\n\nIn the\
  \ second example, Gorf can jump to one meter below ground level, but will slip down\
  \ back to the bottom of the well. That's why he can't reach ground level.\n\nIn\
  \ the third example, Gorf can reach ground level only from the height 5 meters below\
  \ the ground level. And Gorf can reach this height using a series of jumps 10 \u21D2\
  \ 9 \\dashrightarrow 9 \u21D2 4 \\dashrightarrow 5 where \u21D2 is the jump and\
  \ \\dashrightarrow is slipping during breaks.\nA:"
question: "Frog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor\
  \ jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the\
  \ well and has a long way up.\n\nThe surface of the well's walls vary in quality:\
  \ somewhere they are slippery, but somewhere have convenient ledges. In other words,\
  \ if Gorf is on x meters below ground level, then in one jump he can go up on any\
  \ integer distance from 0 to a_x meters inclusive. (Note that Gorf can't jump down,\
  \ only up).\n\nUnfortunately, Gorf has to take a break after each jump (including\
  \ jump on 0 meters). And after jumping up to position x meters below ground level,\
  \ he'll slip exactly b_x meters down while resting.\n\nCalculate the minimum number\
  \ of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first line contains\
  \ a single integer n (1 \u2264 n \u2264 300 000) \u2014 the depth of the well.\n\
  \nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264\
  \ i), where a_i is the maximum height Gorf can jump from i meters below ground level.\n\
  \nThe third line contains n integers b_1, b_2, \u2026, b_n (0 \u2264 b_i \u2264\
  \ n - i), where b_i is the distance Gorf will slip down if he takes a break on i\
  \ meters below ground level.\n\nOutput\n\nIf Gorf can't reach ground level, print\
  \ -1. Otherwise, firstly print integer k \u2014 the minimum possible number of jumps.\n\
  \nThen print the sequence d_1,\\,d_2, \u2026,\\,d_k where d_j is the depth Gorf'll\
  \ reach after the j-th jump, but before he'll slip down during the break. Ground\
  \ level is equal to 0.\n\nIf there are multiple answers, print any of them.\n\n\
  Examples\n\nInput\n\n\n3\n0 2 2\n1 1 0\n\n\nOutput\n\n\n2\n1 0 \n\n\nInput\n\n\n\
  2\n1 1\n1 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n10\n0 1 2 3 5 5 6 7 8 5\n9 8 7 1\
  \ 5 4 3 2 0 0\n\n\nOutput\n\n\n3\n9 4 0 \n\nNote\n\nIn the first example, Gorf is\
  \ on the bottom of the well and jump to the height 1 meter below ground level. After\
  \ that he slip down by meter and stays on height 2 meters below ground level. Now,\
  \ from here, he can reach ground level in one jump.\n\nIn the second example, Gorf\
  \ can jump to one meter below ground level, but will slip down back to the bottom\
  \ of the well. That's why he can't reach ground level.\n\nIn the third example,\
  \ Gorf can reach ground level only from the height 5 meters below the ground level.\
  \ And Gorf can reach this height using a series of jumps 10 \u21D2 9 \\dashrightarrow\
  \ 9 \u21D2 4 \\dashrightarrow 5 where \u21D2 is the jump and \\dashrightarrow is\
  \ slipping during breaks."
samples:
- " ```from collections import deque\nn = int(input())\na = list(map(int, input().split()))\n\
  b = list(map(int, input().split()))\nd = deque([0])\nwhile d[0] < n:\n    x = d.popleft()\n\
  \    for i in range(x+1, min(x+a[x], n)+1):\n        d.append(i)\n    for i in range(x-b[x],\
  \ x):\n        d.append(i)\n    if d[0] >= n:\n        break\nif d[0] < n:\n   \
  \ print(-1)\nelse:\n    print(len(d)-1)\n    print(' '.join(map(str, d)))```\nQ:"
- " ```from collections import deque\nn = int(input())\na = list(map(int, input().split()))\n\
  b = list(map(int, input().split()))\nq = deque([(0, 0)])\nans = []\nwhile q:\n \
  \   x, cnt = q.popleft()\n    if x == 0:\n        print(cnt)\n        for i in range(cnt):\n\
  \            print(ans[i], end=' ')\n        break\n    if x < 0:\n        print(-1)\n\
  \        break\n    for i in range(x, 0, -1):\n        if i in a:\n            q.append((i-b[a.index(i)],\
  \ cnt+1))\n            ans.append(i)\n        if i-1 in a:\n            q.append((i-1-b[a.index(i-1)],\
  \ cnt+1))\n            ans.append(i-1)\nans = []\nwhile q:\n    x, cnt = q.popleft()\n\
  \    if x == 0:\n        print(cnt)\n        for i in range(cnt):\n            print(ans[i],\
  \ end=' ')\n        break\n    if x < 0:\n        print(-1)\n        break``` A:\
  \ ```from collections import deque\nn = int(input())\na = list(map(int, input().split()))\n\
  b = list(map(int, input().split()))\nq = deque([(0, 0)])\nwhile q:\n    x, cnt =\
  \ q.popleft()\n    if x == 0:\n        print(cnt)\n        break\n    if x < 0:\n\
  \        print(-1)\n        break\n    for i in range(x, 0, -1):\n        if i in\
  \ a:\n            q.append((i-b[a.index(i)], cnt+1))\n        if i-1 in a:\n   \
  \         q.append((i-1-b[a.index(i-1)], cnt+1))\n    if not q:\n        print(-1)\n\
  \        break``` A: ```from collections import deque\nn = int(input())\na = list(map(int,\
  \ input().split()))\nb = list(map(int, input().split()))\nq = deque([(0, 0)])\n\
  while q:\n    x, cnt = q.popleft()\n    if x == 0:\n        print(cnt)\n       \
  \ break\n    if x < 0:\n        print(-1)\n        break\n    for i in range(x,\
  \ 0, -1):\n        if i in a:\n            q.append((i-b[a.index(i)], cnt+1))\n\
  \        if i-1 in a:\n            q.append((i-1-b[a.index(i-1)], cnt+1))\n    if\
  \ not q:\n        print(-1)\n        break\n    q = deque(sorted(q))\nwhile q:\n\
  \    x, cnt = q.popleft()\n    if x == 0:\n        print(cnt)\n        break\n \
  \   if x < 0:\n        print(-1)\n        break\n    for i in range(x, 0, -1):\n\
  \        if i in a:\n            q.append((i-b[a.index(i)], cnt+1))\n        if\
  \ i-1 in a:\n            q.append((i-1-b[a.index(i-1)], cnt+1))\n    if not q:\n\
  \        print(-1)\n        break``` A: ```from collections import deque\nn = int(input())\n\
  a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nq = deque([(0,\
  \ 0)])\nwhile q:\n    x, cnt = q.popleft()\n    if x == 0:\n        print(cnt)\n\
  \        break\n    if x < 0:\n        print(-1)\n        break\n    for i in range(x,\
  \ 0, -1):\n        if i in a:\n            q.append((i-b[a.index(i)], cnt+1))\n\
  \        if i-1 in a:\n            q.append((i-1-b[a.index(i-1)], cnt+1))\n    if\
  \ not q:\n        print(-1)\n        break\n    q = deque(sorted(q))\nwhile q:\n\
  \    x, cnt = q.popleft()\n    if x == 0:\n        print(cnt)\n        break\n \
  \   if x < 0:\n        print(-1)\n        break\n    for i in range(x, 0, -1):\n\
  \        if i in a:\n            q.append((i-b[a.index(i)], cnt+1))\n        if\
  \ i-1 in a:\n            q.append((i-1-b[a.index(i-1)], cnt+1))\n    if not q:\n\
  \        print(-1)\n        break\n    q = deque(sorted(q))``` A: ```from collections\
  \ import deque\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int,\
  \ input().split()))\nq = deque([(0, 0)])\nwhile q:\n    x, cnt = q.popleft()\n \
  \   if x == 0:\n        print(cnt)\n        break\n    if x < 0:\n        print(-1)\n\
  \        break"
test_cases:
  input:
  - '2

    1 1

    1 0

    '
  - '3

    0 2 2

    1 1 0

    '
  - '10

    0 1 2 3 5 5 6 7 8 5

    9 8 7 1 5 4 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 5 7 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 0 0 5 0 0 1 1 1 0

    '
  - '10

    1 0 2 2 5 0 0 0 2 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '5

    0 0 1 4 2

    0 2 0 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 5

    7 6 2 3 5 1 2 0 1 0

    '
  - '1

    1

    0

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 9

    8 8 8 1 1 4 4 0 3 1 1 0

    '
  - '19

    1 1 3 4 5 3 5 7 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '10

    1 0 2 0 5 0 0 0 2 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 9

    8 8 8 1 1 4 4 0 0 1 1 0

    '
  - '10

    0 1 2 3 5 5 0 7 8 5

    9 8 7 1 5 4 3 2 0 0

    '
  - '10

    1 0 2 2 5 0 0 1 2 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 9

    8 8 8 1 1 4 4 0 3 2 1 0

    '
  - '2

    1 1

    0 0

    '
  - '3

    0 2 1

    1 0 0

    '
  - '10

    1 1 1 0 3 1 7 2 4 2

    7 6 2 3 5 1 2 0 1 0

    '
  - '10

    1 0 2 2 5 0 0 0 2 6

    4 3 1 0 4 3 3 2 1 0

    '
  - '2

    1 2

    1 0

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 3 1 10 3 13 9 1 4 2

    3 0 6 3 8 6 8 7 8 6 0 0 5 0 0 1 1 1 0

    '
  - '19

    1 1 3 4 5 3 7 0 0 6 3 1 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    0 6 2 3 1 1 2 0 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 5 1 2 0 1 0

    '
  - '3

    0 2 1

    1 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 4 1 2 0 1 0

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 9

    8 8 8 1 1 4 4 0 0 1 0 0

    '
  - '3

    0 2 1

    0 1 0

    '
  - '10

    0 1 2 3 0 5 0 7 8 5

    9 8 7 1 5 4 3 2 0 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    7 6 2 3 4 1 2 0 1 0

    '
  - '3

    0 2 0

    0 1 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    7 6 2 3 4 1 2 0 1 -1

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 0 0 5 0 0 1 1 1 0

    '
  - '5

    0 0 1 4 2

    0 1 0 1 0

    '
  - '10

    1 1 1 1 3 0 6 2 4 5

    7 6 2 3 5 1 2 0 1 0

    '
  - '3

    0 0 2

    1 1 0

    '
  - '10

    0 1 2 3 5 5 6 7 8 5

    9 7 7 1 5 4 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 5 7 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 -1 0 5 1 0 1 1 1 0

    '
  - '10

    1 0 2 0 5 1 0 0 2 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    7 6 2 3 5 1 2 0 1 0

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 0

    8 8 8 1 1 4 4 0 0 1 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 0 1 2 0 1 0

    '
  - '12

    1 0 0 2 2 5 5 1 9 6 2 9

    8 8 8 1 1 4 4 0 0 1 0 0

    '
  - '10

    0 1 2 4 0 5 0 7 8 5

    9 8 7 1 5 4 3 2 0 0

    '
  - '10

    1 1 1 0 3 2 6 2 4 2

    7 6 2 3 4 1 2 0 1 0

    '
  - '3

    -1 2 0

    0 1 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    7 6 2 3 1 1 2 0 1 -1

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 3 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 0 0 5 0 0 1 1 1 0

    '
  - '10

    1 0 2 2 5 0 0 1 0 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '5

    0 0 1 4 0

    0 1 0 1 0

    '
  - '10

    1 1 1 1 3 0 6 2 4 5

    7 6 2 3 5 2 2 0 1 0

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 9

    8 8 8 1 1 4 4 0 3 2 1 0

    '
  - '10

    0 1 2 3 5 5 6 7 8 0

    9 7 7 1 5 4 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 5 7 0 6 5 3 10 3 13 9 1 4 17

    3 -1 6 3 8 6 8 7 8 6 -1 0 5 1 0 1 1 1 0

    '
  - '10

    1 0 2 0 5 1 0 0 2 7

    4 0 1 0 4 3 3 2 1 0

    '
  - '12

    1 0 0 1 0 5 5 1 9 6 2 0

    8 8 8 1 1 4 4 0 0 1 1 0

    '
  - '3

    0 4 1

    1 1 0

    '
  - '10

    1 1 2 0 3 0 6 2 4 2

    7 6 2 3 0 1 2 0 1 0

    '
  - '10

    -1 1 2 4 0 5 0 7 8 5

    9 8 7 1 5 4 3 2 0 0

    '
  - '10

    1 1 1 0 3 2 6 2 4 2

    5 6 2 3 4 1 2 0 1 0

    '
  - '3

    -1 2 0

    -1 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 1 1 2 0 1 -1

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 3 1 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 0 0 5 0 0 1 1 1 0

    '
  - '5

    0 0 1 4 0

    1 1 0 1 0

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 9

    8 8 8 1 1 4 4 0 2 2 1 0

    '
  - '10

    0 1 2 3 8 5 6 7 8 0

    9 7 7 1 5 4 3 2 0 0

    '
  - '10

    1 0 2 0 5 1 0 0 2 5

    4 0 1 0 4 3 3 2 1 0

    '
  - '3

    0 6 1

    1 1 0

    '
  - '10

    1 1 2 0 3 0 6 2 4 2

    7 6 2 3 -1 1 2 0 1 0

    '
  - '10

    0 1 2 4 0 5 0 7 8 4

    9 8 7 1 5 4 3 2 0 0

    '
  - '10

    1 1 1 0 3 2 6 2 4 2

    5 6 2 3 4 1 2 0 0 0

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 3 1 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '5

    0 0 0 4 0

    1 1 0 1 0

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 9

    8 8 8 1 0 4 4 0 2 2 1 0

    '
  - '10

    0 1 2 3 8 5 6 7 8 0

    9 7 7 0 5 4 3 2 0 0

    '
  - '10

    1 1 2 0 2 0 6 2 4 2

    7 6 2 3 -1 1 2 0 1 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 3 1 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 0

    9 7 7 0 5 4 3 2 0 0

    '
  - '10

    1 1 2 0 2 0 6 2 4 2

    7 6 2 3 -2 1 2 0 1 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 3 1 10 3 13 3 1 4 17

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 0

    9 7 7 0 5 0 3 2 0 0

    '
  - '10

    1 1 2 0 2 -1 6 2 4 2

    7 6 2 3 -2 1 2 0 1 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 3 1 10 3 13 3 1 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 0

    9 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 3 1 10 3 13 3 2 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 2 0 3 8 5 6 7 8 0

    9 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 4 1 10 3 13 3 2 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '19

    1 1 3 4 5 3 5 11 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '5

    0 0 1 3 2

    0 2 0 1 0

    '
  - '10

    0 1 1 0 3 0 6 2 4 5

    7 6 2 3 5 1 2 0 1 0

    '
  - '12

    1 0 0 1 2 5 5 1 9 4 2 9

    8 8 8 1 1 4 4 0 3 1 1 0

    '
  - '10

    -1 1 2 3 5 5 6 7 8 5

    9 8 7 1 5 4 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 5 7 0 6 5 0 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '10

    1 0 2 0 5 0 0 0 1 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 5 1 2 0 1 -1

    '
  - '12

    1 0 0 1 2 5 6 1 9 6 2 9

    8 8 8 1 1 4 4 0 0 1 1 0

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 9

    8 8 8 0 1 4 4 0 0 1 0 0

    '
  - '10

    1 1 1 0 3 1 6 2 7 2

    7 6 2 3 4 1 2 0 1 0

    '
  - '3

    0 2 0

    1 1 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    7 6 2 5 4 1 2 0 1 -1

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 0 -1 5 0 0 1 1 1 0

    '
  - '5

    0 0 1 4 2

    -1 1 0 1 0

    '
  - '10

    1 1 0 1 3 0 6 2 4 5

    7 6 2 3 5 1 2 0 1 0

    '
  - '3

    0 0 2

    2 1 0

    '
  - '10

    1 0 2 0 5 1 0 0 2 7

    4 3 1 0 4 3 3 1 1 0

    '
  - '12

    1 0 0 1 2 9 5 1 9 6 2 0

    8 8 8 1 1 4 4 0 0 1 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 0 0 2 0 1 0

    '
  - '10

    0 1 2 4 0 5 0 7 8 5

    9 8 7 1 5 4 2 2 0 0

    '
  - '10

    1 1 1 0 3 2 2 2 4 2

    7 6 2 3 4 1 2 0 1 0

    '
  - '3

    -1 4 0

    0 1 0

    '
  - '10

    1 1 1 0 3 1 6 2 4 2

    7 6 2 3 1 1 2 0 1 0

    '
  - '10

    1 0 2 2 5 0 -1 1 0 7

    4 3 1 0 4 3 3 2 1 0

    '
  - '10

    0 1 2 0 5 5 6 7 8 0

    9 7 7 1 5 4 3 2 0 0

    '
  - '19

    1 1 3 4 5 0 5 7 0 6 5 3 10 3 13 9 1 4 17

    3 -1 6 3 8 6 8 7 8 6 -1 0 5 1 0 1 1 1 0

    '
  - '10

    1 0 2 0 5 1 0 0 2 7

    5 0 1 0 4 3 3 2 1 0

    '
  - '10

    1 1 1 0 3 1 7 2 4 2

    7 7 2 3 5 1 2 0 1 0

    '
  - '12

    1 0 0 1 0 5 5 0 9 6 2 0

    8 8 8 1 1 4 4 0 0 1 1 0

    '
  - '10

    1 1 1 0 3 2 6 2 4 4

    5 6 2 3 4 1 2 0 1 0

    '
  - '10

    1 0 1 0 3 0 6 2 4 2

    7 6 2 3 1 1 2 0 1 -1

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 9

    9 8 8 1 1 4 4 0 2 2 1 0

    '
  - '10

    0 1 2 3 8 5 6 7 16 0

    9 7 7 1 5 4 3 2 0 0

    '
  - '10

    1 0 2 0 5 1 0 0 2 5

    4 0 1 0 4 0 3 2 1 0

    '
  - '10

    1 1 2 0 3 0 6 2 4 2

    7 6 2 3 -1 1 1 0 1 0

    '
  - '10

    0 1 2 4 0 5 0 7 8 4

    9 8 7 1 5 4 3 0 0 0

    '
  - '10

    1 1 1 0 3 2 6 1 4 2

    5 6 2 3 4 1 2 0 0 0

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 9

    8 8 8 1 0 4 4 0 0 2 1 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 3 1 10 3 13 9 1 4 19

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 0

    9 7 7 0 5 4 3 0 0 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 0

    9 7 7 -1 5 0 3 2 0 0

    '
  - '10

    1 1 2 0 2 -1 6 2 4 2

    7 6 2 3 -2 1 1 0 1 0

    '
  - '19

    1 1 3 4 5 3 0 0 0 6 3 1 10 3 13 3 1 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 2 2 3 8 0 6 7 8 0

    9 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 4 3 1 10 3 13 3 2 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 0 0 3 8 5 6 7 8 0

    9 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 6 4 1 10 3 13 3 2 4 17

    3 -1 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '19

    1 1 3 4 5 3 5 11 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 8 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '5

    0 0 1 3 2

    1 2 0 1 0

    '
  - '10

    0 1 1 0 3 0 6 2 4 5

    7 6 2 3 5 2 2 0 1 0

    '
  - '12

    0 0 0 1 2 5 5 1 9 4 2 9

    8 8 8 1 1 4 4 0 3 1 1 0

    '
  - '19

    1 1 3 4 5 3 3 7 0 6 5 0 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '10

    1 0 2 0 5 0 0 0 1 7

    4 3 1 0 4 3 3 0 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 8 2 3 5 1 2 0 1 -1

    '
  - '12

    1 0 0 1 2 5 5 1 9 6 2 9

    8 8 8 0 1 4 4 0 0 0 0 0

    '
  - '10

    0 1 1 0 3 1 6 2 4 2

    7 6 2 5 4 1 2 0 1 -1

    '
  - '19

    1 1 3 4 5 3 5 0 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 3 8 6 0 -1 5 0 0 1 1 1 0

    '
  - '5

    -1 0 1 4 2

    -1 1 0 1 0

    '
  - '10

    1 1 0 1 3 0 6 2 4 5

    7 6 2 3 5 1 2 -1 1 0

    '
  - '2

    0 2

    1 0

    '
  - '3

    0 1 2

    2 1 0

    '
  - '10

    1 0 2 0 5 1 0 1 2 7

    4 3 1 0 4 3 3 1 1 0

    '
  - '12

    1 0 0 1 2 9 5 1 9 6 2 0

    8 8 8 1 1 4 4 1 0 1 1 0

    '
  - '10

    1 0 1 0 3 0 6 2 4 2

    7 6 2 3 0 0 2 0 1 0

    '
  - '10

    1 1 1 0 3 2 2 2 4 2

    7 6 3 3 4 1 2 0 1 0

    '
  - '3

    -1 4 0

    -1 1 0

    '
  - '10

    0 1 2 -1 5 5 6 7 8 0

    9 7 7 1 5 4 3 2 0 0

    '
  - '19

    1 1 3 4 5 0 5 7 0 6 5 3 10 3 13 9 1 4 17

    3 -1 3 3 8 6 8 7 8 6 -1 0 5 1 0 1 1 1 0

    '
  - '12

    1 0 0 1 0 5 5 0 9 6 2 0

    8 8 8 1 0 4 4 0 0 1 1 0

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 7

    9 8 8 1 1 4 4 0 2 2 1 0

    '
  - '10

    0 0 2 3 8 5 6 7 16 0

    9 7 7 1 5 4 3 2 0 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 -1 1 1 0 1 0

    '
  - '10

    0 1 3 4 0 5 0 7 8 4

    9 8 7 1 5 4 3 0 0 0

    '
  - '10

    1 1 1 0 3 2 6 1 4 2

    5 6 2 3 4 1 2 -1 0 0

    '
  - '19

    1 1 3 4 1 3 7 0 0 6 3 1 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '12

    1 0 0 1 2 5 1 1 9 6 2 9

    8 8 8 1 0 5 4 0 0 2 1 0

    '
  - '10

    0 2 2 3 8 5 5 7 8 0

    9 7 7 0 5 4 3 0 0 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 0

    9 7 5 -1 5 0 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 0 0 0 6 3 1 10 3 13 3 1 4 17

    1 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    1 2 2 3 8 0 6 7 8 0

    9 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 1 0 0 7 3 1 10 3 13 3 2 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 0 0 3 8 5 6 7 8 0

    2 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 0 0 0 6 4 1 10 3 13 3 2 4 17

    3 -1 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '19

    1 1 3 4 5 3 5 11 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 8 8 3 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '5

    0 0 1 3 3

    1 2 0 1 0

    '
  - '10

    0 1 1 0 3 0 6 2 4 5

    4 6 2 3 5 2 2 0 1 0

    '
  - '12

    0 0 0 1 2 5 5 1 9 4 2 9

    8 8 8 1 1 4 4 0 3 1 0 0

    '
  - '19

    1 1 3 4 5 3 3 7 0 6 5 0 10 3 13 9 1 4 17

    3 0 6 3 8 1 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 5 2 3 5 1 2 0 1 -1

    '
  - '12

    1 0 -1 1 2 5 5 1 9 6 2 9

    8 8 8 0 1 4 4 0 0 0 0 0

    '
  - '10

    0 1 1 0 0 1 6 2 4 2

    7 6 2 5 4 1 2 0 1 -1

    '
  - '19

    1 1 1 4 5 3 5 0 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 3 8 6 0 -1 5 0 0 1 1 1 0

    '
  - '5

    -1 0 1 4 2

    -1 1 -1 1 0

    '
  - '10

    1 1 0 1 3 0 6 2 4 5

    7 6 2 3 5 0 2 -1 1 0

    '
  - '12

    1 0 1 1 2 9 5 1 9 6 2 0

    8 8 8 1 1 4 4 1 0 1 1 0

    '
  - '10

    1 1 1 0 3 2 2 2 1 2

    7 6 3 3 4 1 2 0 1 0

    '
  - '3

    -1 5 0

    -1 1 0

    '
  - '10

    1 1 1 -1 3 1 6 2 4 2

    0 6 2 3 1 1 2 0 1 0

    '
  - '10

    0 1 2 -1 5 5 6 7 8 0

    9 7 7 1 5 4 1 2 0 0

    '
  - '12

    1 0 0 1 0 5 5 0 9 6 2 0

    8 8 2 1 0 4 4 0 0 1 1 0

    '
  - '12

    1 -1 0 1 2 5 1 1 9 6 2 7

    9 8 8 1 1 4 4 0 2 2 1 0

    '
  - '10

    0 0 2 3 8 5 6 7 16 0

    9 7 7 1 5 4 0 2 0 0

    '
  - '10

    1 1 1 0 3 0 6 2 4 2

    7 6 2 3 -1 1 1 1 1 0

    '
  - '10

    0 1 3 4 0 5 0 7 8 4

    9 8 2 1 5 4 3 0 0 0

    '
  - '10

    1 1 1 0 3 2 6 0 4 2

    5 6 2 3 4 1 2 -1 0 0

    '
  - '19

    1 1 3 4 1 3 7 0 0 6 5 1 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 7 8 6 1 0 5 0 0 1 1 1 0

    '
  - '12

    1 0 0 1 0 5 1 1 9 6 2 9

    8 8 8 1 0 5 4 0 0 2 1 0

    '
  - '10

    0 2 2 3 0 5 5 7 8 0

    9 7 7 0 5 4 3 0 0 0

    '
  - '10

    0 2 2 3 8 5 6 7 8 1

    9 7 5 -1 5 0 3 2 0 0

    '
  - '19

    1 1 5 4 5 3 0 0 0 6 3 1 10 3 13 3 1 4 17

    1 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    1 2 2 3 8 0 6 7 8 0

    9 7 7 -1 5 -1 3 2 0 0

    '
  - '19

    1 0 3 4 5 3 1 0 0 7 3 1 10 3 13 3 2 4 17

    3 0 6 3 8 6 8 7 5 6 1 0 5 0 0 1 1 1 0

    '
  - '10

    0 0 0 1 8 5 6 7 8 0

    2 7 7 0 5 -1 3 2 0 0

    '
  - '19

    1 1 3 4 5 3 5 11 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 8 8 3 8 6 -1 0 5 0 0 1 1 0 0

    '
  - '5

    0 0 2 3 3

    1 2 0 1 0

    '
  - '12

    0 0 0 1 2 5 5 1 9 8 2 9

    8 8 8 1 1 4 4 0 3 1 0 0

    '
  - '19

    1 1 3 4 5 3 3 7 0 6 5 0 10 3 13 9 1 6 17

    3 0 6 3 8 1 8 7 8 6 -1 0 5 0 0 1 1 1 0

    '
  - '10

    1 2 1 0 3 0 6 2 4 2

    7 5 2 3 5 1 2 0 1 -1

    '
  - '10

    0 1 1 0 0 1 6 2 4 2

    7 6 2 5 1 1 2 0 1 -1

    '
  - '19

    1 1 1 4 5 3 5 0 0 6 5 3 10 3 13 9 1 4 17

    3 0 6 3 8 6 8 3 8 6 0 -1 5 -1 0 1 1 1 0

    '
  - '5

    -1 0 1 6 2

    -1 1 -1 1 0

    '
  output:
  - '-1

    '
  - '2

    1 0 '
  - '3

    9 4 0 '
  - '3

    2 1 0 '
  - '3

    3 2 0 '
  - '3

    3 2 0 '
  - '-1

    '
  - '1

    0 '
  - '3

    5 1 0 '
  - '3

    2 1 0

    '
  - '-1

    '
  - '2

    9 0

    '
  - '3

    9 4 0

    '
  - '3

    3 2 0

    '
  - '3

    5 1 0

    '
  - '2

    1 0

    '
  - '2

    2 0

    '
  - '3

    8 6 0

    '
  - '3

    4 2 0

    '
  - '1

    0

    '
  - '5

    17 15 2 1 0

    '
  - '2

    4 0

    '
  - '4

    8 6 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '2

    9 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    9 4 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '2

    9 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '3

    3 2 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    5 1 0

    '
  - '-1

    '
  - '2

    2 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '3

    5 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    5 1 0

    '
  - '3

    9 4 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '2

    9 0

    '
  - '2

    9 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    3 2 0

    '
  - '-1

    '
  - '2

    2 0

    '
  - '-1

    '
  - '3

    8 6 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '2

    9 0

    '
  - '1

    0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '2

    2 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    5 1 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '2

    9 0

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '1

    0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '2

    2 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '2

    4 0

    '
  - '2

    9 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '2

    2 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    5 1 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '2

    9 0

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '4

    8 6 1 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '2

    4 0

    '
  - '2

    9 0

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '3

    5 1 0

    '
  - '3

    2 1 0

    '
  - '-1

    '
  - '-1

    '
  - '3

    2 1 0

    '
  - '-1

    '
timeout: 2.0
