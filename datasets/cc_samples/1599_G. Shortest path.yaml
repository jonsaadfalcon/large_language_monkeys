prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nFormula 1 officials\
  \ decided to introduce new competition. Cars are replaced by space ships and number\
  \ of points awarded can differ per race.\n\nGiven the current ranking in the competition\
  \ and points distribution for the next race, your task is to calculate the best\
  \ possible ranking for a given astronaut after the next race. It's guaranteed that\
  \ given astronaut will have unique number of points before the race.\n\nInput\n\n\
  The first line contains two integer numbers N (1 \u2264 N \u2264 200000) representing\
  \ number of F1 astronauts, and current position of astronaut D (1 \u2264 D \u2264\
  \ N) you want to calculate best ranking for (no other competitor will have the same\
  \ number of points before the race).\n\nThe second line contains N integer numbers\
  \ S_k (0 \u2264 S_k \u2264 10^8, k=1...N), separated by a single space, representing\
  \ current ranking of astronauts. Points are sorted in non-increasing order.\n\n\
  The third line contains N integer numbers P_k (0 \u2264 P_k \u2264 10^8, k=1...N),\
  \ separated by a single space, representing point awards for the next race. Points\
  \ are sorted in non-increasing order, so winner of the race gets the maximum number\
  \ of points.\n\nOutput\n\nOutput contains one integer number \u2014 the best possible\
  \ ranking for astronaut after the race. If multiple astronauts have the same score\
  \ after the race, they all share the best ranking.\n\nExample\n\nInput\n\n4 3\n\
  50 30 20 10\n15 10 7 3\n\n\nOutput\n\n2\n\nNote\n\nIf the third ranked astronaut\
  \ wins the race, he will have 35 points. He cannot take the leading position, but\
  \ he can overtake the second position if the second ranked astronaut finishes the\
  \ race at the last position.\nA: ```n,k=map(int,input().strip().split())\ncr = list(map(int,input().strip().split()))\n\
  pa = list(map(int,input().strip().split()))\nx = cr[k-1]+pa[0]\np = 0\nif k==1:\n\
  \tprint(1)\nelse:\n    for i in range(k-1):\n    \tif cr[i]+pa[-1]<=x:\n    \t\t\
  p +=1\n    \t\tdel pa[-1]\n    print(k-p)```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nWe have 3N cards arranged in a row from left to right,\
  \ where each card has an integer between 1 and N (inclusive) written on it. The\
  \ integer written on the i-th card from the left is A_i.\n\nYou will do the following\
  \ operation N-1 times:\n\n* Rearrange the five leftmost cards in any order you like,\
  \ then remove the three leftmost cards. If the integers written on those three cards\
  \ are all equal, you gain 1 point.\n\n\n\nAfter these N-1 operations, if the integers\
  \ written on the remaining three cards are all equal, you will gain 1 additional\
  \ point.\n\nFind the maximum number of points you can gain.\n\nConstraints\n\n*\
  \ 1 \\leq N \\leq 2000\n* 1 \\leq A_i \\leq N\n\nInput\n\nInput is given from Standard\
  \ Input in the following format:\n\n\nN\nA_1 A_2 \\cdots A_{3N}\n\n\nOutput\n\n\
  Print the maximum number of points you can gain.\n\nExamples\n\nInput\n\n2\n1 2\
  \ 1 2 2 1\n\n\nOutput\n\n2\n\n\nInput\n\n3\n1 1 2 2 3 3 3 2 1\n\n\nOutput\n\n1\n\
  \n\nInput\n\n3\n1 1 2 2 2 3 3 3 1\n\n\nOutput\n\n3\nA: ```N = int(input())\nA =\
  \ [int(a) for a in input().split()] + [0] * 2\nX = [[-10**10] * (N+1) for _ in range(N+1)]\n\
  X[A[0]][A[1]] = 0\nans = 0\nma = 0\nMA = [-5] * (N+1)\nMA[A[0]] = MA[A[1]] = 0\n\
  for i in range(N):\n    B = A[i*3+2:i*3+5]\n    cnt = len(set(B))\n    if cnt ==\
  \ 1:\n        ans += 1\n    elif cnt == 2:\n        a1 = B[0]^B[1]^B[2]\n      \
  \  a2 = (sum(B) - a1) // 2\n        X[a1], X[a1][a2], X[a2][a2] = [max(X[a2][j]\
  \ + 1, X[j][a2] + 1, MA[j]) for j in range(N+1)], max(ma, X[a2][a2] + 1), max(ma,\
  \ X[a1][a1] + 1)\n        X[a2] = [max(x, m) for x, m in zip(X[a2], MA)]\n     \
  \   MA = [max(m, x1, x2) for m, x1, x2 in zip(MA, X[a1], X[a2])]\n        MA[a1]\
  \ = max(MA[a1], max(X[a1]))\n        MA[a2] = max(MA[a2], X[a1][a2], X[a2][a2])\n\
  \        ma = max(ma, MA[a1], MA[a2])\n    else:\n        a, b, c = B\n        X[a][b],\
  \ X[a][c], X[b][c] = max(ma, X[c][c] + 1), max(ma, X[b][b] + 1), max(ma, X[a][a]\
  \ + 1)\n        X[a] = [max(x, m) for x, m in zip(X[a], MA)]\n        X[b] = [max(x,\
  \ m) for x, m in zip(X[b], MA)]\n        X[c] = [max(x, m) for x, m in zip(X[c],\
  \ MA)]\n        MA[a] = max(MA[a], max(X[a]))\n        MA[b] = max(MA[b], X[a][b],\
  \ max(X[b]))\n        MA[c] = max(MA[c], X[a][c], X[b][c], max(X[c]))\n        MA\
  \ = [max(m, xa, xb, xc) for m, xa, xb, xc in zip(MA, X[a], X[b], X[c])]\n      \
  \  ma = max(ma, MA[a], MA[b], MA[c])\n\nprint(ans + max(ma, max(max(x) for x in\
  \ X)))```\nQ: Write python code to solve the following coding problem that obeys\
  \ the constraints and passes the example test cases. The output code needs to read\
  \ from and write to standard IO. Please wrap your code answer using ```:\nYou are\
  \ given N points on an infinite plane with the Cartesian coordinate system on it.\
  \ N-1 points lay on one line, and one point isn't on that line. You are on point\
  \ K at the start, and the goal is to visit every point. You can move between any\
  \ two points in a straight line, and you can revisit points. What is the minimum\
  \ length of the path? \n\nInput\n\nThe first line contains two integers: N (3 \u2264\
  \ N \u2264 2*10^5) - the number of points, and K (1 \u2264 K \u2264 N) - the index\
  \ of the starting point.\n\nEach of the next N lines contain two integers, A_i,\
  \ B_i (-10^6 \u2264 A_i, B_i \u2264 10^6) - coordinates of the i-th point.\n\nOutput\n\
  \nThe output contains one number - the shortest path to visit all given points starting\
  \ from point K. The absolute difference between your solution and the main solution\
  \ shouldn't exceed 10^-6;\n\nExample\n\nInput\n\n\n5 2\n0 0\n-1 1\n2 -2\n0 1\n-2\
  \ 2\n\n\nOutput\n\n\n7.478709\n\nNote\n\nThe shortest path consists of these moves:\
  \ \n\n2 -> 5 \n\n5 -> 4 \n\n4 -> 1 \n\n1 -> 3 \n\nThere isn't any shorter path possible.\n\
  A:"
question: "You are given N points on an infinite plane with the Cartesian coordinate\
  \ system on it. N-1 points lay on one line, and one point isn't on that line. You\
  \ are on point K at the start, and the goal is to visit every point. You can move\
  \ between any two points in a straight line, and you can revisit points. What is\
  \ the minimum length of the path? \n\nInput\n\nThe first line contains two integers:\
  \ N (3 \u2264 N \u2264 2*10^5) - the number of points, and K (1 \u2264 K \u2264\
  \ N) - the index of the starting point.\n\nEach of the next N lines contain two\
  \ integers, A_i, B_i (-10^6 \u2264 A_i, B_i \u2264 10^6) - coordinates of the i-th\
  \ point.\n\nOutput\n\nThe output contains one number - the shortest path to visit\
  \ all given points starting from point K. The absolute difference between your solution\
  \ and the main solution shouldn't exceed 10^-6;\n\nExample\n\nInput\n\n\n5 2\n0\
  \ 0\n-1 1\n2 -2\n0 1\n-2 2\n\n\nOutput\n\n\n7.478709\n\nNote\n\nThe shortest path\
  \ consists of these moves: \n\n2 -> 5 \n\n5 -> 4 \n\n4 -> 1 \n\n1 -> 3 \n\nThere\
  \ isn't any shorter path possible."
samples:
- " ```n, k = map(int, input().strip().split())\npoints = []\nfor _ in range(n):\n\
  \    x, y = map(int, input().strip().split())\n    points.append((x, y))\n\ndef\
  \ distance(p1, p2):\n    return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) **\
  \ 0.5\n\ndef tsp(points, k):\n    n = len(points)\n    dp = [[float('inf')] * n\
  \ for _ in range(1 << n)]\n    dp[0][k - 1] = 0\n    for mask in range(1, 1 << n):\n\
  \        for i in range(n):\n            if not (mask & (1 << i)):\n           \
  \     continue\n            for j in range(n):\n                if i != j and not\
  \ (mask & (1 << j)):\n                    dp[mask][j] = min(dp[mask][j], dp[mask\
  \ ^ (1 << i)][i] + distance(points[i], points[j]))\n    return min(dp[-1])\n\nprint(tsp(points,\
  \ k))```\n\n\n```python\n```\nThis code uses a brute force approach to solve the\
  \ problem. It calculates the distance between each pair of points and uses a dynamic\
  \ programming approach to find the shortest path. The time complexity of this solution\
  \ is O(n^2), where n is the number of points.\nThe code first reads the input and\
  \ stores the points in a list. Then it defines a function `distance` to calculate\
  \ the distance between two points. The function `tsp` calculates the shortest path\
  \ using dynamic programming. It initializes a 2D array `dp` to store the shortest\
  \ distance from the starting point to each point. It then iterates over all possible\
  \ subsets of points and calculates the shortest distance to each point. Finally,\
  \ it returns the shortest distance to the last point.\nThe code then calls the `tsp`\
  \ function with the list of points and the starting point as arguments and prints\
  \ the result.\nThis solution assumes that the input is valid and that the points\
  \ are distinct. It also assumes that the distance function is correct and that the\
  \ dynamic programming approach is correct. If the input is invalid or the points\
  \ are not distinct, the solution may not work correctly. If the distance function\
  \ is incorrect or the dynamic programming approach is incorrect, the solution may\
  \ not give the correct result."
- " ```from math import sqrt\nn, k = map(int, input().split())\npoints = [(0, 0)]\n\
  for _ in range(n-1):\n    a, b = map(int, input().split())\n    points.append((a,\
  \ b))\npoints.sort(key=lambda x: x[0])\ndist = [[0.0 for _ in range(n)] for _ in\
  \ range(n)]\nfor i in range(n):\n    for j in range(i+1, n):\n        dist[i][j]\
  \ = dist[j][i] = sqrt((points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2)\n\
  for i in range(n):\n    dist[k-1][i] = dist[i][k-1] = dist[k-1][i]\nfor _ in range(n-1):\n\
  \    min_dist = float('inf')\n    next_point = -1\n    for i in range(n):\n    \
  \    if dist[k-1][i] < min_dist:\n            min_dist = dist[k-1][i]\n        \
  \    next_point = i\n    dist[k-1][next_point] = dist[next_point][k-1] = 0.0\n \
  \   k = next_point\nprint(sum(dist[k-1]))```\n\n\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python\n```\n\
  ```python\n```\n```python\n```\n```python\n```\n```python\n```\n```python"
test_cases:
  input:
  - '5 2

    0 0

    -1 1

    2 -2

    0 1

    -2 2

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 233253

    '
  - '4 3

    -733 -804

    -4 -755

    725 -706

    -895 -822

    '
  - '16 8

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    287782 233253

    '
  - '4 4

    -733 -804

    -4 -755

    725 -706

    -895 -822

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 27372

    '
  - '4 1

    768074 -27

    -1052681 -27

    -8 -27

    595283 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    286078 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 36061

    '
  - '4 1

    1430283 -27

    -768090 -27

    -8 -27

    287782 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 17019

    '
  - '4 1

    966828 -27

    -1052681 -27

    -8 -27

    595283 233253

    '
  - '4 1

    679853 -27

    -768090 -27

    -8 -27

    595283 36061

    '
  - '4 1

    768074 -27

    -768090 -27

    -15 -27

    595283 17019

    '
  - '4 1

    815339 -27

    -768090 -27

    -8 -27

    595283 36061

    '
  - '4 1

    815339 -27

    -768090 -27

    -8 -27

    595283 36653

    '
  - '4 1

    815339 -27

    -895153 -27

    -8 -27

    595283 36653

    '
  - '4 1

    815339 -27

    -895153 -27

    -8 -27

    595283 22928

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    136551 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    145754 233253

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    58661 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    286078 45523

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    973040 36061

    '
  - '4 1

    1430283 -27

    -768090 -27

    -8 -27

    206617 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -16 -27

    595283 17019

    '
  - '4 1

    679853 -27

    -288119 -27

    -8 -27

    595283 36061

    '
  - '4 1

    768074 -27

    -768090 -27

    -20 -27

    595283 17019

    '
  - '4 1

    815339 -27

    -895153 -27

    -8 -27

    1179253 22928

    '
  - '16 8

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -34922 268

    17377 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    74119 -27

    -768090 -27

    -8 -27

    145754 233253

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    69090 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    973040 26205

    '
  - '16 6

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    1535484 -27

    -768090 -27

    -16 -27

    595283 17019

    '
  - '4 1

    768074 -27

    -768090 -27

    -18 -27

    595283 17019

    '
  - '4 2

    815339 -27

    -895153 -27

    -8 -27

    1179253 22928

    '
  - '4 1

    652996 -27

    -768090 -27

    -8 -27

    973040 26205

    '
  - '16 6

    -562856 268

    -119645 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    768074 -27

    -883644 -27

    -18 -27

    595283 17019

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 202461

    '
  - '5 4

    0 0

    -1 1

    2 -2

    0 1

    -2 2

    '
  - '4 1

    768074 -27

    -731596 -27

    -8 -27

    595283 135619

    '
  - '4 1

    768074 -27

    -316713 -27

    -8 -27

    287782 233253

    '
  - '4 1

    764863 -27

    -768090 -27

    -8 -27

    595283 27372

    '
  - '4 1

    768074 -27

    -768090 -27

    -13 -27

    286078 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    911410 17019

    '
  - '4 1

    854424 -27

    -1052681 -27

    -8 -27

    595283 233253

    '
  - '4 1

    679853 -27

    -768090 -27

    -10 -27

    595283 36061

    '
  - '16 3

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -34922 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    1268070 -27

    -768090 -27

    -8 -27

    136551 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -7 -27

    145754 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    1239643 36061

    '
  - '4 1

    520318 -27

    -768090 -27

    -8 -27

    206617 233253

    '
  - '4 1

    679853 -27

    -288119 -27

    -5 -27

    595283 36061

    '
  - '4 1

    768074 -27

    -768090 -27

    -20 -27

    595283 16522

    '
  - '4 1

    815339 -27

    -895153 -27

    -8 -27

    1179253 33462

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    703030 268

    -1432954 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    69090 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    1412358 26205

    '
  - '16 9

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    768074 -27

    -65697 -27

    -8 -27

    595283 135619

    '
  - '4 1

    764863 -27

    -768090 -27

    -13 -27

    595283 27372

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    911410 5866

    '
  - '4 1

    854424 -27

    -1052681 -27

    -8 -27

    595283 748

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    136551 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -7 -27

    13247 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    1239643 25305

    '
  - '4 1

    679853 -27

    -288119 -27

    -1 -27

    595283 36061

    '
  - '4 1

    193012 -27

    -768090 -27

    -8 -27

    1412358 26205

    '
  - '16 9

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 859969

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    764863 -27

    -1286181 -27

    -13 -27

    595283 27372

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    911410 4467

    '
  - '4 1

    854424 -27

    -1316289 -27

    -8 -27

    595283 748

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    136551 42430

    '
  - '4 1

    768074 -27

    -768090 -27

    -7 -27

    13247 2779

    '
  - '4 1

    768074 -27

    -768090 -27

    0 -27

    1239643 25305

    '
  - '4 1

    679853 -27

    -288119 -27

    -2 -27

    595283 36061

    '
  - '4 1

    768074 -27

    -768090 -27

    -6 -27

    911410 4467

    '
  - '4 1

    588787 -27

    -1316289 -27

    -8 -27

    595283 748

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    136551 36053

    '
  - '4 1

    768074 -27

    -768090 -27

    1 -27

    1239643 25305

    '
  - '4 1

    679853 -27

    -288119 -27

    0 -27

    595283 36061

    '
  - '16 9

    -562856 268

    -422202 268

    281068 268

    703030 268

    -552743 268

    -304 268

    -844164 268

    62861 268

    -281548 268

    34672 859969

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 2

    768074 -27

    -768090 -27

    -6 -27

    911410 4467

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    133813 36053

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    48237 36053

    '
  - '4 1

    873165 -27

    -9983 -27

    -8 -27

    48237 36053

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 24327

    '
  - '4 3

    -733 -804

    -4 -755

    725 -706

    -1378 -822

    '
  - '16 8

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    24735 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -1233612 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -1273106 -27

    -8 -27

    595283 27372

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    286078 1137

    '
  - '16 8

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -1009610 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    1430283 -27

    -768090 -27

    -8 -27

    287782 222506

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    964859 17019

    '
  - '4 1

    815339 -27

    -768090 -27

    -4 -27

    595283 36061

    '
  - '4 1

    815339 -27

    -1498885 -27

    -8 -27

    595283 36653

    '
  - '4 1

    815339 -27

    -895153 -27

    -4 -27

    595283 22928

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    145754 125560

    '
  - '4 1

    768074 -27

    -814024 -27

    -8 -27

    286078 45523

    '
  - '4 1

    768074 -27

    -768090 -27

    -7 -27

    595283 17019

    '
  - '4 1

    679853 -27

    -288119 -27

    -8 -27

    595283 46217

    '
  - '4 1

    768074 -27

    -768090 -27

    -6 -27

    595283 17019

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    973040 36251

    '
  - '16 1

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    1540682 -27

    -768090 -27

    -16 -27

    595283 17019

    '
  - '4 1

    61838 -27

    -768090 -27

    -18 -27

    595283 17019

    '
  - '16 6

    -562856 268

    -119645 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -88841 268

    140414 268

    890660 268

    984338 268

    '
  - '16 8

    -580664 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    387357 268

    -34579 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    1268070 -27

    -768090 -27

    -8 -27

    151626 135619

    '
  - '4 1

    520318 -27

    -768090 -27

    -8 -27

    64776 233253

    '
  - '4 1

    679853 -27

    -94342 -27

    -5 -27

    595283 36061

    '
  - '4 1

    768074 -27

    -768090 -27

    -30 -27

    595283 16522

    '
  - '4 2

    815339 -27

    -895153 -27

    -8 -27

    1179253 33462

    '
  - '4 1

    768074 -27

    -698921 -27

    -8 -27

    1412358 26205

    '
  - '16 8

    -580664 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -1646723 268

    421722 268

    -34579 268

    34672 722872

    562376 268

    -703510 268

    -144352 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    1268070 -27

    -12981 -27

    -8 -27

    136551 135619

    '
  - '4 1

    1450946 -27

    -768090 -27

    -7 -27

    13247 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -5 -27

    1239643 25305

    '
  - '4 1

    679853 -27

    -181019 -27

    0 -27

    595283 36061

    '
  - '4 1

    193012 -27

    -768090 -27

    -8 -27

    2252871 26205

    '
  - '16 9

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 859969

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    340125 268

    '
  - '4 1

    679853 -27

    -288119 -27

    -3 -27

    595283 36061

    '
  - '4 1

    768074 -27

    -703991 -27

    -6 -27

    911410 4467

    '
  - '4 1

    588787 -27

    -1316289 -27

    -16 -27

    595283 748

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    136551 65005

    '
  - '16 9

    -562856 268

    -422202 268

    281068 268

    703030 268

    -552743 268

    -304 268

    -844164 268

    62861 268

    -385336 268

    34672 859969

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    103066 36053

    '
  - '4 1

    1268070 -27

    -4451 -27

    -8 -27

    48237 36053

    '
  - '4 1

    873165 -27

    -9983 -27

    -8 -27

    83366 36053

    '
  - '4 1

    846585 -27

    -1273106 -27

    -8 -27

    595283 27372

    '
  - '4 1

    1167859 -27

    -768090 -27

    -8 -27

    286078 1137

    '
  - '4 1

    815339 -27

    -1498885 -27

    -16 -27

    595283 36653

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    145754 213685

    '
  - '4 1

    679853 -27

    -56635 -27

    -8 -27

    595283 46217

    '
  - '4 1

    768074 -27

    -1432861 -27

    -6 -27

    595283 17019

    '
  - '4 1

    768074 -27

    -768090 -27

    -16 -27

    973040 36251

    '
  - '16 6

    -562856 268

    -119645 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 131600

    562376 268

    -703510 268

    -88841 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    1268070 -27

    -768090 -27

    0 -27

    151626 135619

    '
  - '4 1

    1080 -27

    -94342 -27

    -5 -27

    595283 36061

    '
  - '4 1

    266151 -27

    -768090 -27

    -30 -27

    595283 16522

    '
  - '4 1

    323699 -27

    -698921 -27

    -8 -27

    1412358 26205

    '
  - '4 1

    338891 -27

    -12981 -27

    -8 -27

    136551 135619

    '
  - '4 1

    1450946 -27

    -1333978 -27

    -7 -27

    13247 233253

    '
  - '4 1

    478060 -27

    -768090 -27

    -5 -27

    1239643 25305

    '
  - '4 1

    1120579 -27

    -181019 -27

    0 -27

    595283 36061

    '
  - '16 13

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 859969

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    340125 268

    '
  - '4 1

    214771 -27

    -703991 -27

    -6 -27

    911410 4467

    '
  - '4 1

    956024 -27

    -4451 -27

    -8 -27

    48237 36053

    '
  - '4 1

    873165 -27

    -9983 -27

    -1 -27

    83366 36053

    '
  - '4 1

    815339 -27

    -1498885 -27

    -5 -27

    595283 36653

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    145754 170622

    '
  - '4 1

    1450946 -27

    -2057981 -27

    -7 -27

    13247 233253

    '
  - '4 1

    478060 -27

    -768090 -27

    -4 -27

    1239643 25305

    '
  - '4 1

    1120579 -27

    -181019 -27

    0 -27

    696862 36061

    '
  - '4 1

    214771 -27

    -741138 -27

    -6 -27

    911410 4467

    '
  - '4 1

    956024 -27

    -4451 -27

    -8 -27

    1445 36053

    '
  - '16 8

    -562856 268

    -682923 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -142277 268

    29363 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -1204138 -27

    -8 -27

    145754 170622

    '
  - '4 1

    323699 -27

    -698921 -27

    -6 -27

    1412358 30504

    '
  - '4 1

    956024 -27

    -4451 -27

    -8 -27

    1445 7270

    '
  - '4 1

    768074 -27

    -1204138 -27

    -8 -27

    201357 170622

    '
  - '4 1

    323699 -27

    -884999 -27

    -6 -27

    1412358 30504

    '
  - '4 1

    428823 -27

    -1204138 -27

    -8 -27

    201357 170622

    '
  - '16 8

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    38106 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '5 2

    0 0

    -1 1

    2 -2

    0 2

    -2 2

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    862252 135619

    '
  - '4 1

    768074 -27

    -1091606 -27

    -8 -27

    287782 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    176477 135619

    '
  - '4 1

    815339 -27

    -377259 -27

    -8 -27

    595283 36061

    '
  - '4 1

    815339 -27

    -768090 -27

    -8 -27

    762612 36653

    '
  - '4 1

    815339 -27

    -946747 -27

    -8 -27

    595283 22928

    '
  - '4 1

    1322745 -27

    -768090 -27

    -8 -27

    136551 135619

    '
  - '4 1

    768074 -27

    -768090 -27

    -13 -27

    286078 45523

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    935952 36061

    '
  - '4 1

    768074 -27

    -251441 -27

    -16 -27

    595283 17019

    '
  - '4 1

    768074 -27

    -768090 -27

    -21 -27

    595283 17019

    '
  - '4 1

    815339 -27

    -895153 -27

    -8 -27

    1526879 22928

    '
  - '4 1

    74119 -27

    -794739 -27

    -8 -27

    145754 233253

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    1002447 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    69090 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    166890 -27

    -768090 -27

    -8 -27

    973040 26205

    '
  - '16 6

    -562856 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    48343 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    307054 -27

    -768090 -27

    -8 -27

    973040 26205

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    595283 209460

    '
  - '5 4

    0 0

    -1 1

    2 -2

    0 2

    -2 2

    '
  - '4 1

    768074 -27

    -316713 -27

    -8 -27

    287782 303557

    '
  - '4 1

    764863 -27

    -768090 -27

    -8 -27

    5209 27372

    '
  - '15 8

    -580664 268

    -422202 268

    281068 268

    703030 268

    -984818 268

    -240 268

    -844164 268

    421722 268

    -34579 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 2

    768074 -27

    -768090 -27

    -8 -27

    911410 17019

    '
  - '4 1

    768074 -27

    -768090 -27

    -10 -27

    145754 233253

    '
  - '4 1

    768074 -27

    -768090 -27

    -5 -27

    1239643 36061

    '
  - '4 1

    815339 -27

    -689244 -27

    -8 -27

    1179253 33462

    '
  - '16 8

    -562856 268

    -474829 268

    281068 268

    703030 268

    -63064 268

    -240 268

    -844164 268

    421722 268

    -281548 268

    69090 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    843684 268

    984338 268

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    1412358 10803

    '
  - '16 9

    -562856 268

    -422202 268

    281068 268

    703030 268

    -927339 268

    -304 268

    -844164 268

    421722 268

    -281548 268

    34672 722872

    562376 268

    -703510 268

    -140894 268

    140414 268

    890660 268

    984338 268

    '
  - '4 1

    125545 -27

    -65697 -27

    -8 -27

    595283 135619

    '
  - '4 1

    764863 -27

    -1461001 -27

    -13 -27

    595283 27372

    '
  - '4 1

    768074 -27

    -768090 -27

    -8 -27

    1601184 5866

    '
  - '4 1

    854424 -27

    -1162161 -27

    -8 -27

    595283 748

    '
  - '4 1

    1268070 -27

    -9983 -27

    -8 -27

    107619 135619

    '
  - '4 1

    1511446 -27

    -768090 -27

    -8 -27

    1239643 25305

    '
  output:
  - '7.4787086646'
  - '1697753.3898821024'
  - '1624.2867736884'
  - '3781378.4984290055'
  - '1598305.699915

    '
  - '1672492.269984

    '
  - '1624.286774

    '
  - '3781378.498429

    '
  - '1538953.009496

    '
  - '1982344.389882

    '
  - '1585416.429731

    '
  - '1540985.197105

    '
  - '2304618.535191

    '
  - '1537246.770287

    '
  - '2130749.215096

    '
  - '1456413.835394

    '
  - '1537246.767419

    '
  - '1587461.354580

    '
  - '1587594.039996

    '
  - '1714657.039996

    '
  - '1712128.447774

    '
  - '1606487.656383

    '
  - '1707763.207320

    '
  - '3758881.463739

    '
  - '1541915.010719

    '
  - '1949917.706306

    '
  - '2325416.140618

    '
  - '1537246.767009

    '
  - '976442.835394

    '
  - '1537246.765371

    '
  - '2439266.655097

    '
  - '3767308.870693

    '
  - '1287187.757197

    '
  - '3747676.411837

    '
  - '1948121.321209

    '
  - '3765516.175245

    '
  - '2303972.511268

    '
  - '1537246.766190

    '
  - '2075129.260056

    '
  - '2062600.761402

    '
  - '3782036.966640

    '
  - '1652800.766190

    '
  - '1663060.625686

    '
  - '7.892922

    '
  - '1561811.699915

    '
  - '1221115.269984

    '
  - '1535782.367958

    '
  - '1585415.947623

    '
  - '1824005.414659

    '
  - '2040714.687208

    '
  - '1456413.831729

    '
  - '3752125.828851

    '
  - '2100181.672087

    '
  - '1707763.677421

    '
  - '2481206.021700

    '
  - '1470644.368597

    '
  - '976442.840891

    '
  - '1537184.659208

    '
  - '2440333.074906

    '
  - '4195812.411837

    '
  - '2825509.379978

    '
  - '3821734.722531

    '
  - '895912.699915

    '
  - '1535782.362670

    '
  - '1822976.139993

    '
  - '1907106.663354

    '
  - '1342074.672087

    '
  - '1791791.971905

    '
  - '2480240.708885

    '
  - '976442.848222

    '
  - '3141707.787053

    '
  - '3953422.222070

    '
  - '2053873.362670

    '
  - '1822917.512064

    '
  - '2170714.663354

    '
  - '1285297.101961

    '
  - '1536462.988459

    '
  - '2480240.710554

    '
  - '976442.846389

    '
  - '1822917.512089

    '
  - '1918114.571508

    '
  - '1283314.001512

    '
  - '2480240.710763

    '
  - '976442.850054

    '
  - '3672114.222070

    '
  - '1679570.432673

    '
  - '1283405.214125

    '
  - '1290585.524385

    '
  - '895935.698394

    '
  - '1538369.811251

    '
  - '2106.540955

    '
  - '3773284.706590

    '
  - '4034077.565967

    '
  - '2043969.009496

    '
  - '1536167.773481

    '
  - '3810075.565967

    '
  - '2295844.598562

    '
  - '1930621.464843

    '
  - '1587461.361910

    '
  - '2318389.039996

    '
  - '1712128.450745

    '
  - '1595349.884608

    '
  - '1587849.010719

    '
  - '1537246.770697

    '
  - '981583.204313

    '
  - '1537246.771107

    '
  - '1949957.796919

    '
  - '3584441.951143

    '
  - '2309169.661874

    '
  - '1897334.278964

    '
  - '3807026.849469

    '
  - '3815743.498429

    '
  - '2096188.165744

    '
  - '1521989.357609

    '
  - '782665.840891

    '
  - '1537184.655346

    '
  - '2075943.655513

    '
  - '2756340.379978

    '
  - '4447188.565967

    '
  - '1345072.672087

    '
  - '2458241.179871

    '
  - '2480240.709511

    '
  - '869342.850054

    '
  - '3982176.888404

    '
  - '3791926.167272

    '
  - '976442.844557

    '
  - '1758818.512089

    '
  - '1918114.571501

    '
  - '1294614.427597

    '
  - '3568326.222070

    '
  - '1284743.861823

    '
  - '1285053.524385

    '
  - '891443.653013

    '
  - '2121810.421749

    '
  - '1935952.136250

    '
  - '2318389.024853

    '
  - '1684762.965403

    '
  - '750099.204313

    '
  - '2202017.771107

    '
  - '1949957.791365

    '
  - '3019610.552773

    '
  - '2096190.203365

    '
  - '785990.594977

    '
  - '1693150.762273

    '
  - '3134061.956026

    '
  - '449052.808426

    '
  - '3024129.179871

    '
  - '2769995.984371

    '
  - '1303929.052231

    '
  - '3864015.757674

    '
  - '2312065.574603

    '
  - '973190.774157

    '
  - '891444.228797

    '
  - '2318389.045675

    '
  - '1637802.525271

    '
  - '3748132.179871

    '
  - '2769995.984580

    '
  - '1304065.840355

    '
  - '2349212.574603

    '
  - '995812.855804

    '
  - '3777050.941273

    '
  - '2073850.525271

    '
  - '3134119.741369

    '
  - '966490.146065

    '
  - '2059931.133052

    '
  - '3386773.985597

    '
  - '1752440.956166

    '
  - '3781451.200398

    '
  - '8.242641

    '
  - '1806080.621404

    '
  - '1996008.269984

    '
  - '1597621.889757

    '
  - '1196630.354580

    '
  - '1595814.109809

    '
  - '1763722.447774

    '
  - '2154485.722775

    '
  - '1541914.948525

    '
  - '1876450.503488

    '
  - '1020597.767009

    '
  - '1537246.764961

    '
  - '3134114.720803

    '
  - '1313836.757197

    '
  - '3780051.894048

    '
  - '2548060.204372

    '
  - '3758011.341484

    '
  - '2407985.940232

    '
  - '1670711.336304

    '
  - '7.656854

    '
  - '1303211.994420

    '
  - '1556121.207668

    '
  - '3500070.498429

    '
  - '1680510.025273

    '
  - '1707762.267124

    '
  - '2481206.022971

    '
  - '2234424.074906

    '
  - '3555673.455671

    '
  - '2824864.537765

    '
  - '3717820.743436

    '
  - '865997.064980

    '
  - '2228693.362670

    '
  - '3202415.686006

    '
  - '2016586.663354

    '
  - '1351484.163381

    '
  - '2280972.716931

    '
timeout: 1.0
