prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nGenos recently\
  \ installed the game Zuma on his phone. In Zuma there exists a line of n gemstones,\
  \ the i-th of which has color ci. The goal of the game is to destroy all the gemstones\
  \ in the line as quickly as possible.\n\nIn one second, Genos is able to choose\
  \ exactly one continuous substring of colored gemstones that is a palindrome and\
  \ remove it from the line. After the substring is removed, the remaining gemstones\
  \ shift to form a solid line again. What is the minimum number of seconds needed\
  \ to destroy the entire line?\n\nLet us remind, that the string (or substring) is\
  \ called palindrome, if it reads same backwards or forward. In our case this means\
  \ the color of the first gemstone is equal to the color of the last one, the color\
  \ of the second gemstone is equal to the color of the next to last and so on.\n\n\
  Input\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264\
  \ 500) \u2014 the number of gemstones.\n\nThe second line contains n space-separated\
  \ integers, the i-th of which is ci (1 \u2264 ci \u2264 n) \u2014 the color of the\
  \ i-th gemstone in a line.\n\nOutput\n\nPrint a single integer \u2014 the minimum\
  \ number of seconds needed to destroy the entire line.\n\nExamples\n\nInput\n\n\
  3\n1 2 1\n\n\nOutput\n\n1\n\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n3\n\n\nInput\n\n\
  7\n1 4 4 2 3 2 1\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample, Genos can destroy\
  \ the entire line in one second.\n\nIn the second sample, Genos can only destroy\
  \ one gemstone at a time, so destroying three gemstones takes three seconds.\n\n\
  In the third sample, to achieve the optimal time of two seconds, destroy palindrome\
  \ 4 4 first and then destroy palindrome 1 2 3 2 1.\nA: ```from sys import stdin\n\
  n=int(input())\ns=list(map(int,stdin.readline().strip().split()))\ndp=[[-1 for i\
  \ in range(501)] for j in range(500)]\ndef sol(i,j):\n    if i>j:\n        return\
  \ 0\n    if i==j:\n        return 1\n    if dp[i][j]!=-1:\n        return dp[i][j]\n\
  \    x=502\n    if s[i]==s[i+1]:\n        x=min(x,sol(i+2,j)+1)\n    for k in range(i+2,j+1):\n\
  \        if s[i]==s[k]:\n            x=min(x,sol(1+i,k-1)+sol(k+1,j))\n \n    dp[i][j]=min(1+sol(i+1,j),x)\n\
  \    return dp[i][j]\nprint(sol(0,n-1))```\nQ: Write python code to solve the following\
  \ coding problem that obeys the constraints and passes the example test cases. The\
  \ output code needs to read from and write to standard IO. Please wrap your code\
  \ answer using ```:\nYou are given an array a, consisting of n positive integers.\n\
  \nLet's call a concatenation of numbers x and y the number that is obtained by writing\
  \ down numbers x and y one right after another without changing the order. For example,\
  \ a concatenation of numbers 12 and 3456 is a number 123456.\n\nCount the number\
  \ of ordered pairs of positions (i, j) (i \u2260 j) in array a such that the concatenation\
  \ of a_i and a_j is divisible by k.\n\nInput\n\nThe first line contains two integers\
  \ n and k (1 \u2264 n \u2264 2 \u22C5 10^5, 2 \u2264 k \u2264 10^9).\n\nThe second\
  \ line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\
  \nPrint a single integer \u2014 the number of ordered pairs of positions (i, j)\
  \ (i \u2260 j) in array a such that the concatenation of a_i and a_j is divisible\
  \ by k.\n\nExamples\n\nInput\n\n6 11\n45 1 10 12 11 7\n\n\nOutput\n\n7\n\n\nInput\n\
  \n4 2\n2 78 4 10\n\n\nOutput\n\n12\n\n\nInput\n\n5 2\n3 7 19 3 3\n\n\nOutput\n\n\
  0\n\nNote\n\nIn the first example pairs (1, 2), (1, 3), (2, 3), (3, 1), (3, 4),\
  \ (4, 2), (4, 3) suffice. They produce numbers 451, 4510, 110, 1045, 1012, 121,\
  \ 1210, respectively, each of them is divisible by 11.\n\nIn the second example\
  \ all n(n - 1) pairs suffice.\n\nIn the third example no pair is sufficient.\nA:\
  \ ```import os\nimport sys\nfrom io import BytesIO, IOBase\n\n# import string\n\
  # characters = string.ascii_lowercase\n# digits = string.digits\n# sys.setrecursionlimit(int(1e6))\n\
  # dir = [-1,0,1,0,-1]\n# moves = 'NESW'\ninf = float('inf')\nfrom functools import\
  \ cmp_to_key\nfrom collections import defaultdict as dd\nfrom collections import\
  \ Counter, deque\nfrom heapq import *\nimport math\nfrom math import floor, ceil,\
  \ sqrt\ndef geti(): return map(int, input().strip().split())\ndef getl(): return\
  \ list(map(int, input().strip().split()))\ndef getis(): return map(str, input().strip().split())\n\
  def getls(): return list(map(str, input().strip().split()))\ndef gets(): return\
  \ input().strip()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\\
  n')\n\n\ndef solve():\n    n, k = geti()\n    a = getl()\n    ans = 0\n    val =\
  \ [dd(int) for i in range(11)]\n    for i in a:\n        val[len(str(i))][i%k] +=\
  \ 1\n    # print(val)\n    for i in a:\n        length = len(str(i))\n        for\
  \ j in range(1, 11):\n            now = (k - i*(10**j) % k) % k\n            # print(i,\
  \ now, j)\n            ans += val[j][now]\n            if length == j and now ==\
  \ i % k:\n                ans -= 1\n    print(ans)\n\n\n\n\n# Fast IO region\nBUFSIZE\
  \ = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n\
  \        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable\
  \ = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write\
  \ if self.writable else None\n\n    def read(self):\n        while True:\n     \
  \       b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n      \
  \      if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\nif __name__=='__main__':\n    solve()```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nBerland Music is a music streaming service built\
  \ specifically to support Berland local artist. Its developers are currently working\
  \ on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs,\
  \ numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where\
  \ 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other\
  \ words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed\
  \ either a like or a dislike button. Let his vote sequence be represented with a\
  \ string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means\
  \ that he liked it.\n\nNow the service has to re-evaluate the song ratings in such\
  \ a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation\
  \ (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  *\
  \ every song that Monocarp liked should have a greater rating than every song that\
  \ Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should\
  \ hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest\
  \ value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint\
  \ the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print\
  \ any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264\
  \ t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase\
  \ contains a single integer n (1 \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number\
  \ of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ...,\
  \ p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\
  \nThe third line contains a single string s, consisting of n characters. Each character\
  \ is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that\
  \ he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22C5 10^5.\n\
  \nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings\
  \ of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i|\
  \ is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n\
  1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n\
  1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation\
  \ q such that each liked song is rating higher than each disliked song: song 1 gets\
  \ rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\n\
  In the second testcase, Monocarp liked all songs, so all permutations could work.\
  \ The permutation with the minimum sum of absolute differences is the permutation\
  \ equal to p. Its cost is 0.\nA:"
question: "Berland Music is a music streaming service built specifically to support\
  \ Berland local artist. Its developers are currently working on a song recommendation\
  \ module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n.\
  \ The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264\
  \ n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\
  \nAfter listening to each of them, Monocarp pressed either a like or a dislike button.\
  \ Let his vote sequence be represented with a string s, such that s_i=0 means that\
  \ he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service\
  \ has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings\
  \ q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer\
  \ from 1 to n appears exactly once); \n  * every song that Monocarp liked should\
  \ have a greater rating than every song that Monocarp disliked (formally, for all\
  \ i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid\
  \ permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|,\
  \ where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n.\
  \ If there are multiple answers, you can print any of them.\n\nInput\n\nThe first\
  \ line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of\
  \ testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264\
  \ n \u2264 2 \u22C5 10^5) \u2014 the number of songs.\n\nThe second line of each\
  \ testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014\
  \ the permutation of the predicted ratings.\n\nThe third line contains a single\
  \ string s, consisting of n characters. Each character is either a 0 or a 1. 0 means\
  \ that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n\
  \ over all testcases doesn't exceed 2 \u22C5 10^5.\n\nOutput\n\nFor each testcase,\
  \ print a permutation q \u2014 the re-evaluated ratings of the songs. If there are\
  \ multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can\
  \ print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n\
  2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\
  \nIn the first testcase, there exists only one permutation q such that each liked\
  \ song is rating higher than each disliked song: song 1 gets rating 2 and song 2\
  \ gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase,\
  \ Monocarp liked all songs, so all permutations could work. The permutation with\
  \ the minimum sum of absolute differences is the permutation equal to p. Its cost\
  \ is 0."
samples:
- " ``````python\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n# import\
  \ string\n# characters = string.ascii_lowercase\n# digits = string.digits\n# sys.setrecursionlimit(int(1e6))\n\
  # dir = [-1,0,1,0,-1]\n# moves = 'NESW'\ninf = float('inf')\nfrom functools import\
  \ cmp_to_key\nfrom collections import defaultdict as dd\nfrom collections import\
  \ Counter, deque\nfrom heapq import *\nimport math\nfrom math import floor, ceil,\
  \ sqrt\ndef geti(): return map(int, input().strip().split())\ndef getl(): return\
  \ list(map(int, input().strip().split()))\ndef getis(): return map(str, input().strip().split())\n\
  def getls(): return list(map(str, input().strip().split()))\ndef gets(): return\
  \ input().strip()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\\
  n')\n\ndef solve():\n    t = geti()\n    for _ in range(t):\n        n = geti()\n\
  \        p = getl()\n        s = gets()\n        p.sort()\n        q = [0]*n\n \
  \       for i in range(n):\n            if s[i] == '1':\n                q[i] =\
  \ p[n-1-i]\n            else:\n                q[i] = p[i]\n        print(' '.join(map(str,q)))\n\
  \nif __name__=='__main__':\n    solve()```\n````\nQ:"
- " ```import os\nimport sys\nfrom io import BytesIO, IOBase\n\n# import string\n\
  # characters = string.ascii_lowercase\n# digits = string.digits\n# sys.setrecursionlimit(int(1e6))\n\
  # dir = [-1,0,1,0,-1]\n# moves = 'NESW'\ninf = float('inf')\nfrom functools import\
  \ cmp_to_key\nfrom collections import defaultdict as dd\nfrom collections import\
  \ Counter, deque\nfrom heapq import *\nimport math\nfrom math import floor, ceil,\
  \ sqrt\ndef geti(): return map(int, input().strip().split())\ndef getl(): return\
  \ list(map(int, input().strip().split()))\ndef getis(): return map(str, input().strip().split())\n\
  def getls(): return list(map(str, input().strip().split()))\ndef gets(): return\
  \ input().strip()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\\
  n')\n\n\ndef solve():\n    t = geti()[0]\n    for _ in range(t):\n        n = geti()[0]\n\
  \        p = getl()\n        s = gets()\n        s = list(map(int, s))\n       \
  \ p.sort()\n        s = [1 if i else 0 for i in s]\n        ans = [0] * n\n    \
  \    for i in range(n):\n            if s[i]:\n                ans[p.index(i+1)]\
  \ = i+1\n        print(' '.join(map(str, ans)))\n\n\n\n# Fast IO region\nBUFSIZE\
  \ = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n\
  \        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable\
  \ = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write\
  \ if self.writable else None\n\n    def read(self):\n        while True:\n     \
  \       b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n      \
  \      if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\nif __name__=='__main__':\n    solve()````\nQ:"
test_cases:
  input:
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '1

    7

    1 2 3 4 5 6 7

    0101010

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '1

    50

    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

    10101010101010101010101010101010101010101010101010

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101001

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    11110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    11110101

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01110101

    '
  - '1

    7

    1 2 3 4 5 6 7

    1101010

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    00110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01110100

    '
  - '1

    7

    1 2 3 4 5 6 7

    1101000

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    00010001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    00010001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101011

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    11

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01110101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0111010

    8

    2 3 1 8 5 4 7 6

    00110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    11111001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    11110111

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    11110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    011

    8

    2 3 1 8 5 4 7 6

    11110101

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    01110100

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    001

    8

    2 3 1 8 5 4 7 6

    11110101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    11110011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0100010

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01100101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    00110011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    11100101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0111010

    8

    2 3 1 8 5 4 7 6

    00110011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    01100100

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    011

    8

    2 3 1 8 5 4 7 6

    01100101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101001

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1101001

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111001

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    011

    8

    2 3 1 8 5 4 7 6

    01110100

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101101

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    11010001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    00010000

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0001000

    8

    2 3 1 8 5 4 7 6

    00010001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    11111011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    11111001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0111000

    8

    2 3 1 8 5 4 7 6

    11110011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111000

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    11111111

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1101000

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101011

    8

    2 3 1 8 5 4 7 6

    01111001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    11110100

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    010

    8

    2 3 1 8 5 4 7 6

    11111001

    '
  - '1

    7

    1 2 3 4 5 6 7

    1001000

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0111010

    8

    2 3 1 8 5 4 7 6

    00100001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    010

    8

    2 3 1 8 5 4 7 6

    01110100

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    01111111

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    01111001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    01111001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0111000

    8

    2 3 1 8 5 4 7 6

    11110111

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1101000

    8

    2 3 1 8 5 4 7 6

    11010010

    '
  - '3

    2

    2 1

    10

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111010

    8

    2 3 1 8 5 4 7 6

    00110001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111100

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101000

    8

    2 3 1 8 5 4 7 6

    01110111

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    01111101

    '
  - '3

    2

    1 2

    11

    3

    3 1 2

    111

    8

    2 3 1 8 5 4 7 6

    01100101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111101

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101010

    8

    2 3 1 8 5 4 7 6

    10010000

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0110000

    8

    2 3 1 8 5 4 7 6

    11110011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    001

    8

    2 3 1 8 5 4 7 6

    01100101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101110

    8

    2 3 1 8 5 4 7 6

    01111001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101110

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0001010

    8

    2 3 1 8 5 4 7 6

    00010001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    010

    8

    2 3 1 8 5 4 7 6

    11110101

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    01110110

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1101000

    8

    2 3 1 8 5 4 7 6

    10010011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    11010011

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    00110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    011

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0100001

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '1

    7

    1 2 3 4 5 6 7

    1100010

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0111010

    8

    2 3 1 8 5 4 7 6

    00110111

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111000

    8

    2 3 1 8 5 4 7 6

    11000011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101011

    8

    2 3 1 8 5 4 7 6

    10010000

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1101110

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    110

    8

    2 3 1 8 5 4 7 6

    11110110

    '
  - '3

    2

    1 2

    11

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    11100101

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    1111100

    8

    2 3 1 8 5 4 7 6

    11000011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101011

    8

    2 3 1 8 5 4 7 6

    01100001

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0100000

    8

    2 3 1 8 5 4 7 6

    11110011

    '
  - '3

    2

    1 2

    10

    7

    1 2 3 4 5 6 7

    0101001

    8

    2 3 1 8 5 4 7 6

    11011011

    '
  - '3

    2

    1 2

    11

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    01110101

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    01100101

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    000

    8

    2 3 1 8 5 4 7 6

    11111001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    01110001

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    11010001

    '
  - '3

    2

    1 2

    11

    3

    3 1 2

    101

    8

    2 3 1 8 5 4 7 6

    01100101

    '
  - '3

    2

    1 2

    10

    3

    3 1 2

    000

    8

    2 3 1 8 5 4 7 6

    11110101

    '
  output:
  - '2 1

    3 1 2

    1 6 5 8 3 2 4 7

    '
  - '1 5 2 6 3 7 4

    '
  - '2 1

    1 5 2 6 3 7 4

    1 6 5 8 3 2 4 7

    '
  - '26 1 27 2 28 3 29 4 30 5 31 6 32 7 33 8 34 9 35 10 36 11 37 12 38 13 39 14 40
    15 41 16 42 17 43 18 44 19 45 20 46 21 47 22 48 23 49 24 50 25

    '
  - '2 1

    1 6 2 7 3 4 5

    1 6 5 8 3 2 4 7

    '
  - '2 1

    1 5 2 6 3 4 7

    1 6 5 8 3 2 4 7

    '
  - '2 1

    3 1 2

    5 6 4 8 2 1 3 7

    '
  - '2 1

    3 1 2

    4 5 3 8 1 6 2 7

    '
  - '2 1

    3 1 2

    1 5 4 8 2 6 3 7

    '
  - '4 5 1 6 2 7 3

    '
  - '2 1

    1 5 2 6 3 7 4

    1 2 6 8 4 3 5 7

    '
  - '2 1

    3 1 2

    1 6 5 8 2 7 4 3

    '
  - '5 6 1 7 2 3 4

    '
  - '2 1

    1 5 2 6 3 7 4

    2 3 1 8 5 4 6 7

    '
  - '2 1

    1 6 2 7 3 4 5

    2 3 1 8 5 4 6 7

    '
  - '2 1

    1 4 2 5 3 6 7

    1 6 5 8 3 2 4 7

    '
  - '1 2

    3 1 2

    1 5 4 8 2 6 3 7

    '
  - '2 1

    1 4 5 6 2 7 3

    1 2 6 8 4 3 5 7

    '
  - '2 1

    3 1 2

    4 5 3 8 6 1 2 7

    '
  - '2 1

    3 1 2

    3 4 2 8 1 5 7 6

    '
  - '2 1

    1 6 2 7 3 4 5

    5 6 4 8 2 1 3 7

    '
  - '2 1

    1 2 3

    4 5 3 8 1 6 2 7

    '
  - '2 1

    3 2 1

    1 6 5 8 2 7 4 3

    '
  - '2 1

    2 1 3

    4 5 3 8 1 6 2 7

    '
  - '2 1

    1 6 2 7 3 4 5

    4 5 3 8 2 1 7 6

    '
  - '2 1

    1 6 2 3 4 7 5

    1 6 5 8 3 2 4 7

    '
  - '2 1

    1 6 2 7 3 4 5

    4 5 1 8 3 2 7 6

    '
  - '2 1

    3 1 2

    1 6 5 4 2 7 3 8

    '
  - '2 1

    1 5 2 6 3 7 4

    1 2 5 8 4 3 7 6

    '
  - '2 1

    3 1 2

    5 6 4 3 1 7 2 8

    '
  - '2 1

    1 4 5 6 2 7 3

    1 2 5 8 4 3 7 6

    '
  - '2 1

    3 2 1

    1 7 6 5 2 8 4 3

    '
  - '2 1

    1 2 3

    1 6 5 4 2 7 3 8

    '
  - '2 1

    1 5 2 6 3 4 7

    4 5 1 8 3 2 7 6

    '
  - '2 1

    4 5 1 6 2 3 7

    4 5 1 8 3 2 7 6

    '
  - '2 1

    3 4 5 6 1 2 7

    4 5 1 8 3 2 7 6

    '
  - '2 1

    1 2 3

    1 6 5 8 2 7 4 3

    '
  - '2 1

    1 4 2 5 6 3 7

    4 5 1 8 3 2 7 6

    '
  - '2 1

    3 1 2

    5 6 1 8 3 2 4 7

    '
  - '2 1

    1 5 2 6 3 7 4

    2 3 1 8 5 4 7 6

    '
  - '2 1

    1 2 3 7 4 5 6

    2 3 1 8 5 4 6 7

    '
  - '2 1

    1 6 2 7 3 4 5

    3 4 2 8 5 1 7 6

    '
  - '2 1

    3 2 1

    4 5 3 8 6 1 2 7

    '
  - '2 1

    1 5 6 7 2 3 4

    4 5 3 8 2 1 7 6

    '
  - '2 1

    4 5 6 7 1 2 3

    4 5 1 8 3 2 7 6

    '
  - '2 1

    1 6 2 7 3 4 5

    2 3 1 8 5 4 7 6

    '
  - '2 1

    5 6 1 7 2 3 4

    4 5 1 8 3 2 7 6

    '
  - '2 1

    1 4 2 5 3 6 7

    1 5 4 8 6 2 3 7

    '
  - '2 1

    3 2 1

    5 6 4 8 1 7 3 2

    '
  - '2 1

    2 3 1

    4 5 3 8 6 1 2 7

    '
  - '6 1 2 7 3 4 5

    '
  - '2 1

    1 4 5 6 2 7 3

    1 2 7 6 4 3 5 8

    '
  - '2 1

    2 3 1

    1 6 5 8 2 7 4 3

    '
  - '2 1

    1 6 2 7 3 4 5

    1 3 2 8 5 4 7 6

    '
  - '2 1

    1 5 2 6 3 7 4

    1 5 4 8 6 2 3 7

    '
  - '2 1

    3 2 1

    1 5 4 8 6 2 3 7

    '
  - '2 1

    1 5 6 7 2 3 4

    3 4 2 8 1 5 7 6

    '
  - '2 1

    5 6 1 7 2 3 4

    5 6 1 8 3 2 7 4

    '
  - '2 1

    3 1 2

    1 6 5 8 3 2 4 7

    '
  - '2 1

    3 4 5 6 1 7 2

    1 2 6 8 4 3 5 7

    '
  - '2 1

    3 4 5 6 7 1 2

    4 5 1 8 3 2 7 6

    '
  - '2 1

    1 6 2 7 3 4 5

    1 4 3 8 2 5 7 6

    '
  - '2 1

    3 2 1

    1 4 3 8 6 5 2 7

    '
  - '1 2

    3 1 2

    1 6 5 4 2 7 3 8

    '
  - '2 1

    2 3 4 5 6 1 7

    4 5 1 8 3 2 7 6

    '
  - '2 1

    1 5 2 6 3 7 4

    7 2 1 8 4 3 6 5

    '
  - '2 1

    1 6 7 2 3 4 5

    4 5 3 8 2 1 7 6

    '
  - '2 1

    2 1 3

    1 6 5 4 2 7 3 8

    '
  - '2 1

    1 4 2 5 6 7 3

    1 5 4 8 6 2 3 7

    '
  - '2 1

    1 4 2 5 6 7 3

    1 6 5 8 3 2 4 7

    '
  - '2 1

    1 2 3 6 4 7 5

    2 3 1 8 5 4 6 7

    '
  - '2 1

    2 3 1

    4 5 3 8 1 6 2 7

    '
  - '2 1

    3 2 1

    1 5 4 8 2 6 7 3

    '
  - '2 1

    5 6 1 7 2 3 4

    5 2 1 8 4 3 7 6

    '
  - '2 1

    3 2 1

    1 6 5 8 3 2 4 7

    '
  - '2 1

    3 1 2

    4 5 1 8 3 2 7 6

    '
  - '2 1

    3 2 1

    1 2 6 8 4 3 5 7

    '
  - '2 1

    1 2 3

    1 6 5 8 3 2 4 7

    '
  - '2 1

    1 6 2 3 4 5 7

    1 6 5 8 3 2 4 7

    '
  - '5 6 1 2 3 7 4

    '
  - '2 1

    1 4 5 6 2 7 3

    1 2 4 8 3 5 7 6

    '
  - '2 1

    4 5 6 7 1 2 3

    5 6 1 4 3 2 8 7

    '
  - '2 1

    1 4 2 5 3 6 7

    7 2 1 8 4 3 6 5

    '
  - '2 1

    3 4 1 5 6 7 2

    1 6 5 8 3 2 4 7

    '
  - '2 1

    3 2 1

    4 5 3 8 1 6 7 2

    '
  - '1 2

    3 1 2

    5 6 4 3 1 7 2 8

    '
  - '2 1

    3 4 5 6 7 1 2

    5 6 1 4 3 2 8 7

    '
  - '2 1

    1 4 2 5 3 6 7

    1 7 6 5 3 2 4 8

    '
  - '2 1

    1 7 2 3 4 5 6

    4 5 3 8 2 1 7 6

    '
  - '2 1

    1 5 2 6 3 4 7

    3 4 1 8 5 2 7 6

    '
  - '1 2

    3 1 2

    1 5 4 8 2 6 3 7

    '
  - '2 1

    3 1 2

    1 6 5 4 2 7 3 8

    '
  - '2 1

    3 1 2

    4 5 3 8 6 1 2 7

    '
  - '2 1

    3 1 2

    1 6 5 8 3 2 4 7

    '
  - '2 1

    3 1 2

    5 6 1 8 3 2 4 7

    '
  - '1 2

    3 1 2

    1 6 5 4 2 7 3 8

    '
  - '2 1

    3 1 2

    4 5 3 8 1 6 2 7

    '
timeout: 2.0
