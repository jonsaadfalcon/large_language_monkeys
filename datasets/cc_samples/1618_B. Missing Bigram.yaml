prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou are given\
  \ a set of strings S. Each string consists of lowercase Latin letters.\n\nFor each\
  \ string in this set, you want to calculate the minimum number of seconds required\
  \ to type this string. To type a string, you have to start with an empty string\
  \ and transform it into the string you want to type using the following actions:\n\
  \n  * if the current string is t, choose some lowercase Latin letter c and append\
  \ it to the back of t, so the current string becomes t + c. This action takes 1\
  \ second; \n  * use autocompletion. When you try to autocomplete the current string\
  \ t, a list of all strings s \u2208 S such that t is a prefix of s is shown to you.\
  \ This list includes t itself, if t is a string from S, and the strings are ordered\
  \ lexicographically. You can transform t into the i-th string from this list in\
  \ i seconds. Note that you may choose any string from this list you want, it is\
  \ not necessarily the string you are trying to type. \n\n\n\nWhat is the minimum\
  \ number of seconds that you have to spend to type each string from S?\n\nNote that\
  \ the strings from S are given in an unusual way.\n\nInput\n\nThe first line contains\
  \ one integer n (1 \u2264 n \u2264 10^6).\n\nThen n lines follow, the i-th line\
  \ contains one integer p_i (0 \u2264 p_i < i) and one lowercase Latin character\
  \ c_i. These lines form some set of strings such that S is its subset as follows:\
  \ there are n + 1 strings, numbered from 0 to n; the 0-th string is an empty string,\
  \ and the i-th string (i \u2265 1) is the result of appending the character c_i\
  \ to the string p_i. It is guaranteed that all these strings are distinct.\n\nThe\
  \ next line contains one integer k (1 \u2264 k \u2264 n) \u2014 the number of strings\
  \ in S.\n\nThe last line contains k integers a_1, a_2, ..., a_k (1 \u2264 a_i \u2264\
  \ n, all a_i are pairwise distinct) denoting the indices of the strings generated\
  \ by above-mentioned process that form the set S \u2014 formally, if we denote the\
  \ i-th generated string as s_i, then S = {s_{a_1}, s_{a_2}, ..., s_{a_k}}.\n\nOutput\n\
  \nPrint k integers, the i-th of them should be equal to the minimum number of seconds\
  \ required to type the string s_{a_i}.\n\nExamples\n\nInput\n\n\n10\n0 i\n1 q\n\
  2 g\n0 k\n1 e\n5 r\n4 m\n5 h\n3 p\n3 e\n5\n8 9 1 10 6\n\n\nOutput\n\n\n2 4 1 3 3\
  \ \n\n\nInput\n\n\n8\n0 a\n1 b\n2 a\n2 b\n4 a\n4 b\n5 c\n6 d\n5\n2 3 4 7 8\n\n\n\
  Output\n\n\n1 2 2 4 4 \n\nNote\n\nIn the first example, S consists of the following\
  \ strings: ieh, iqgp, i, iqge, ier.\nA: ```import sys\ninput = sys.stdin.readline\n\
  \nn=int(input())\nT=[input().split() for i in range(n)]\nk=int(input())\nS=list(map(int,input().split()))\n\
  SETS=set(S)\n\nE=[[] for i in range(n+1)]\nP=[-1]*(n+1)\n\nfor i in range(n):\n\
  \    p,s=T[i]\n    p=int(p)\n    E[p].append((s,i+1))\n    P[i+1]=p\n\nfor i in\
  \ range(n+1):\n    E[i].sort(reverse=True)\n\nELI=[0]*(n+1)\nDEPTH=[0]*(n+1)\nELIMIN=[0]*(n+1)\n\
  ANS=[0]*(n+1)\n\nQ=[0]\nUSED=[0]*(n+1)\ncount=0\nwhile Q:\n    x=Q.pop()\n    USED[x]=1\n\
  \    if x in SETS:\n        count+=1\n    #print(x,count)\n\n    if x in SETS:\n\
  \        ANS[x]=min(DEPTH[x],count+ELIMIN[P[x]],ANS[P[x]]+1)\n        ELI[x]=ANS[x]-count+1\n\
  \    else:\n        ANS[x]=min(DEPTH[x],ANS[P[x]]+1)\n        ELI[x]=ANS[x]-count\n\
  \n    ELIMIN[x]=min(ELI[x],ELIMIN[P[x]])\n        \n    \n    for s,to in E[x]:\n\
  \        if USED[to]==1:\n            continue\n        \n        Q.append(to)\n\
  \        DEPTH[to]=DEPTH[x]+1\n\n\nprint(*[ANS[s] for s in S])```\nQ: Write python\
  \ code to solve the following coding problem that obeys the constraints and passes\
  \ the example test cases. The output code needs to read from and write to standard\
  \ IO. Please wrap your code answer using ```:\nWe have a grid with (2^N - 1) rows\
  \ and (2^M-1) columns. You are asked to write 0 or 1 in each of these squares. Let\
  \ a_{i,j} be the number written in the square at the i-th row from the top and the\
  \ j-th column from the left.\n\nFor a quadruple of integers (i_1, i_2, j_1, j_2)\
  \ such that 1\\leq i_1 \\leq i_2\\leq 2^N-1, 1\\leq j_1 \\leq j_2\\leq 2^M-1, let\
  \ S(i_1, i_2, j_1, j_2) = \\displaystyle \\sum_{r=i_1}^{i_2}\\sum_{c=j_1}^{j_2}a_{r,c}.\
  \ Then, let the oddness of the grid be the number of quadruples (i_1, i_2, j_1,\
  \ j_2) such that S(i_1, i_2, j_1, j_2) is odd.\n\nFind a way to fill in the grid\
  \ that maximizes its oddness.\n\nConstraints\n\n* N and M are integers between 1\
  \ and 10 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following\
  \ format:\n\n\nN M\n\n\nOutput\n\nPrint numbers to write in the grid so that its\
  \ oddness is maximized, in the following format:\n\n\na_{1,1}a_{1,2}\\cdots a_{1,2^M-1}\n\
  a_{2,1}a_{2,2}\\cdots a_{2,2^M-1}\n\\vdots\na_{2^N-1,1}a_{2^N-1,2}\\cdots a_{2^N-1,2^M-1}\n\
  \n\nIf there are multiple solutions, you can print any of them.\n\nExample\n\nInput\n\
  \n1 2\n\n\nOutput\n\n111\nA: ```#!usr/bin/env python3\nfrom collections import defaultdict,deque\n\
  from heapq import heappush, heappop\nfrom itertools import permutations\nimport\
  \ sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n\
  def I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\n\
  def S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n   \
  \     return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\n\
  def LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for\
  \ i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\n\
  mod = 1000000007\n\ndef solve():\n    def hadamard(n):\n        if mem[n] != None:\n\
  \            return mem[n]\n        h = hadamard(n-1)\n        res = [[j for j in\
  \ i] for i in h]\n        res_ = [[j for j in i] for i in h]\n        for i in range(len(res)):\n\
  \            res[i] += [j for j in h[i]]\n            res_[i] += [j^1 for j in h[i]]\n\
  \        res += res_\n        mem[n] = res\n        return res\n\n    n,m = LI()\n\
  \    f = 0\n    if m < n:\n        n,m = m,n\n        f = 1\n    h,w = 1<<n, 1<<m\n\
  \    mem = defaultdict(lambda : None)\n    mem[0] = [[0]]\n    s = hadamard(m)[:h]\n\
  \    if f:\n        s = [[s[j][i] for j in range(h)] for i in range(w)]\n      \
  \  h,w = w,h\n    for x in range(w):\n        for y in range(h-1)[::-1]:\n     \
  \       s[y+1][x] ^= s[y][x]\n    for y in range(h):\n        for x in range(w-1)[::-1]:\n\
  \            s[y][x+1] ^= s[y][x]\n    ans = [i[1:] for i in s[1:]]\n    for i in\
  \ ans:\n        print(*i,sep=\"\")\n    return\n\n#Solve\nif __name__ == \"__main__\"\
  :\n    solve()```\nQ: Write python code to solve the following coding problem that\
  \ obeys the constraints and passes the example test cases. The output code needs\
  \ to read from and write to standard IO. Please wrap your code answer using ```:\n\
  Polycarp has come up with a new game to play with you. He calls it \"A missing bigram\"\
  .\n\nA bigram of a word is a sequence of two adjacent letters in it.\n\nFor example,\
  \ word \"abbaaba\" contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"\
  ba\".\n\nThe game goes as follows. First, Polycarp comes up with a word, consisting\
  \ only of lowercase letters 'a' and 'b'. Then, he writes down all its bigrams on\
  \ a whiteboard in the same order as they appear in the word. After that, he wipes\
  \ one of them off the whiteboard.\n\nFinally, Polycarp invites you to guess what\
  \ the word that he has come up with was.\n\nYour goal is to find any word such that\
  \ it's possible to write down all its bigrams and remove one of them, so that the\
  \ resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\
  \nThe tests are generated in such a way that the answer exists. If there are multiple\
  \ answers, you can print any of them.\n\nInput\n\nThe first line contains a single\
  \ integer t (1 \u2264 t \u2264 2000) \u2014 the number of testcases.\n\nThe first\
  \ line of each testcase contains a single integer n (3 \u2264 n \u2264 100) \u2014\
  \ the length of the word Polycarp has come up with.\n\nThe second line of each testcase\
  \ contains n-2 bigrams of that word, separated by a single space. Each bigram consists\
  \ of two letters, each of them is either 'a' or 'b'.\n\nAdditional constraint on\
  \ the input: there exists at least one string such that it is possible to write\
  \ down all its bigrams, except one, so that the resulting sequence is the same as\
  \ the sequence in the input. In other words, the answer exists.\n\nOutput\n\nFor\
  \ each testcase print a word, consisting of n letters, each of them should be either\
  \ 'a' or 'b'. It should be possible to write down all its bigrams and remove one\
  \ of them, so that the resulting sequence of bigrams is the same as the one Polycarp\
  \ ended up with.\n\nThe tests are generated in such a way that the answer exists.\
  \ If there are multiple answers, you can print any of them. \n\nExample\n\nInput\n\
  \n\n4\n7\nab bb ba aa ba\n7\nab ba aa ab ba\n3\naa\n5\nbb ab bb\n\n\nOutput\n\n\n\
  abbaaba\nabaabaa\nbaa\nbbabb\n\nNote\n\nThe first two testcases from the example\
  \ are produced from the word \"abbaaba\". As listed in the statement, it contains\
  \ bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nIn the first testcase,\
  \ the 5-th bigram is removed. \n\nIn the second testcase, the 2-nd bigram is removed.\
  \ However, that sequence could also have been produced from the word \"abaabaa\"\
  . It contains bigrams \"ab\", \"ba\", \"aa\", \"ab\", \"ba\" and \"aa\". The missing\
  \ bigram is the 6-th one.\n\nIn the third testcase, all of \"baa\", \"aab\" and\
  \ \"aaa\" are valid answers.\nA:"
question: "Polycarp has come up with a new game to play with you. He calls it \"A\
  \ missing bigram\".\n\nA bigram of a word is a sequence of two adjacent letters\
  \ in it.\n\nFor example, word \"abbaaba\" contains bigrams \"ab\", \"bb\", \"ba\"\
  , \"aa\", \"ab\" and \"ba\".\n\nThe game goes as follows. First, Polycarp comes\
  \ up with a word, consisting only of lowercase letters 'a' and 'b'. Then, he writes\
  \ down all its bigrams on a whiteboard in the same order as they appear in the word.\
  \ After that, he wipes one of them off the whiteboard.\n\nFinally, Polycarp invites\
  \ you to guess what the word that he has come up with was.\n\nYour goal is to find\
  \ any word such that it's possible to write down all its bigrams and remove one\
  \ of them, so that the resulting sequence of bigrams is the same as the one Polycarp\
  \ ended up with.\n\nThe tests are generated in such a way that the answer exists.\
  \ If there are multiple answers, you can print any of them.\n\nInput\n\nThe first\
  \ line contains a single integer t (1 \u2264 t \u2264 2000) \u2014 the number of\
  \ testcases.\n\nThe first line of each testcase contains a single integer n (3 \u2264\
  \ n \u2264 100) \u2014 the length of the word Polycarp has come up with.\n\nThe\
  \ second line of each testcase contains n-2 bigrams of that word, separated by a\
  \ single space. Each bigram consists of two letters, each of them is either 'a'\
  \ or 'b'.\n\nAdditional constraint on the input: there exists at least one string\
  \ such that it is possible to write down all its bigrams, except one, so that the\
  \ resulting sequence is the same as the sequence in the input. In other words, the\
  \ answer exists.\n\nOutput\n\nFor each testcase print a word, consisting of n letters,\
  \ each of them should be either 'a' or 'b'. It should be possible to write down\
  \ all its bigrams and remove one of them, so that the resulting sequence of bigrams\
  \ is the same as the one Polycarp ended up with.\n\nThe tests are generated in such\
  \ a way that the answer exists. If there are multiple answers, you can print any\
  \ of them. \n\nExample\n\nInput\n\n\n4\n7\nab bb ba aa ba\n7\nab ba aa ab ba\n3\n\
  aa\n5\nbb ab bb\n\n\nOutput\n\n\nabbaaba\nabaabaa\nbaa\nbbabb\n\nNote\n\nThe first\
  \ two testcases from the example are produced from the word \"abbaaba\". As listed\
  \ in the statement, it contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and\
  \ \"ba\".\n\nIn the first testcase, the 5-th bigram is removed. \n\nIn the second\
  \ testcase, the 2-nd bigram is removed. However, that sequence could also have been\
  \ produced from the word \"abaabaa\". It contains bigrams \"ab\", \"ba\", \"aa\"\
  , \"ab\", \"ba\" and \"aa\". The missing bigram is the 6-th one.\n\nIn the third\
  \ testcase, all of \"baa\", \"aab\" and \"aaa\" are valid answers."
samples:
- " ``````python\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor\
  \ _ in range(t):\n    n = int(input())\n    bigrams = input().split()\n    bigrams\
  \ = [bigram for bigram in bigrams if bigram]\n    s = ''\n    for bigram in bigrams:\n\
  \        s += bigram[0]\n    if s == 'a'*n or s == 'b'*n:\n        print('a'*n)\n\
  \        continue\n    if s[0] == 'a':\n        for i in range(n-1):\n         \
  \   if s[i] == 'a' and s[i+1] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n\
  \                break\n        else:\n            for i in range(n-1):\n      \
  \          if s[i] == 'b' and s[i+1] == 'b':\n                    s = s[:i] + 'a'\
  \ + s[i+1:]\n                    break\n    else:\n        for i in range(n-1):\n\
  \            if s[i] == 'a' and s[i+1] == 'a':\n                s = s[:i] + 'b'\
  \ + s[i+1:]\n                break\n        else:\n            for i in range(n-1):\n\
  \                if s[i] == 'b' and s[i+1] == 'b':\n                    s = s[:i]\
  \ + 'a' + s[i+1:]\n                    break\n    print(s)\n````````````\nQ:"
- " ```#!/usr/bin/env python\nfrom collections import defaultdict\nimport sys\n\n\
  def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n\
  \        bigrams = input().split()\n        ans = []\n        for i in range(n):\n\
  \            ans.append('a' if (i % 2 == 0) else 'b')\n        print(''.join(ans))\n\
  \n#Solve\nif __name__ == \"__main__\":\n    solve()``````python\n```\nQ:"
test_cases:
  input:
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa b_

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba ba ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    bb bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa aa ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    bb bb ba aa ba

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa aa ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa aa aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bd

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    bb bb bb aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa aa aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    bb ba aa bb ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ba bb ba aa aa

    7

    aa aa aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa aa aa bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    bb bb ba aa bb

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    bb bb bb aa aa

    7

    ab ba ba ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba ab aa

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab bb aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba ab bb ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba ab aa

    7

    aa aa aa bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    bb bb bb aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab ab

    3

    aa

    5

    ab ba bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba ab ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba ab ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab ab ba aa aa

    7

    aa aa aa bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa b^

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ba bb ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba ba aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb bb aa ab

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    aa aa aa bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab bb ba ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba bb bb ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab bb aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa aa aa

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb bb ab ba

    7

    ab bb aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa aa ab ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab aa aa ab ba

    3

    aa

    5

    ab ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba ab ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bd

    '
  - '4

    7

    bb bb ba aa bb

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    bb bb bb aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba ab ab bb

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa b^

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab ba ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ba bb ba ab ba

    7

    ab bb aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab ba ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ba aa ab bb

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa bb

    7

    ab ba ba ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba b`

    '
  - '4

    7

    ba bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba ab ab

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb bb ab ba

    7

    ab bb aa ab b`

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ba aa ab b`

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab ba ba aa aa

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba ab ab

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab ba ba aa aa

    7

    aa ab aa ab b`

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab aa aa ab ba

    3

    aa

    5

    ab ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba ab ab

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    bb bb ba aa ba

    7

    aa aa aa bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    aa bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ba bb ba aa aa

    7

    ab ba ab ba ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba ab ba aa

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab bb ba ab ab

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ab aa ab b`

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba ab aa

    7

    ba ab aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    bb bb bb aa aa

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    bb bb ba aa ba

    7

    aa aa ab bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    bb bb ba aa ba

    7

    ab bb ba ab ab

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    bb bb ba aa ba

    7

    ab aa ab bb ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ab aa ab ba

    3

    aa

    5

    bb ba bd

    '
  - '4

    7

    bb bb ba aa ba

    7

    bb bb ba ab ab

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    bb bb ba aa ba

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    bb bb ba aa ba

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab ab

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba ba ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ba ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab aa

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba ab ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa aa ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa b_

    7

    ab ba aa ba ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    bb bb bb aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab aa

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    bb ba aa bb ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab aa

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ab aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab aa

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba aa ba ab

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab ba aa bb ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa b`

    7

    ab ba aa ab aa

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba ab ba ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ba aa

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab bb ba ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba ab ba ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    bb bb ba aa ba

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ab aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ba bb ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab bb ba ab aa

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb bb aa aa

    7

    ab ba aa aa ba

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ab aa

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa b_

    7

    ab ba aa ba ab

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab bb ba ab aa

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb bb ab ba

    7

    ab bb aa ab b`

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ab aa ab b`

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ba aa ba ab

    3

    aa

    5

    bb ab bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    ba ab aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab ba aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb ba aa aa

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab aa aa ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba aa ba

    7

    ab ab ba ab ba

    3

    aa

    5

    bb ba ba

    '
  - '4

    7

    ab bb ba ab ba

    7

    ab bb aa ab ba

    3

    aa

    5

    bb ab ba

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ab aa ab ba

    3

    aa

    5

    bb ab bc

    '
  - '4

    7

    ab bb bb ba aa

    7

    aa ba aa ab ba

    3

    aa

    5

    bb ba bb

    '
  - '4

    7

    ab bb ba aa aa

    7

    aa ab aa ab ba

    3

    aa

    5

    bb ba bc

    '
  - '4

    7

    ab bb ba aa ba

    7

    ba ba aa ab ba

    3

    aa

    5

    bb ab bb

    '
  output:
  - 'abbaaba

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaba

    abaabab

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaba

    abaabba

    aaa

    bbabb

    '
  - 'abbaab`

    abaabab

    aaa

    bbabb

    '
  - 'abbaaba

    abaabab

    aaa

    bbaba

    '
  - 'abbaaaa

    abaabab

    aaa

    bbaba

    '
  - 'abbaaaa

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaba

    babaaba

    aaa

    bbabb

    '
  - 'abbaab_

    abaabab

    aaa

    bbabb

    '
  - 'abbaaaa

    abaaaba

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbaba

    '
  - 'abbaaba

    abababa

    aaa

    bbabb

    '
  - 'abbaaaa

    babaaba

    aaa

    bbabb

    '
  - 'bbbaaba

    abaabaa

    aaa

    bbabb

    '
  - 'abbbaaa

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaba

    aabaaba

    aaa

    bbaba

    '
  - 'abbaab`

    abaabaa

    aaa

    bbabb

    '
  - 'abbaab`

    abaaaba

    aaa

    bbabb

    '
  - 'abbabaa

    abaabba

    aaa

    bbabb

    '
  - 'bbbaaba

    babaaba

    aaa

    bbabb

    '
  - 'abbbaaa

    abaaaba

    aaa

    bbabb

    '
  - 'abbaaaa

    aaaabaa

    aaa

    bbabb

    '
  - 'abbaaaa

    babaaba

    aaa

    bbabc

    '
  - 'abbaaba

    babaaba

    aaa

    bbaba

    '
  - 'abbaaaa

    babaaba

    aaa

    bbabd

    '
  - 'abbaaaa

    abaabaa

    aaa

    bbabc

    '
  - 'bbbbaaa

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaaa

    aaaabaa

    aaa

    bbaba

    '
  - 'abbaaaa

    abaaaba

    aaa

    bbaba

    '
  - 'abbaaba

    bbaabba

    aaa

    bbabb

    '
  - 'abbaaba

    abaabba

    aaa

    bbaba

    '
  - 'abbabaa

    abaabba

    aaa

    bbaba

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbabc

    '
  - 'babbaaa

    aaaabaa

    aaa

    bbaba

    '
  - 'abbbaaa

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaaa

    aaaabba

    aaa

    bbaba

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbaba

    '
  - 'bbbaabb

    abaabaa

    aaa

    bbabb

    '
  - 'bbbbaaa

    abababa

    aaa

    bbabb

    '
  - 'abbabaa

    abaaaba

    aaa

    bbaba

    '
  - 'abbaaba

    abbaaba

    aaa

    bbaba

    '
  - 'abbaaba

    ababbaa

    aaa

    bbabb

    '
  - 'abbabaa

    aaaabba

    aaa

    bbaba

    '
  - 'bbbbaaa

    babaaba

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabc

    '
  - 'abbaab`

    abaabab

    aaa

    ababb

    '
  - 'abbbaaa

    abababa

    aaa

    bbabb

    '
  - 'abbaaaa

    abababa

    aaa

    bbabc

    '
  - 'ababaaa

    aaaabba

    aaa

    bbaba

    '
  - 'abbaab^

    abaabab

    aaa

    bbabb

    '
  - 'babbaaa

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaaa

    abaabaa

    aaa

    bbaba

    '
  - 'abbabaa

    abaabaa

    aaa

    bbaba

    '
  - 'abbabaa

    babaaba

    aaa

    bbabb

    '
  - 'abbbaab

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaba

    aaaabba

    aaa

    bbaba

    '
  - 'abbaaba

    abbabaa

    aaa

    bbaba

    '
  - 'abbaaba

    ababbba

    aaa

    bbabb

    '
  - 'abbabaa

    abbaaba

    aaa

    bbaba

    '
  - 'abbaaaa

    babaaba

    aaa

    bbaba

    '
  - 'abbaaba

    abaaaaa

    aaa

    bbabc

    '
  - 'abbbaba

    abbaaba

    aaa

    bbaba

    '
  - 'abbaaaa

    aaababa

    aaa

    bbaba

    '
  - 'abbaaaa

    abaaaba

    aaa

    ababa

    '
  - 'abbaaba

    abababa

    aaa

    bbaba

    '
  - 'abbbaaa

    abaabaa

    aaa

    bbabd

    '
  - 'bbbaabb

    abaabab

    aaa

    bbabb

    '
  - 'bbbbaaa

    babaaba

    aaa

    bbabc

    '
  - 'abbbaaa

    abababb

    aaa

    bbabb

    '
  - 'abbaab^

    abaabaa

    aaa

    bbabb

    '
  - 'ababaaa

    abaabaa

    aaa

    bbaba

    '
  - 'babbaba

    abbaaba

    aaa

    bbaba

    '
  - 'ababaaa

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaaa

    babaabb

    aaa

    bbabb

    '
  - 'abbbaaa

    aabaaba

    aaa

    bbabb

    '
  - 'abbaabb

    abababa

    aaa

    bbabb

    '
  - 'abbaab`

    babaaba

    aaa

    bbabb

    '
  - 'abbaaaa

    abaaaba

    aaa

    bbab`

    '
  - 'babbaaa

    aabaaba

    aaa

    bbabc

    '
  - 'abbaab`

    abaabaa

    aaa

    bbabc

    '
  - 'abbabab

    abaabaa

    aaa

    bbaba

    '
  - 'abbbaba

    abbaab`

    aaa

    bbaba

    '
  - 'abbaaaa

    aabaab`

    aaa

    bbabc

    '
  - 'ababaaa

    abaabab

    aaa

    bbaba

    '
  - 'abbabab

    babaaba

    aaa

    bbaba

    '
  - 'ababaaa

    aabaab`

    aaa

    bbabc

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbabb

    '
  - 'abbaaaa

    abaaaba

    aaa

    ababb

    '
  - 'abbaaba

    aabaaba

    aaa

    bbabb

    '
  - 'abbbaaa

    abaabab

    aaa

    bbabc

    '
  - 'abbabab

    abaabba

    aaa

    bbabb

    '
  - 'bbbaaba

    aaaabba

    aaa

    bbaba

    '
  - 'aabbaaa

    aabaaba

    aaa

    bbaba

    '
  - 'babbaaa

    abababa

    aaa

    bbabc

    '
  - 'abbaaba

    ababaaa

    aaa

    bbabc

    '
  - 'abbaaba

    abbabab

    aaa

    bbaba

    '
  - 'abbaaaa

    babaab`

    aaa

    bbabc

    '
  - 'abbabaa

    babaaba

    aaa

    bbabc

    '
  - 'bbbbaaa

    abaabab

    aaa

    bbabc

    '
  - 'abbabaa

    abaaaba

    aaa

    bbabb

    '
  - 'bbbaaba

    aaabbaa

    aaa

    bbaba

    '
  - 'bbbaaba

    abbabab

    aaa

    bbaba

    '
  - 'bbbaaba

    abaabba

    aaa

    bbaba

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbabd

    '
  - 'bbbaaba

    bbbabab

    aaa

    bbaba

    '
  - 'bbbaaba

    aabaaba

    aaa

    bbabb

    '
  - 'abbbaaa

    babaaba

    aaa

    bbabb

    '
  - 'bbbaaba

    babaaba

    aaa

    bbaba

    '
  - 'abbaaba

    abaabab

    aaa

    bbabb

    '
  - 'abbaaba

    abaabba

    aaa

    bbabb

    '
  - 'abbaab`

    abaabab

    aaa

    bbabb

    '
  - 'abbaaba

    abababa

    aaa

    bbabb

    '
  - 'abbaab`

    abaabaa

    aaa

    bbabb

    '
  - 'abbaab`

    abaabab

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbaba

    '
  - 'abbaaba

    abaabaa

    aaa

    bbaba

    '
  - 'abbaaba

    abababa

    aaa

    bbabb

    '
  - 'abbaab`

    abaaaba

    aaa

    bbabb

    '
  - 'abbaab_

    abaabab

    aaa

    bbabb

    '
  - 'abbaaaa

    babaaba

    aaa

    bbabb

    '
  - 'bbbbaaa

    abaabaa

    aaa

    bbabb

    '
  - 'abbbaaa

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaba

    bbaabba

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbaba

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaaa

    abaabab

    aaa

    bbaba

    '
  - 'abbaab`

    abaaaba

    aaa

    bbabb

    '
  - 'abbabaa

    abaabba

    aaa

    bbabb

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbaba

    '
  - 'abbaab`

    abaabaa

    aaa

    bbabb

    '
  - 'abbaaaa

    abababa

    aaa

    bbabc

    '
  - 'abbaaba

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaba

    abbabaa

    aaa

    bbaba

    '
  - 'abbaaaa

    abababa

    aaa

    bbabc

    '
  - 'bbbaaba

    babaaba

    aaa

    bbabb

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbabc

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbaba

    '
  - 'babbaaa

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaba

    abbabaa

    aaa

    bbaba

    '
  - 'abbbaaa

    abaaaba

    aaa

    bbabb

    '
  - 'abbaaba

    abaabaa

    aaa

    bbaba

    '
  - 'abbaab_

    abaabab

    aaa

    bbabb

    '
  - 'abbaaba

    abbabaa

    aaa

    bbaba

    '
  - 'abbbaba

    abbaab`

    aaa

    bbaba

    '
  - 'abbaaaa

    aabaab`

    aaa

    bbabc

    '
  - 'abbaaba

    abaabab

    aaa

    bbabb

    '
  - 'abbaaaa

    babaaba

    aaa

    bbabc

    '
  - 'abbaaaa

    abaabaa

    aaa

    bbabc

    '
  - 'abbaaaa

    abaaaba

    aaa

    bbaba

    '
  - 'abbabaa

    abaaaba

    aaa

    bbaba

    '
  - 'abbaaba

    abababa

    aaa

    bbaba

    '
  - 'abbabaa

    abbaaba

    aaa

    bbaba

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbabc

    '
  - 'abbbaaa

    aabaaba

    aaa

    bbabb

    '
  - 'abbaaaa

    aabaaba

    aaa

    bbabc

    '
  - 'abbaaba

    babaaba

    aaa

    bbabb

    '
timeout: 2.0
