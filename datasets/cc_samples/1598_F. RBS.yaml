prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou are given\
  \ an array a_1, a_2, ..., a_n where all a_i are integers and greater than 0.\n\n\
  In one operation, you can choose two different indices i and j (1 \u2264 i, j \u2264\
  \ n). If gcd(a_i, a_j) is equal to the minimum element of the whole array a, you\
  \ can swap a_i and a_j. gcd(x, y) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor)\
  \ of integers x and y.\n\nNow you'd like to make a non-decreasing using the operation\
  \ any number of times (possibly zero). Determine if you can do this.\n\nAn array\
  \ a is non-decreasing if and only if a_1 \u2264 a_2 \u2264 \u2026 \u2264 a_n.\n\n\
  Input\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the\
  \ number of test cases.\n\nThe first line of each test case contains one integer\
  \ n (1 \u2264 n \u2264 10^5) \u2014 the length of array a.\n\nThe second line of\
  \ each test case contains n positive integers a_1, a_2, \u2026 a_n (1 \u2264 a_i\
  \ \u2264 10^9) \u2014 the array itself.\n\nIt is guaranteed that the sum of n over\
  \ all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, output \"\
  YES\" if it is possible to make the array a non-decreasing using the described operation,\
  \ or \"NO\" if it is impossible to do so.\n\nExample\n\nInput\n\n\n4\n1\n8\n6\n\
  4 3 6 6 2 9\n4\n4 5 6 7\n5\n7 5 2 2 4\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\n\nNote\n\
  \nIn the first and third sample, the array is already non-decreasing.\n\nIn the\
  \ second sample, we can swap a_1 and a_3 first, and swap a_1 and a_5 second to make\
  \ the array non-decreasing.\n\nIn the forth sample, we cannot the array non-decreasing\
  \ using the operation.\nA: ```for i in range(int(input())):\n    n=int(input())\n\
  \    a = [int(x ) for x in input().split()]\n    b= a[::-1]\n\n    b.sort()\n  \
  \  z=min(a)\n    p=True\n    for j in range(n):\n        if a[j]!=b[j] :\n     \
  \       if a[j]%z>0:\n                p=False\n                break\n    if p :\n\
  \        print(\"YES\")\n    else:print(\"NO\")```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nNuske has a grid with N rows and M columns of\
  \ squares. The rows are numbered 1 through N from top to bottom, and the columns\
  \ are numbered 1 through M from left to right. Each square in the grid is painted\
  \ in either blue or white. If S_{i,j} is 1, the square at the i-th row and j-th\
  \ column is blue; if S_{i,j} is 0, the square is white. For every pair of two blue\
  \ square a and b, there is at most one path that starts from a, repeatedly proceeds\
  \ to an adjacent (side by side) blue square and finally reaches b, without traversing\
  \ the same square more than once.\n\nPhantom Thnook, Nuske's eternal rival, gives\
  \ Q queries to Nuske. The i-th query consists of four integers x_{i,1}, y_{i,1},\
  \ x_{i,2} and y_{i,2} and asks him the following: when the rectangular region of\
  \ the grid bounded by (and including) the x_{i,1}-th row, x_{i,2}-th row, y_{i,1}-th\
  \ column and y_{i,2}-th column is cut out, how many connected components consisting\
  \ of blue squares there are in the region?\n\nProcess all the queries.\n\nConstraints\n\
  \n* 1 \u2264 N,M \u2264 2000\n* 1 \u2264 Q \u2264 200000\n* S_{i,j} is either 0\
  \ or 1.\n* S_{i,j} satisfies the condition explained in the statement.\n* 1 \u2264\
  \ x_{i,1} \u2264 x_{i,2} \u2264 N(1 \u2264 i \u2264 Q)\n* 1 \u2264 y_{i,1} \u2264\
  \ y_{i,2} \u2264 M(1 \u2264 i \u2264 Q)\n\nInput\n\nThe input is given from Standard\
  \ Input in the following format:\n\n\nN M Q\nS_{1,1}..S_{1,M}\n:\nS_{N,1}..S_{N,M}\n\
  x_{1,1} y_{i,1} x_{i,2} y_{i,2}\n:\nx_{Q,1} y_{Q,1} x_{Q,2} y_{Q,2}\n\n\nOutput\n\
  \nFor each query, print the number of the connected components consisting of blue\
  \ squares in the region.\n\nExamples\n\nInput\n\n3 4 4\n1101\n0110\n1101\n1 1 3\
  \ 4\n1 1 3 1\n2 2 3 4\n1 2 2 4\n\n\nOutput\n\n3\n2\n2\n2\n\n\nInput\n\n5 5 6\n11010\n\
  01110\n10101\n11101\n01010\n1 1 5 5\n1 2 4 5\n2 3 3 4\n3 3 3 3\n3 1 3 5\n1 1 3 4\n\
  \n\nOutput\n\n3\n2\n1\n1\n3\n2\nA: ```def main():\n    import sys\n    input = sys.stdin.readline\n\
  \    H, W, Q = map(int, input().split())\n    S = [list(map(lambda x: x==\"1\",\
  \ input())) for _ in range(H)]\n    #XYXY = zip(*[iter(map(int, sys.stdin.read().split()))]*4)\n\
  \n    M, L, R, U, D = [], [], [], [], []\n    for x, s in enumerate(S):\n      \
  \  M_, L_, R_, U_, D_ = [], [], [], [], []\n        for y, c in enumerate(s):\n\
  \            m = l = r = u = d = 0\n            if c:\n                if x >= 1:\n\
  \                    m += S[x-1][y]\n                    u -= S[x-1][y]\n      \
  \          if x < H-1:\n                    m += S[x+1][y]\n                   \
  \ d -= S[x+1][y]\n                if y >= 1:\n                    m += s[y-1]\n\
  \                    l -= s[y-1]\n                if y < W-1:\n                \
  \    m += s[y+1]\n                    r -= s[y+1]\n                m = 2 - m\n \
  \               # l = m - l\n                # r = m - r\n                # u =\
  \ m - u\n                # d = m - d\n            M_.append(m)\n            L_.append(l)\n\
  \            R_.append(r)\n            U_.append(u)\n            D_.append(d)\n\
  \        M.append(M_)\n        L.append(L_)\n        R.append(R_)\n        U.append(U_)\n\
  \        D.append(D_)\n    M.append([0]*(W+1))\n    L.append([0]*(W+1))\n    R.append([0]*(W+1))\n\
  \    U.append([0]*(W+1))\n    D.append([0]*(W+1))\n\n    #for m in M:\n    #   \
  \ print(m)\n    for x in range(H):\n        m = 0\n        for y in range(W):\n\
  \            m += M[x][y]\n            M[x][y] = m + M[x-1][y]\n            L[x][y]\
  \ += L[x-1][y]\n            R[x][y] += R[x-1][y]\n            U[x][y] += U[x][y-1]\n\
  \            D[x][y] += D[x][y-1]\n\n    Ans = []\n    #for x1, y1, x2, y2 in XYXY:\n\
  \    for _ in range(Q):\n        x1, y1, x2, y2 = map(int, input().split())\n  \
  \      ans = 0\n        ans += M[x2-1][y2-1] + M[x1-2][y1-2] - M[x2-1][y1-2] - M[x1-2][y2-1]\n\
  \        ans -= L[x2-1][y1-1] - L[x1-2][y1-1]\n        ans -= R[x2-1][y2-1] - R[x1-2][y2-1]\n\
  \        ans -= U[x1-1][y2-1] - U[x1-1][y1-2]\n        ans -= D[x2-1][y2-1] - D[x2-1][y1-2]\n\
  \        assert ans % 2 == 0, ans\n        #Ans.append(ans//2)\n        print(ans//2)\n\
  \    #print(\"\\n\".join(map(str, Ans)))\n\nmain()```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nA bracket sequence is a string containing only\
  \ characters \"(\" and \")\". A regular bracket sequence (or, shortly, an RBS) is\
  \ a bracket sequence that can be transformed into a correct arithmetic expression\
  \ by inserting characters \"1\" and \"+\" between the original characters of the\
  \ sequence. For example:\n\n  * bracket sequences \"()()\" and \"(())\" are regular\
  \ (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"); \n  * bracket\
  \ sequences \")(\", \"(\" and \")\" are not. \n\n\n\nLet's denote the concatenation\
  \ of two strings x and y as x+y. For example, \"()()\" + \")(\" = \"()())(\".\n\n\
  You are given n bracket sequences s_1, s_2, ..., s_n. You can rearrange them in\
  \ any order (you can rearrange only the strings themselves, but not the characters\
  \ in them).\n\nYour task is to rearrange the strings in such a way that the string\
  \ s_1 + s_2 + ... + s_n has as many non-empty prefixes that are RBS as possible.\n\
  \nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 20).\n\n\
  Then n lines follow, the i-th of them contains s_i \u2014 a bracket sequence (a\
  \ string consisting of characters \"(\" and/or \")\". All sequences s_i are non-empty,\
  \ their total length does not exceed 4 \u22C5 10^5.\n\nOutput\n\nPrint one integer\
  \ \u2014 the maximum number of non-empty prefixes that are RBS for the string s_1\
  \ + s_2 + ... + s_n, if the strings s_1, s_2, ..., s_n can be rearranged arbitrarily.\n\
  \nExamples\n\nInput\n\n\n2\n(\n)\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4\n()()())\n\
  (\n(\n)\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n1\n(())\n\n\nOutput\n\n\n1\n\n\nInput\n\
  \n\n1\n)(()\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, you can concatenate\
  \ the strings as follows: \"(\" + \")\" = \"()\", the resulting string will have\
  \ one prefix, that is an RBS: \"()\".\n\nIn the second example, you can concatenate\
  \ the strings as follows: \"(\" + \")\" + \"()()())\" + \"(\" = \"()()()())(\",\
  \ the resulting string will have four prefixes that are RBS: \"()\", \"()()\", \"\
  ()()()\", \"()()()()\".\n\nThe third and the fourth examples contain only one string\
  \ each, so the order is fixed.\nA:"
question: "A bracket sequence is a string containing only characters \"(\" and \"\
  )\". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that\
  \ can be transformed into a correct arithmetic expression by inserting characters\
  \ \"1\" and \"+\" between the original characters of the sequence. For example:\n\
  \n  * bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions\
  \ are: \"(1)+(1)\" and \"((1+1)+1)\"); \n  * bracket sequences \")(\", \"(\" and\
  \ \")\" are not. \n\n\n\nLet's denote the concatenation of two strings x and y as\
  \ x+y. For example, \"()()\" + \")(\" = \"()())(\".\n\nYou are given n bracket sequences\
  \ s_1, s_2, ..., s_n. You can rearrange them in any order (you can rearrange only\
  \ the strings themselves, but not the characters in them).\n\nYour task is to rearrange\
  \ the strings in such a way that the string s_1 + s_2 + ... + s_n has as many non-empty\
  \ prefixes that are RBS as possible.\n\nInput\n\nThe first line contains a single\
  \ integer n (1 \u2264 n \u2264 20).\n\nThen n lines follow, the i-th of them contains\
  \ s_i \u2014 a bracket sequence (a string consisting of characters \"(\" and/or\
  \ \")\". All sequences s_i are non-empty, their total length does not exceed 4 \u22C5\
  \ 10^5.\n\nOutput\n\nPrint one integer \u2014 the maximum number of non-empty prefixes\
  \ that are RBS for the string s_1 + s_2 + ... + s_n, if the strings s_1, s_2, ...,\
  \ s_n can be rearranged arbitrarily.\n\nExamples\n\nInput\n\n\n2\n(\n)\n\n\nOutput\n\
  \n\n1\n\n\nInput\n\n\n4\n()()())\n(\n(\n)\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n1\n\
  (())\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n1\n)(()\n\n\nOutput\n\n\n0\n\nNote\n\nIn\
  \ the first example, you can concatenate the strings as follows: \"(\" + \")\" =\
  \ \"()\", the resulting string will have one prefix, that is an RBS: \"()\".\n\n\
  In the second example, you can concatenate the strings as follows: \"(\" + \")\"\
  \ + \"()()())\" + \"(\" = \"()()()())(\", the resulting string will have four prefixes\
  \ that are RBS: \"()\", \"()()\", \"()()()\", \"()()()()\".\n\nThe third and the\
  \ fourth examples contain only one string each, so the order is fixed."
samples:
- " ```for _ in range(int(input())):\n    s = [input() for _ in range(int(input()))]\n\
  \    s.sort(key=lambda x: x.count('(') - x.count(')'))\n    ans = 0\n    for i in\
  \ range(len(s)):\n        if s[i].count('(') <= i:\n            ans += 1\n    print(ans)```\n\
  Q:"
- " ```n=int(input())\ns = [input() for _ in range(n)]\nans = 0\nfor i in range(n):\n\
  \    for j in range(i+1, n):\n        a = s[i] + s[j]\n        b = s[j] + s[i]\n\
  \        c = s[i][0]\n        d = s[j][0]\n        if c==')' and d=='(':\n     \
  \       a=a[1:]+')'+a[0]\n            b=b[1:]+')'+b[0]\n        if c=='(' and d==')':\n\
  \            a=a[0]+'('+a[1:]\n            b=b[0]+'('+b[1:]\n        if a.count('(')>a.count(')'):\n\
  \            s[i], s[j] = s[j], s[i]\n        if a.count(')')>a.count('('):\n  \
  \          s[i], s[j] = s[j], s[i]\nprint(len(s[0]))\nfor i in range(n):\n    print(s[i],\
  \ end=' ')\nprint()``` A: ```for i in range(int(input())):\n    n=int(input())\n\
  \    a = [input() for _ in range(n)]\n    a.sort()\n    ans = 0\n    for i in range(n):\n\
  \        if a[i].count('(') > a[i].count(')'):\n            a[i] = a[i][1:] + ')'\
  \ + a[i][0]\n        if a[i].count(')') > a[i].count('('):\n            a[i] = a[i][0]\
  \ + '(' + a[i][1:]\n    print(len(''.join(a)))\n    print(*a, sep=' ')\n``` A: ```n=int(input())\n\
  s = [input() for _ in range(n)]\ns.sort()\nans = 0\nfor i in range(n):\n    if s[i][0]\
  \ == '(':\n        s[i] = ')' + s[i][1:]\n    else:\n        s[i] = s[i][0] + '('\n\
  print(len(''.join(s)))\nprint(*s, sep=' ')``` A: ```n=int(input())\ns = [input()\
  \ for _ in range(n)]\ns.sort(key=lambda x: (x.count('('), x.count(')')))\nans =\
  \ 0\nfor i in range(n):\n    if s[i][0] == '(':\n        s[i] = ')' + s[i][1:]\n\
  \    else:\n        s[i] = s[i][0] + '('\nprint(len(''.join(s)))\nprint(*s, sep='\
  \ ')``` A: ```n=int(input())\ns = [input() for _ in range(n)]\ns.sort(key=lambda\
  \ x: (x.count('('), x.count(')')))\nans = 0\nfor i in range(n):\n    if s[i].count('(')\
  \ > s[i].count(')'):\n        s[i] = s[i][1:] + ')' + s[i][0]\n    if s[i].count(')')\
  \ > s[i].count('('):\n        s[i] = s[i][0] + '(' + s[i][1:]\nprint(len(''.join(s)))\n\
  print(*s, sep=' ')``` A: ```n=int(input())\ns = [input() for _ in range(n)]\ns.sort(key=lambda\
  \ x: (x.count('('), x.count(')')))\nans = 0\nfor i in range(n):\n    s[i] = '('\
  \ + s[i][1:-1] + ')'\nprint(len(''.join(s)))\nprint(*s, sep=' ')``` A: ```n=int(input())\n\
  s = [input() for _ in range(n)]\ns.sort(key=lambda x: (x.count('('), x.count(')')))\n\
  ans = 0\nfor i in range(n):\n    if s[i].count('(') > s[i].count(')'):\n       \
  \ s[i] = s[i][1:] + ')' + s[i][0]\n    if s[i].count(')') > s[i].count('('):\n \
  \       s[i] = s[i][0] + '(' + s[i][1:]\nprint(len(''.join(s)))\nprint(*s, sep='\
  \ ')``` A: ```n=int(input())\ns = [input() for _ in range(n)]\ns.sort(key=lambda\
  \ x: (x.count('('), x.count(')')))\nans = 0\nfor i in range(n):\n    s[i] = '('\
  \ + s[i][1:-1] + ')'\nprint(len(''.join(s)))\nprint(*s, sep=' ')``` A: ```n=int(input())\n\
  s = [input() for _ in range(n)]\ns.sort(key=lambda x: (x.count('('), x.count(')')))\n\
  ans = 0\nfor i in range(n):\n    if s[i][0] == '(':\n        s[i] = ')' + s[i][1:]\n\
  \    else:\n        s[i] = s[i][0] + '('\n"
test_cases:
  input:
  - '1

    (())

    '
  - '1

    )(()

    '
  - '4

    ()()())

    (

    (

    )

    '
  - '2

    (

    )

    '
  - '1

    )(((((()((())(((((((

    '
  - '1

    )()())((()))((()((()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    (((((((((((((((((((((())))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()

    '
  - '20

    )

    (

    )

    )

    )

    )

    )

    (

    (

    )

    )

    )

    )

    (

    )

    )

    )

    )

    (

    )

    '
  - '6

    ()()()()()

    ()()()()

    ()

    ((((()))))

    ((()))

    ()()

    '
  - '1

    ((((((((((((((((((((

    '
  - '10

    ((((((((((((((((((((((((()))))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()

    ((((((((((((((((((()))))))))))))))))))

    ((((((((((((((((((((((()))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ((((((((((((((()))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()

    '
  - '2

    ))())))((()

    ()((((((()))))))(()

    '
  - '20

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    '
  - '20

    (

    (

    )

    (

    (

    )

    (

    (

    (

    (

    (

    (

    )

    )

    (

    (

    (

    (

    (

    )

    '
  - '10

    ()()

    (())

    ()()

    ()()

    (())

    (((())))

    ()

    (())

    ()()

    ()

    '
  - '1

    ))))))))))))))))))))

    '
  - '6

    (((())))

    (((())))

    ()()()

    (())

    ()()()()()

    ()()

    '
  - '10

    )

    )

    ))

    ))

    ))

    ))

    ))

    ))

    )))

    )))

    '
  - '10

    )()

    ()

    )

    )

    )

    )(

    )))

    )(

    (((

    ))

    '
  - '20

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    '
  - '10

    ))

    ()(

    (

    ()

    ()

    ((((

    (

    (

    (((

    (

    '
  - '10

    ()

    ()()()()

    (())

    ((()))

    (())

    ()()

    (())

    ()()

    ()

    ()

    '
  - '10

    ())

    ()

    )

    )))

    ))

    ()

    )

    ))

    )))

    )

    '
  - '1

    ))))))()))())(()))))

    '
  - '10

    ((

    (((

    (

    (((

    ((((

    ((

    (

    (

    (

    ((

    '
  - '20

    )

    (

    (

    )

    )

    (

    )

    (

    (

    (

    )

    )

    )

    )

    (

    )

    (

    (

    )

    (

    '
  - '1

    ((((((()()())(((((((

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    (((((((((((((((((((((())))))))))))))))))))))

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()

    '
  - '20

    (

    (

    )

    )

    )

    )

    )

    (

    (

    )

    )

    )

    )

    (

    )

    )

    )

    )

    (

    )

    '
  - '10

    ((((((((((((((((((((((((()))))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()

    (((((()(((((((((((()))))))))))))))))))

    ((((((((((((((((((((((()))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ((((((((((((((()))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()

    '
  - '2

    ))))))(((()

    ()((((((()))))))(()

    '
  - '6

    (()())))

    (((())))

    ()()()

    (())

    ()()()()()

    ()()

    '
  - '20

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    (

    )

    (

    (

    (

    (

    (

    (

    (

    (

    '
  - '10

    ))

    ()(

    (

    ()

    ()

    ((()

    (

    (

    (((

    (

    '
  - '10

    ()

    ()()()()

    (())

    ((()))

    (())

    ()()

    (())

    ()()

    ()

    ((

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))))))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()

    '
  - '20

    (

    (

    )

    )

    )

    )

    )

    (

    (

    (

    )

    )

    )

    (

    )

    )

    )

    )

    (

    )

    '
  - '10

    ))

    ()(

    (

    ()

    ()

    )(()

    (

    (

    (((

    (

    '
  - '10

    ()

    ((()()()

    (())

    ((()))

    (())

    ()()

    (())

    ()()

    ()

    ((

    '
  - '20

    (

    (

    )

    )

    )

    )

    )

    (

    (

    (

    )

    )

    )

    (

    )

    )

    )

    )

    (

    (

    '
  - '10

    ()

    ((()()()

    (())

    ((()))

    )()(

    ()()

    (())

    ()()

    ()

    ((

    '
  - '10

    ()

    ((()))()

    (())

    ((()))

    )()(

    ()()

    (())

    ()()

    ()

    ((

    '
  - '10

    ((((((((((((((((((((((((()))))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()

    ((((((((((((((((((()))))))))))))))))))

    )))))))))))))))))))))))(((((((((((((((((((((((

    ()()()()()()()()()()()()()()()()()()()

    ((((((((((((((()))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()

    '
  - '20

    (

    (

    (

    (

    (

    )

    (

    (

    (

    (

    (

    )

    (

    (

    (

    (

    (

    (

    (

    (

    '
  - '10

    ()

    ()()()()

    (())

    ((()))

    ()))

    ()()

    (())

    ()()

    ()

    ()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    (((((((((((((((((((((())))))))))))))))))))))

    ()()()()()()()()))()()()()()()()()((()()

    ))()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()

    '
  - '6

    (()())))

    ))))((((

    ()()()

    (())

    ()()()()()

    ()()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))))))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()((()()()()()()()()()()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))()))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()((()()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    (((((((((((((((((((((())))))))))))))))))))))

    ()()))()()()()()))()()()()()()()()((()()

    ))()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()

    '
  - '10

    (((()((((((((((((())))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))))))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ))()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()((()()()()()()()()()()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    )))))))))))))*))()))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()))()()()()((()()

    '
  - '10

    (((()((((((((((((())))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))))))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    )()()()()()()()()()()()()()()()()()()()()()()()()()(

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ))()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()((()()()()()()()()()()

    '
  - '10

    (((((((((((()(((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    )))))))))))))*))()))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()))()()()()((()()

    '
  - '10

    (((()((((((((((((())))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))))))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    )()()()()()()()()()()()()()()()()()()()()()()()()()(

    (((((((((((((((((())))))))))))))))))

    )()()()()()()()()()()()()()()()()()()(

    ))()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()((()()()()()()()()()()

    '
  - '1

    )((()((()))((())()()

    '
  - '1

    )))*))))))))))))))))

    '
  - '10

    )()

    ()

    )

    )

    (

    )(

    )))

    )(

    (((

    ))

    '
  - '1

    ))))))()))()*(()))))

    '
  - '1

    ((()

    '
  - '4

    ))()()(

    (

    (

    )

    '
  - '2

    (

    (

    '
  - '1

    (((''((()()())(((((((

    '
  - '1

    )()())((())(((()((()

    '
  - '2

    )))())((())

    ()((((((()))))))(()

    '
  - '1

    ())*))))))))))))))))

    '
  - '10

    ))(

    ()

    )

    )

    (

    )(

    )))

    )(

    (((

    ))

    '
  - '1

    )))))*()))()*(()))))

    '
  - '1

    (((*

    '
  - '1

    ((((((())()()(((''(((

    '
  - '1

    )((()(((())((())()()

    '
  - '10

    ((((((((((((((((()))))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))()))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()()()()()()

    '
  - '2

    )))())((())

    )(()))))))((((((()(

    '
  - '1

    ())*))()))))))))))))

    '
  - '10

    ))(

    ))

    )

    )

    (

    )(

    )))

    )(

    (((

    ))

    '
  - '1

    )))))((*)()))(*)))))

    '
  - '1

    ((((((())))()(((''(((

    '
  - '1

    )((()(((()))(())()()

    '
  - '2

    )))())((())

    )(()))))))((((((()''

    '
  - '1

    ())*()()))))))))))))

    '
  - '10

    ))(

    ))

    )

    )

    (

    )(

    )))

    ()

    (((

    ))

    '
  - '1

    ())))((*)()))(*)))))

    '
  - '1

    ((((((()())()(((''()(

    '
  - '1

    )((()((())))((()()()

    '
  - '2

    )))())''(())

    )(()))))))((((((()''

    '
  - '1

    ())*(*()))))))))))))

    '
  - '1

    (((((((*())()(((''()(

    '
  - '1

    )()()((())))((()((()

    '
  - '2

    )))())''(())

    )(()))))))(((''((()(

    '
  - '1

    ())(**()))))))))))))

    '
  - '1

    (((((()*(()()(((''()(

    '
  - '1

    )()()()())))((()((()

    '
  - '1

    )))))))))))))(**())(

    '
  - '1

    )()()()()())((()((()

    '
  - '1

    ))))))))))))*(**())(

    '
  - '1

    )()()()()())(('')((()

    '
  - '1

    ))))))))))))+(**())(

    '
  - '1

    )()()()((())()'')((()

    '
  - '1

    ))))))))))))+(**(()(

    '
  - '1

    )()((()((())()'')((()

    '
  - '1

    )))))))*))))+(**(()(

    '
  - '1

    )()((()(((()))'')((()

    '
  - '1

    )))))*)*))))+(**(()(

    '
  - '1

    )()((()(''(()))'')((()

    '
  - '1

    )()((()(''((*))'')((()

    '
  - '1

    )((()''))*((''()((()()

    '
  - '1

    )((()''))*((''))((()()

    '
  - '1

    )*(()''))(((''))((()()

    '
  - '1

    )*(()''))(()''()((()()

    '
  - '1

    )*())''))(()''()((()((

    '
  - '1

    )*())''))((*''()((()((

    '
  - '1

    )*())''))((*&()((()((

    '
  - '1

    )*())''))((*&((((()((

    '
  - '1

    )*())''))((+&((((()((

    '
  - '1

    )*())''))((+&((((()''(

    '
  - '1

    )*()(''))((+&(((())''(

    '
  - '1

    )*()(''))((+&((()))''(

    '
  - '1

    )*()(''))((+&(('')))''(

    '
  - '1

    )(((((()(((()(((((((

    '
  - '1

    )()())((()))((((((()

    '
  - '6

    ()()()()()

    ()()()()

    ()

    ((((()))))

    (((())

    ()()

    '
  - '1

    ((((((((()((((((((((

    '
  - '2

    ))())))((()

    ))((((((()))))))(()

    '
  - '20

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    )

    (

    )

    )

    )

    )

    )

    )

    '
  - '10

    ()()

    (())

    ()()

    ()()

    (())

    (((())))

    ()

    (())

    ()()

    ))

    '
  - '1

    ))))))))))))))))*)))

    '
  - '6

    (((())))

    (((())))

    ()()()

    (())

    ()))()()()

    ()()

    '
  - '10

    )

    )

    ))

    ))

    ))

    ))

    ))

    ))

    )))

    )()

    '
  - '10

    )()

    )(

    )

    )

    )

    )(

    )))

    )(

    (((

    ))

    '
  - '10

    ))

    ()(

    (

    ()

    ()

    ((((

    (

    )

    (((

    (

    '
  - '10

    ())

    ()

    )

    )))

    ))

    ()

    )

    ))

    )))

    (

    '
  - '1

    )))))(())()))())))))

    '
  - '10

    ((

    (((

    (

    (((

    ((((

    ((

    (

    (

    (

    )(

    '
  - '1

    ))()

    '
  - '2

    )

    )

    '
  - '1

    (((((())()())(((((((

    '
  - '1

    ))(()((()))((())((()

    '
  - '10

    ((((((((((((((((((((((((()))))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    (((((((((((((()((()))))())))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()

    (((((()(((((((((((()))))))))))))))))))

    ((((((((((((((((((((((()))))))))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ((((((((((((((()))))))))))))))

    ()()()()()()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()

    '
  - '2

    )(((())))))

    ()((((((()))))))(()

    '
  - '1

    ))))))))))))))))*))*

    '
  - '10

    )()

    ()

    )

    )

    (

    ()

    )))

    )(

    (((

    ))

    '
  - '20

    (

    (

    (

    (

    (

    (

    )

    (

    (

    (

    (

    )

    (

    (

    (

    (

    (

    (

    (

    (

    '
  - '10

    ))

    ()(

    (

    ()

    ()

    )(((

    (

    (

    (((

    (

    '
  - '1

    )))))((*)()))())))))

    '
  - '4

    ))()()(

    (

    )

    )

    '
  - '1

    (((''((()()())(((((()

    '
  - '1

    )()()*((())(((()((()

    '
  - '20

    (

    (

    )

    (

    )

    )

    )

    (

    (

    (

    )

    )

    )

    (

    )

    )

    )

    )

    (

    )

    '
  - '2

    ))((())()))

    ()((((((()))))))(()

    '
  - '1

    ))))))))))))))))*))(

    '
  - '10

    ))(

    ()

    )

    (

    (

    )(

    )))

    )(

    (((

    ))

    '
  - '10

    ))

    ()(

    (

    ()

    ))

    )(()

    (

    (

    (((

    (

    '
  - '10

    ()

    ((()()()

    ()))

    ((()))

    (())

    ()()

    (())

    ()()

    ()

    ((

    '
  - '1

    )))))((*)))))(*))())

    '
  - '1

    )(((

    '
  - '1

    ()((((())()()(((''(((

    '
  - '1

    )(''()(((())((())()()

    '
  - '20

    (

    )

    )

    )

    )

    )

    )

    (

    (

    (

    )

    )

    )

    (

    )

    )

    )

    )

    (

    (

    '
  - '1

    ())+))()))))))))))))

    '
  - '10

    ()

    ((()()()

    (())

    ((()))

    )()(

    ()()

    (())

    ()()

    ()

    )(

    '
  - '1

    ))))))(*)()))(*)))))

    '
  - '1

    ((((((())))()(((''()(

    '
  - '1

    )()())(()))(((()((()

    '
  - '2

    )))())((())

    )(())))())((((((()''

    '
  - '1

    ())*()()))))))()))))

    '
  - '10

    ()

    ((()))()

    (())

    ((()))

    ()()

    ()()

    (())

    ()()

    ()

    ((

    '
  - '1

    )))))*()))()*(())))(

    '
  - '1

    (((((''()())()(((''()(

    '
  - '1

    )((()((())))((()()))

    '
  - '2

    )))())''(())

    )(())))))(((((((()''

    '
  - '1

    ())*)*()))))))))()))

    '
  - '1

    (((((((*())()(((''(*(

    '
  - '1

    )((()((())))((()'')()

    '
  - '2

    ))*())''(())

    )(()))))))(((''((()(

    '
  - '1

    ()))**(())))))))))))

    '
  - '1

    )((()()())))((()((()

    '
  - '1

    ())()*(*))))))))))))

    '
  - '1

    )()'')()()())((()((()

    '
  - '1

    )))))))())))*)**())(

    '
  - '1

    )()()()())()(('')((()

    '
  - '1

    ))))))))))()+(**)))(

    '
  - '1

    )()()()''(())()'')((()

    '
  - '1

    ))))))))))))*(**(()(

    '
  - '1

    )((()'')())((()((()()

    '
  - '1

    )))))))*)+)))(**(()(

    '
  - '1

    )()((()((('')))'')((()

    '
  - '1

    )))))*)*))))+(**)()(

    '
  - '1

    )()((()(((()))'')(('')

    '
  - '1

    )((()''*)*((''()((()()

    '
  - '1

    )((()''))*((''()((()'')

    '
  - '1

    )((()''))*(('')*((()()

    '
  - '1

    )*((*''))(((''))((()()

    '
  - '1

    )((()''))(()''()*(()()

    '
  - '1

    )*())''))(()''((((()((

    '
  - '1

    )*())'')(((*&()((()((

    '
  - '1

    )*())''))(((&*(((()((

    '
  - '1

    )*()(&))((+&(((())''(

    '
  - '1

    )*()('')(((+&((()))''(

    '
  - '1

    )*()(''))((+&(('')))''''

    '
  - '1

    )(((((()()(()(((((((

    '
  - '1

    )()())()()))((((((()

    '
  - '1

    (((((((('')((((((((((

    '
  - '2

    ))())))((()

    ))((((()())))))((()

    '
  - '20

    )

    )

    )

    )

    )

    )

    )

    )

    )

    (

    )

    )

    )

    (

    )

    )

    )

    )

    )

    )

    '
  - '10

    ()()

    (())

    ()()

    ()()

    (())

    (((())))

    )(

    (())

    ()()

    ))

    '
  - '1

    )))*()))))))))))))))

    '
  - '6

    (((())))

    (((())))

    ()()))

    (())

    ()))()()()

    ()()

    '
  - '10

    )

    )

    ))

    ))

    ))

    ))

    ))

    ))

    )()

    )()

    '
  - '10

    ))

    ()(

    )

    ()

    ()

    ((((

    (

    )

    (((

    (

    '
  - '10

    ()

    ()()()()

    (())

    ((()))

    ()))

    ()))

    (())

    ()()

    ()

    ()

    '
  - '1

    ))))))())()))())))))

    '
  - '1

    ))'')

    '
  - '1

    (((((())))())(((((((

    '
  - '1

    ))(()((()))()())((()

    '
  - '2

    )(((()))))(

    ()((((((()))))))(()

    '
  - '6

    (()())))

    ))))((((

    ()()()

    (())

    ()()()()))

    ()()

    '
  - '10

    )()

    )(

    )

    )

    (

    ()

    )))

    )(

    (((

    ))

    '
  - '20

    (

    (

    (

    (

    (

    (

    )

    (

    (

    (

    (

    )

    (

    (

    (

    (

    (

    (

    )

    (

    '
  - '10

    ))

    ()(

    (

    ()

    ((

    )(((

    (

    (

    (((

    (

    '
  - '1

    )))))((*)())*())))))

    '
  - '1

    )(((((())()()(((''(((

    '
  - '1

    )((()(((())(((*)()()

    '
  - '10

    (((()((((((((((((())))))))))))))))

    (((((((((((((((())))))))))))))))

    ((((((((((((((((((((()))))))))))))))))))))

    ))))))))))))))))))))))((((((((((((((((((((((

    ()()()()()()()()))()()()()()()()()((()()

    ()()()()()()()()()()()()()()()()()()()()()()()()()()

    (((((((((((((((((())))))))))))))))))

    ()()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()()()()()()()

    ()()()()()()()()()()()()((()()()()()()()()()()

    '
  - '20

    (

    (

    )

    (

    )

    )

    )

    (

    (

    (

    )

    )

    )

    (

    )

    )

    )

    )

    (

    (

    '
  - '1

    )))))())))))))))*))(

    '
  - '10

    ))

    ()(

    (

    ()

    *)

    )(()

    (

    (

    (((

    (

    '
  output:
  - '1

    '
  - '0

    '
  - '4

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '111

    '
  - '5

    '
  - '14

    '
  - '0

    '
  - '105

    '
  - '3

    '
  - '0

    '
  - '5

    '
  - '14

    '
  - '0

    '
  - '13

    '
  - '0

    '
  - '5

    '
  - '0

    '
  - '4

    '
  - '15

    '
  - '3

    '
  - '0

    '
  - '0

    '
  - '10

    '
  - '0

    '
  - '99

    '
  - '6

    '
  - '105

    '
  - '3

    '
  - '13

    '
  - '1

    '
  - '4

    '
  - '14

    '
  - '98

    '
  - '7

    '
  - '5

    '
  - '10

    '
  - '8

    '
  - '9

    '
  - '11

    '
  - '104

    '
  - '2

    '
  - '15

    '
  - '73

    '
  - '12

    '
  - '89

    '
  - '97

    '
  - '67

    '
  - '88

    '
  - '82

    '
  - '62

    '
  - '81

    '
  - '43

    '
  - '0

    '
  - '0

    '
  - '6

    '
  - '0

    '
  - '0

    '
  - '4

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '3

    '
  - '1

    '
  - '6

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '98

    '
  - '0

    '
  - '1

    '
  - '5

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '5

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '13

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '13

    '
  - '0

    '
  - '9

    '
  - '0

    '
  - '5

    '
  - '5

    '
  - '4

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '105

    '
  - '4

    '
  - '0

    '
  - '6

    '
  - '2

    '
  - '5

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '8

    '
  - '3

    '
  - '0

    '
  - '6

    '
  - '5

    '
  - '10

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '7

    '
  - '1

    '
  - '9

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '13

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '1

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '2

    '
  - '12

    '
  - '0

    '
  - '7

    '
  - '0

    '
  - '6

    '
  - '13

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '4

    '
  - '10

    '
  - '6

    '
  - '3

    '
  - '4

    '
  - '0

    '
  - '0

    '
  - '0

    '
  - '89

    '
  - '9

    '
  - '0

    '
  - '5

    '
timeout: 3.0
