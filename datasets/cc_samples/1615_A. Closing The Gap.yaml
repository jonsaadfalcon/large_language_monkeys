prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nTakahashi lives\
  \ in another world. There are slimes (creatures) of 10000 colors in this world.\
  \ Let us call these colors Color 1, 2, ..., 10000.\n\nTakahashi has N slimes, and\
  \ they are standing in a row from left to right. The color of the i-th slime from\
  \ the left is a_i. If two slimes of the same color are adjacent, they will start\
  \ to combine themselves. Because Takahashi likes smaller slimes, he has decided\
  \ to change the colors of some of the slimes with his magic.\n\nTakahashi can change\
  \ the color of one slime to any of the 10000 colors by one spell. How many spells\
  \ are required so that no slimes will start to combine themselves?\n\nConstraints\n\
  \n* 2 \\leq N \\leq 100\n* 1 \\leq a_i \\leq N\n* All values in input are integers.\n\
  \nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\
  a_1 a_2 ... a_N\n\n\nOutput\n\nPrint the minimum number of spells required.\n\n\
  Examples\n\nInput\n\n5\n1 1 2 2 2\n\n\nOutput\n\n2\n\n\nInput\n\n3\n1 2 1\n\n\n\
  Output\n\n0\n\n\nInput\n\n5\n1 1 1 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n14\n1 2 2\
  \ 3 3 3 4 4 4 4 1 2 3 4\n\n\nOutput\n\n4\nA: ```n=int(input())\nli = list(map(int,input().split()))\n\
  a=0\nfor i in range(1,n):\n  if li[i] == li[i-1]:\n    li[i] = 0\n    a+=1\nprint(a)```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nA set of four prime numbers\
  \ arranged like (a, a + 2, a + 6, a + 8) is called a quadruplet prime number. Of\
  \ the four prime numbers that make up a quadruplet prime, the largest number is\
  \ called the size of the quadruplet prime. For example, the smallest prime quadruplet\
  \ is a set of (5, 7, 11, 13), which is 13 in size. The next largest prime quadruplet\
  \ is the set of (11, 13, 17, 19), which is 19 in size.\n\nCreate a program that\
  \ takes the integer n (13 \u2264 n \u2264 10,000,000) as input and outputs the maximum\
  \ size of the quadruplet prime numbers whose size is n or less.\n\n\n\nInput\n\n\
  A sequence of multiple datasets is given as input. The end of the input is indicated\
  \ by a single line of zeros. One integer n is given on one row for each dataset.\n\
  \nThe number of datasets does not exceed 2000.\n\nOutput\n\nOutputs the maximum\
  \ prime quadruplet size on one line for each input dataset.\n\nExample\n\nInput\n\
  \n13\n14\n15\n16\n17\n18\n19\n20\n10000\n0\n\n\nOutput\n\n13\n13\n13\n13\n13\n13\n\
  19\n19\n9439\nA: ```# AOJ 0222 Prime Quadruplet\n# Python3 2018.6.23 bal4u\n# From\
  \ Wekipedia (https://en.wikipedia.org/wiki/Prime_quadruplet)\n# All prime quadruplets\
  \ except {5, 7, 11, 13} are of the form\n# {30n + 11, 30n + 13, 30n + 17, 30n +\
  \ 19} for some integer n.\n\nMAX = 899\ndiff = (0,3,3,21,22,13,7,39,7,73, \\\n126,119,88,3,11,66,29,17,53,42,\
  \ \\\n101,214,104,298,252,133,255,141,76,91, \\\n168,81,45,56,203,301,43,66,291,223,\
  \ \\\n92,97,442,290,437,281,38,144,549,241, \\\n29,192,11,518,266,490,122,130,13,329,\
  \ \\\n85,209,71,241,290,18,301,52,120,34, \\\n50,805,276,217,182,53,209,155,77,468,\
  \ \\\n448,29,90,85,91,7,146,21,309,234, \\\n60,213,511,59,273,364,57,77,87,231,\
  \ \\\n452,168,154,346,273,588,11,91,322,335, \\\n140,221,87,442,297,95,321,498,146,182,\
  \ \\\n8,38,11,679,111,120,83,36,59,462, \\\n32,349,448,333,644,63,101,960,161,759,\
  \ \\\n255,354,270,52,200,133,112,297,298,27, \\\n74,577,25,182,280,584,756,266,287,277,\
  \ \\\n119,31,561,59,179,630,34,98,1,84, \\\n217,234,4,48,127,528,679,35,108,15,\
  \ \\\n752,60,31,228,559,7,35,56,43,10, \\\n151,374,297,294,14,60,196,133,18,63,\
  \ \\\n63,17,35,290,953,584,66,102,427,4, \\\n357,507,441,420,802,14,66,171,252,88,\
  \ \\\n14,364,32,220,66,256,427,651,52,287, \\\n987,214,161,319,241,1333,190,325,63,500,\
  \ \\\n1026,60,13,112,238,144,137,349,417,32, \\\n164,196,115,735,200,382,273,104,119,214,\
  \ \\\n665,235,297,665,25,34,211,280,542,375, \\\n188,42,134,573,350,106,17,112,676,1095,\
  \ \\\n403,62,193,60,13,116,60,255,609,350, \\\n7,165,661,25,748,176,10,283,144,987,\
  \ \\\n389,59,60,342,112,144,31,98,676,297, \\\n652,189,56,34,441,50,314,266,29,546,\
  \ \\\n297,39,657,46,703,70,270,221,122,767, \\\n13,134,318,1222,84,650,371,92,164,760,\
  \ \\\n318,175,158,679,496,389,273,38,676,270, \\\n902,228,143,196,18,287,102,409,612,1,\
  \ \\\n56,269,311,714,1092,176,34,165,143,438, \\\n266,249,97,442,105,7,913,81,80,871,\
  \ \\\n497,585,574,11,220,94,855,132,473,836, \\\n301,7,833,63,1145,60,1886,382,111,43,\
  \ \\\n111,319,431,108,297,60,878,799,133,472, \\\n529,420,241,46,231,304,616,1145,595,447,\
  \ \\\n589,76,399,865,154,101,119,739,528,673, \\\n49,994,412,1072,6,25,3,49,126,1079,\
  \ \\\n1141,66,220,932,1049,561,692,764,476,248, \\\n200,1897,658,644,24,399,143,1331,839,1,\
  \ \\\n1077,760,11,34,658,36,647,21,528,242, \\\n98,529,24,1117,192,396,930,224,365,66,\
  \ \\\n557,377,757,322,203,335,770,155,97,21, \\\n665,484,553,321,207,116,574,272,287,253,\
  \ \\\n637,259,38,263,62,1268,451,693,756,630, \\\n357,105,32,581,455,153,540,350,91,210,\
  \ \\\n409,270,377,442,490,615,424,52,890,199, \\\n102,1746,462,749,24,644,540,220,840,1656,\
  \ \\\n223,74,434,179,665,923,428,307,875,50, \\\n2387,276,109,363,529,550,139,798,176,150,\
  \ \\\n297,123,66,266,414,17,130,1344,300,1799, \\\n8,1176,279,351,461,396,112,626,498,931,\
  \ \\\n2782,123,1253,780,781,1119,46,39,847,468, \\\n1037,1144,63,332,294,1082,525,459,220,70,\
  \ \\\n231,31,1029,256,290,662,242,98,252,13, \\\n1008,64,346,1211,119,802,189,272,298,122,\
  \ \\\n697,319,195,273,410,1221,365,885,322,52, \\\n847,165,112,67,812,630,801,87,60,424,\
  \ \\\n630,867,231,123,308,396,76,119,60,203, \\\n17,63,553,931,147,588,127,437,164,43,\
  \ \\\n14,371,115,150,354,315,473,3,1221,245, \\\n36,272,214,24,385,249,182,445,171,35,\
  \ \\\n921,300,1558,1250,129,539,476,94,11,227, \\\n427,151,102,126,2176,71,297,60,413,195,\
  \ \\\n190,944,49,554,1102,676,279,78,143,364, \\\n357,462,1144,1050,218,423,623,364,416,239,\
  \ \\\n143,280,248,365,77,77,1529,157,361,514, \\\n536,31,330,87,193,514,935,227,18,91,\
  \ \\\n104,49,133,1149,104,518,396,1015,143,445, \\\n360,385,680,49,1053,669,647,931,140,231,\
  \ \\\n31,1075,483,627,101,1012,714,346,504,60, \\\n917,1140,1180,98,297,1029,225,1918,406,188,\
  \ \\\n368,466,1305,1117,1028,50,150,273,333,101, \\\n151,146,1100,119,1532,497,487,235,658,322,\
  \ \\\n538,210,701,574,136,220,168,105,603,332, \\\n409,84,81,39,860,309,384,259,266,207,\
  \ \\\n872,377,403,248,819,882,931,148,42,371, \\\n805,325,668,529,409,3151,2016,14,38,1487,\
  \ \\\n350,295,266,343,1833,1887,123,370,260,696, \\\n137,962,410,132,847,1051,426,39,214,546,\
  \ \\\n539,493,325,137,112,889,130,237,43,1183, \\\n118,371,1,580,316,434,2698,53,98,262,\
  \ \\\n203,119,31,189,813,119,195,294,1435,1345, \\\n531,624,210,231,321,553,11,756,1358)\n\
  \ndef bsch(x):\n\tl, r = 0, MAX\n\twhile l < r:\n\t\tm = (l + r) >> 1\n\t\tif tbl[m]\
  \ == x: return m\n\t\tif tbl[m] < x: l = m+1\n\t\telse: r = m\n\treturn l-1;\n\n\
  tbl = [0]*MAX\nfor i in range(1, MAX): tbl[i] = tbl[i-1] + diff[i]\nfor i in range(MAX):\
  \ tbl[i] = tbl[i]*30+19\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\t\
  if n < 19: print(\"13\")\n\telse: print(tbl[bsch(n)])```\nQ: Write python code to\
  \ solve the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nThere are n block towers in a row, where tower\
  \ i has a height of a_i. You're part of a building crew, and you want to make the\
  \ buildings look as nice as possible. In a single day, you can perform the following\
  \ operation:\n\n  * Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260\
  \ j), and move a block from tower i to tower j. This essentially decreases a_i by\
  \ 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the\
  \ height difference between the tallest and shortest buildings. Formally, the ugliness\
  \ is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can\
  \ achieve, after any number of days?\n\nInput\n\nThe first line contains one integer\
  \ t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\
  \nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100)\
  \ \u2014 the number of buildings.\n\nThe second line of each test case contains\
  \ n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014\
  \ the heights of the buildings.\n\nOutput\n\nFor each test case, output a single\
  \ integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\n\
  Input\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\n\
  Note\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test\
  \ case, you should do one operation, with i = 1 and j = 3. The new heights will\
  \ now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may\
  \ do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be\
  \ [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2,\
  \ 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2,\
  \ 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum\
  \ possible ugliness for this test.\nA:"
question: "There are n block towers in a row, where tower i has a height of a_i. You're\
  \ part of a building crew, and you want to make the buildings look as nice as possible.\
  \ In a single day, you can perform the following operation:\n\n  * Choose two indices\
  \ i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to\
  \ tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\n\
  You think the ugliness of the buildings is the height difference between the tallest\
  \ and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\
  \nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\
  \nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014\
  \ the number of test cases. Then t cases follow.\n\nThe first line of each test\
  \ case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\
  \nThe second line of each test case contains n space separated integers a_1, a_2,\
  \ \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\n\
  Output\n\nFor each test case, output a single integer \u2014 the minimum possible\
  \ ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n\
  5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness\
  \ is already 0.\n\nIn the second test case, you should do one operation, with i\
  \ = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\
  \nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j\
  \ = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The\
  \ new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array\
  \ will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven\
  \ that this is the minimum possible ugliness for this test."
samples:
- " ```# AOJ 0245 Building Ugliness\n# Python3 2018.6.23 bal4u\nt = int(input())\n\
  for _ in range(t):\n    n = int(input())\n    li = list(map(int,input().split()))\n\
  \    li.sort()\n    a = li[0]\n    b = li[-1]\n    print(b-a)```\nQ:"
- ' ```n = int(input())

  towers = list(map(int,input().split()))

  towers.sort()

  ugliness = max(towers) - min(towers)

  print(ugliness)```

  Q:'
test_cases:
  input:
  - '3

    3

    10 10 10

    4

    3 2 1 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 10 10

    4

    3 2 0 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 10 10

    4

    3 2 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    2 0 2 1 4

    '
  - '3

    3

    10 10 10

    4

    3 2 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    10 10 10

    4

    4 2 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    2 1 2 1 4

    '
  - '3

    3

    10 0 10

    4

    3 2 0 2

    5

    1 2 3 -1 5

    '
  - '3

    3

    10 10 10

    4

    3 2 0 2

    5

    1 4 3 1 5

    '
  - '3

    3

    10 10 10

    4

    6 2 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 10

    4

    4 2 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 10

    4

    4 0 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    1 0 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    1 0 2 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    2 0 2 1 4

    '
  - '3

    3

    10 10 10

    4

    3 3 1 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 0 10

    4

    3 2 0 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 5 10

    4

    3 2 0 2

    5

    1 4 3 1 5

    '
  - '3

    3

    10 5 10

    4

    6 2 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 10

    4

    2 0 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    1 0 2 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    2 0 2 1 1

    '
  - '3

    3

    10 10 10

    4

    0 3 1 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 0 10

    4

    3 2 0 2

    5

    1 2 3 0 5

    '
  - '3

    3

    10 20 10

    4

    3 2 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    10 5 10

    4

    3 2 0 2

    5

    1 3 3 1 5

    '
  - '3

    3

    10 5 10

    4

    6 1 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    17 9 10

    4

    4 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    2 0 2 1 1

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    2 1 3 1 4

    '
  - '3

    3

    10 10 10

    4

    0 3 2 2

    5

    1 2 3 1 5

    '
  - '3

    3

    9 20 10

    4

    3 2 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    10 5 10

    4

    3 3 0 2

    5

    1 3 3 1 5

    '
  - '3

    3

    10 5 10

    4

    6 1 2 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 1 2

    5

    1 1 3 1 4

    '
  - '3

    3

    17 9 10

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    2 1 3 1 5

    '
  - '3

    3

    10 10 10

    4

    0 3 2 2

    5

    1 4 3 1 5

    '
  - '3

    3

    10 0 10

    4

    3 2 1 2

    5

    1 2 3 -1 5

    '
  - '3

    3

    9 20 10

    4

    3 0 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    10 5 10

    4

    3 3 0 2

    5

    1 3 6 1 5

    '
  - '3

    3

    10 5 10

    4

    6 1 2 2

    5

    1 4 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 1 2

    5

    1 1 4 1 4

    '
  - '3

    3

    24 9 10

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 0 10

    4

    3 2 1 2

    5

    1 2 1 -1 5

    '
  - '3

    3

    9 20 10

    4

    3 0 1 2

    5

    0 3 3 1 4

    '
  - '3

    3

    10 5 10

    4

    3 3 0 2

    5

    0 3 6 1 5

    '
  - '3

    3

    10 5 13

    4

    6 1 2 2

    5

    1 4 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 1 4

    5

    1 1 4 1 4

    '
  - '3

    3

    24 9 18

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 0 10

    4

    3 3 1 2

    5

    1 2 1 -1 5

    '
  - '3

    3

    10 5 10

    4

    3 3 0 3

    5

    0 3 6 1 5

    '
  - '3

    3

    10 5 13

    4

    7 1 2 2

    5

    1 4 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 0 4

    5

    1 1 4 1 4

    '
  - '3

    3

    40 9 18

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 0 10

    4

    3 3 1 0

    5

    1 2 1 -1 5

    '
  - '3

    3

    16 5 10

    4

    3 3 0 3

    5

    0 3 6 1 5

    '
  - '3

    3

    10 5 13

    4

    7 1 2 3

    5

    1 4 3 1 4

    '
  - '3

    3

    11 10 9

    4

    2 0 0 4

    5

    1 1 4 1 4

    '
  - '3

    3

    40 9 18

    4

    3 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    16 5 5

    4

    3 3 0 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 10 9

    4

    2 0 0 4

    5

    1 1 4 1 1

    '
  - '3

    3

    16 5 4

    4

    3 3 0 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 2 9

    4

    2 0 0 4

    5

    1 1 4 1 1

    '
  - '3

    3

    16 5 4

    4

    3 3 1 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 2 9

    4

    2 0 0 6

    5

    1 1 4 1 1

    '
  - '3

    3

    16 7 4

    4

    3 3 1 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 2 9

    4

    1 0 0 6

    5

    1 1 4 1 1

    '
  - '3

    3

    9 7 4

    4

    3 3 1 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 1 9

    4

    1 0 0 6

    5

    1 1 4 1 1

    '
  - '3

    3

    9 7 4

    4

    3 3 1 6

    5

    0 3 6 1 5

    '
  - '3

    3

    9 7 4

    4

    3 3 1 11

    5

    0 3 6 1 5

    '
  - '3

    3

    3 7 4

    4

    3 3 1 11

    5

    0 3 6 1 5

    '
  - '3

    3

    3 7 4

    4

    3 3 1 11

    5

    0 3 10 1 5

    '
  - '3

    3

    3 7 4

    4

    6 3 1 11

    5

    0 3 10 1 5

    '
  - '3

    3

    3 7 4

    4

    6 3 1 6

    5

    0 3 10 1 5

    '
  - '3

    3

    3 7 4

    4

    6 3 1 6

    5

    0 3 2 1 5

    '
  - '3

    3

    10 10 10

    4

    3 2 1 2

    5

    1 2 5 1 5

    '
  - '3

    3

    10 10 10

    4

    3 2 1 2

    5

    1 2 4 1 4

    '
  - '3

    3

    10 16 10

    4

    3 2 0 2

    5

    1 4 3 1 5

    '
  - '3

    3

    10 10 10

    4

    6 2 1 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 12 10

    4

    4 2 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    1 0 4 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 2

    5

    2 0 0 1 4

    '
  - '3

    3

    10 1 10

    4

    3 2 0 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 13 10

    4

    3 2 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    10 5 10

    4

    6 2 1 0

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 10

    4

    4 2 1 4

    5

    0 2 3 1 4

    '
  - '3

    3

    10 10 10

    4

    2 0 2 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 1 4

    5

    2 0 2 1 1

    '
  - '3

    3

    10 9 10

    4

    4 1 1 2

    5

    2 1 2 0 4

    '
  - '3

    3

    10 10 10

    4

    0 0 1 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 0 10

    4

    3 2 0 2

    5

    1 3 3 0 5

    '
  - '3

    3

    10 20 10

    4

    3 2 1 2

    5

    0 2 3 1 0

    '
  - '3

    3

    7 5 10

    4

    6 1 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 1 1 2

    5

    1 2 3 1 4

    '
  - '3

    3

    17 9 8

    4

    4 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 0

    5

    2 0 2 1 1

    '
  - '3

    3

    10 9 20

    4

    4 1 1 2

    5

    2 1 3 1 4

    '
  - '3

    3

    10 10 10

    4

    1 3 2 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 0 10

    4

    3 2 0 2

    5

    1 2 3 -1 9

    '
  - '3

    3

    9 20 10

    4

    3 2 1 0

    5

    0 2 3 1 4

    '
  - '3

    3

    10 5 10

    4

    3 3 0 3

    5

    1 3 3 1 5

    '
  - '3

    3

    10 5 10

    4

    6 1 2 2

    5

    1 2 3 0 4

    '
  - '3

    3

    10 10 7

    4

    2 0 1 2

    5

    1 1 3 1 4

    '
  - '3

    3

    17 9 10

    4

    1 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 14 10

    4

    4 1 1 2

    5

    2 1 3 1 5

    '
  - '3

    3

    10 10 10

    4

    0 3 2 2

    5

    1 8 3 1 5

    '
  - '3

    3

    9 20 10

    4

    3 0 1 2

    5

    0 2 3 1 1

    '
  - '3

    3

    10 10 10

    4

    3 3 0 2

    5

    1 3 6 1 5

    '
  - '3

    3

    10 5 10

    4

    6 1 2 3

    5

    1 4 3 1 4

    '
  - '3

    3

    24 9 7

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 0 10

    4

    3 2 1 2

    5

    2 2 1 -1 5

    '
  - '3

    3

    9 20 10

    4

    3 -1 1 2

    5

    0 3 3 1 4

    '
  - '3

    3

    10 5 0

    4

    6 1 2 2

    5

    1 4 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 1 4

    5

    1 1 4 0 4

    '
  - '3

    3

    24 9 15

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 0 10

    4

    2 3 1 2

    5

    1 2 1 -1 5

    '
  - '3

    3

    10 8 10

    4

    3 3 0 3

    5

    0 3 6 1 5

    '
  - '3

    3

    10 5 13

    4

    7 1 2 2

    5

    0 4 3 1 4

    '
  - '3

    3

    10 10 9

    4

    2 0 0 4

    5

    1 2 4 1 4

    '
  - '3

    3

    36 9 18

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    16 5 10

    4

    3 3 0 1

    5

    0 3 6 1 5

    '
  - '3

    3

    10 5 13

    4

    7 1 2 3

    5

    0 4 3 1 4

    '
  - '3

    3

    11 10 9

    4

    2 0 0 1

    5

    1 1 4 1 4

    '
  - '3

    3

    41 9 18

    4

    3 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    16 6 5

    4

    3 3 0 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 10 13

    4

    2 0 0 4

    5

    1 1 4 1 1

    '
  - '3

    3

    16 5 4

    4

    3 3 0 5

    5

    0 3 6 1 5

    '
  - '3

    3

    11 2 9

    4

    2 0 0 4

    5

    1 1 4 0 1

    '
  - '3

    3

    11 2 9

    4

    4 0 0 6

    5

    1 1 4 1 1

    '
  - '3

    3

    16 7 4

    4

    6 3 1 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 1 10

    4

    1 0 0 6

    5

    1 1 4 1 1

    '
  - '3

    3

    9 7 7

    4

    3 3 1 6

    5

    0 3 6 1 5

    '
  - '3

    3

    9 7 4

    4

    3 3 1 13

    5

    0 3 6 1 5

    '
  - '3

    3

    3 7 4

    4

    3 3 0 11

    5

    0 3 6 1 5

    '
  - '3

    3

    3 6 4

    4

    6 3 1 11

    5

    0 3 10 1 5

    '
  - '3

    3

    3 7 4

    4

    6 3 1 9

    5

    0 3 10 1 5

    '
  - '3

    3

    4 7 4

    4

    6 3 1 6

    5

    0 3 2 1 5

    '
  - '3

    3

    10 10 10

    4

    3 4 1 2

    5

    1 2 5 1 5

    '
  - '3

    3

    3 10 10

    4

    3 2 1 2

    5

    1 2 4 1 4

    '
  - '3

    3

    10 16 10

    4

    1 2 0 2

    5

    1 4 3 1 5

    '
  - '3

    3

    10 10 10

    4

    6 2 2 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 12 10

    4

    4 2 1 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 9 10

    4

    4 0 1 4

    5

    1 0 4 1 4

    '
  - '3

    3

    10 9 10

    4

    0 0 1 2

    5

    2 0 0 1 4

    '
  - '3

    3

    10 1 10

    4

    3 4 0 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 13 0

    4

    3 2 1 2

    5

    0 2 3 1 4

    '
  - '3

    3

    15 10 10

    4

    2 0 2 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 9 10

    4

    4 0 0 4

    5

    2 0 2 1 1

    '
  - '3

    3

    10 10 10

    4

    0 0 1 2

    5

    1 2 3 2 5

    '
  - '3

    3

    13 0 10

    4

    3 2 0 2

    5

    1 3 3 0 5

    '
  - '3

    3

    10 20 10

    4

    3 0 1 2

    5

    0 2 3 1 0

    '
  - '3

    3

    7 5 10

    4

    6 1 1 2

    5

    1 2 3 1 1

    '
  - '3

    3

    10 10 9

    4

    2 1 1 2

    5

    1 2 3 2 4

    '
  - '3

    3

    17 9 8

    4

    4 0 1 3

    5

    1 0 5 1 4

    '
  - '3

    3

    10 9 10

    4

    4 1 1 0

    5

    4 0 2 1 1

    '
  - '3

    3

    10 17 20

    4

    4 1 1 2

    5

    2 1 3 1 4

    '
  - '3

    3

    10 10 10

    4

    1 2 2 2

    5

    1 2 3 1 5

    '
  - '3

    3

    13 0 10

    4

    3 2 0 2

    5

    1 2 3 -1 9

    '
  - '3

    3

    9 20 10

    4

    3 2 0 0

    5

    0 2 3 1 4

    '
  - '3

    3

    4 5 10

    4

    3 3 0 3

    5

    1 3 3 1 5

    '
  - '3

    3

    10 5 10

    4

    6 1 2 2

    5

    1 2 3 -1 4

    '
  - '3

    3

    9 10 7

    4

    2 0 1 2

    5

    1 1 3 1 4

    '
  - '3

    3

    10 14 10

    4

    4 1 1 2

    5

    2 1 3 1 10

    '
  - '3

    3

    13 10 10

    4

    0 3 2 2

    5

    1 8 3 1 5

    '
  - '3

    3

    9 31 10

    4

    3 0 1 2

    5

    0 2 3 1 1

    '
  - '3

    3

    10 5 10

    4

    6 1 1 3

    5

    1 4 3 1 4

    '
  - '3

    3

    15 9 7

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    10 0 10

    4

    3 0 1 2

    5

    2 2 1 -1 5

    '
  - '3

    3

    6 5 0

    4

    6 1 2 2

    5

    1 4 3 1 4

    '
  - '3

    3

    10 5 9

    4

    2 0 1 4

    5

    1 1 4 0 4

    '
  - '3

    3

    10 0 10

    4

    2 3 1 2

    5

    1 0 1 -1 5

    '
  - '3

    3

    10 8 10

    4

    3 3 0 3

    5

    1 3 6 1 5

    '
  - '3

    3

    10 10 15

    4

    2 0 0 4

    5

    1 2 4 1 4

    '
  - '3

    3

    11 9 18

    4

    2 0 1 3

    5

    1 0 3 1 4

    '
  - '3

    3

    16 5 10

    4

    3 3 0 1

    5

    0 3 2 1 5

    '
  - '3

    3

    10 5 16

    4

    7 1 2 3

    5

    0 4 3 1 4

    '
  - '3

    3

    16 6 5

    4

    3 3 -1 3

    5

    0 3 6 1 5

    '
  - '3

    3

    11 12 13

    4

    2 0 0 4

    5

    1 1 4 1 1

    '
  - '3

    3

    11 2 4

    4

    2 0 0 4

    5

    1 1 4 1 1

    '
  - '3

    3

    11 2 9

    4

    4 0 0 2

    5

    1 1 4 1 1

    '
  - '3

    3

    16 7 4

    4

    6 3 1 3

    5

    0 0 6 1 5

    '
  - '3

    3

    11 1 10

    4

    1 0 0 1

    5

    1 1 4 1 1

    '
  - '3

    3

    9 14 7

    4

    3 3 1 6

    5

    0 3 6 1 5

    '
  - '3

    3

    9 7 4

    4

    3 3 1 13

    5

    0 2 6 1 5

    '
  - '3

    3

    3 7 4

    4

    3 3 0 14

    5

    0 3 6 1 5

    '
  - '3

    3

    3 6 4

    4

    6 3 1 11

    5

    1 3 10 1 5

    '
  - '3

    3

    10 10 10

    4

    3 4 1 2

    5

    1 2 5 0 5

    '
  - '3

    3

    10 10 19

    4

    6 2 2 2

    5

    1 2 3 1 5

    '
  - '3

    3

    10 12 10

    4

    4 2 1 2

    5

    1 3 3 1 5

    '
  - '3

    3

    10 9 10

    4

    4 0 1 4

    5

    0 0 4 1 4

    '
  - '3

    3

    10 9 10

    4

    -1 0 1 2

    5

    2 0 0 1 4

    '
  - '3

    3

    10 1 10

    4

    3 4 0 2

    5

    1 2 3 0 5

    '
  - '3

    3

    10 13 0

    4

    3 2 1 1

    5

    0 2 3 1 4

    '
  - '3

    3

    9 10 10

    4

    2 0 2 2

    5

    1 2 3 1 4

    '
  - '3

    3

    10 12 10

    4

    4 0 0 4

    5

    2 0 2 1 1

    '
  - '3

    3

    10 10 10

    4

    0 0 1 2

    5

    1 2 3 2 7

    '
  output:
  - '0

    0

    1

    '
  - '0

    1

    1

    '
  - '0

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    0

    0

    '
  - '0

    1

    0

    '
  - '1

    0

    0

    '
  - '1

    1

    0

    '
  - '0

    1

    1

    '
  - '0

    1

    1

    '
  - '0

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    0

    1

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    0

    1

    '
  - '1

    0

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '0

    0

    0

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '0

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    0

    0

    '
  - '0

    1

    0

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    0

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '0

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    0

    1

    '
  - '0

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '0

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    0

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '1

    0

    1

    '
  - '0

    0

    1

    '
  - '0

    0

    1

    '
  - '0

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '0

    0

    0

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '0

    0

    1

    '
  - '0

    0

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '0

    1

    0

    '
  - '0

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '0

    1

    1

    '
  - '0

    0

    1

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    0

    '
  - '0

    1

    1

    '
  - '1

    0

    1

    '
  - '1

    1

    0

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    0

    0

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '0

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    0

    0

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    0

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '1

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    0

    0

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    0

    '
  - '1

    0

    1

    '
  - '1

    0

    0

    '
  - '1

    1

    0

    '
  - '0

    1

    1

    '
  - '0

    0

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '1

    1

    1

    '
  - '0

    1

    1

    '
  - '1

    1

    0

    '
  - '1

    1

    1

    '
  - '1

    0

    1

    '
  - '0

    1

    0

    '
timeout: 2.0
