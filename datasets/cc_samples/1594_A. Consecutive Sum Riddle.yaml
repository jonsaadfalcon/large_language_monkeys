prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nIn an embassy\
  \ of a well-known kingdom an electronic queue is organised. Every person who comes\
  \ to the embassy, needs to make the following three actions: show the ID, pay money\
  \ to the cashier and be fingerprinted. Besides, the actions should be performed\
  \ in the given order.\n\nFor each action several separate windows are singled out:\
  \ k1 separate windows for the first action (the first type windows), k2 windows\
  \ for the second one (the second type windows), and k3 for the third one (the third\
  \ type windows). The service time for one person in any of the first type window\
  \ equals to t1. Similarly, it takes t2 time to serve a person in any of the second\
  \ type windows. And it takes t3 to serve one person in any of the third type windows.\
  \ Thus, the service time depends only on the window type and is independent from\
  \ the person who is applying for visa.\n\nAt some moment n people come to the embassy,\
  \ the i-th person comes at the moment of time ci. The person is registered under\
  \ some number. After that he sits in the hall and waits for his number to be shown\
  \ on a special board. Besides the person's number the board shows the number of\
  \ the window where one should go and the person goes there immediately. Let's consider\
  \ that the time needed to approach the window is negligible. The table can show\
  \ information for no more than one person at a time. The electronic queue works\
  \ so as to immediately start working with the person who has approached the window,\
  \ as there are no other people in front of the window.\n\nThe Client Service Quality\
  \ inspectors noticed that several people spend too much time in the embassy (this\
  \ is particularly tiresome as the embassy has no mobile phone reception and 3G).\
  \ It was decided to organise the system so that the largest time a person spends\
  \ in the embassy were minimum. Help the inspectors organise the queue. Consider\
  \ that all actions except for being served in at the window, happen instantly.\n\
  \nInput\n\nThe first line contains three space-separated integers k1, k2, k3 (1\
  \ \u2264 ki \u2264 109), they are the number of windows of the first, second and\
  \ third type correspondingly.\n\nThe second line contains three space-separated\
  \ integers t1, t2, t3 (1 \u2264 ti \u2264 105), they are the periods of time needed\
  \ to serve one person in the window of the first, second and third type correspondingly.\
  \ \n\nThe third line contains an integer n (1 \u2264 n \u2264 105), it is the number\
  \ of people.\n\nThe fourth line contains n space-separated integers ci (1 \u2264\
  \ ci \u2264 109) in the non-decreasing order; ci is the time when the person number\
  \ i comes to the embassy.\n\nOutput\n\nPrint the single number, the maximum time\
  \ a person will spend in the embassy if the queue is organized optimally.\n\nPlease,\
  \ do not use the %lld specificator to read or write 64-bit integers in C++. It is\
  \ preferred to use the cin, cout streams (also you may use the %I64d specificator).\n\
  \nExamples\n\nInput\n\n1 1 1\n1 1 1\n5\n1 1 1 1 1\n\n\nOutput\n\n7\n\n\nInput\n\n\
  2 1 1\n5 1 1\n5\n1 2 3 3 5\n\n\nOutput\n\n13\n\nNote\n\nIn the first test 5 people\
  \ come simultaneously at the moment of time equal to 1. There is one window of every\
  \ type, it takes 1 unit of time to be served at each window. That's why the maximal\
  \ time a person spends in the embassy is the time needed to be served at the windows\
  \ (3 units of time) plus the time the last person who comes to the first window\
  \ waits (4 units of time).\n\nWindows in the second test work like this:\n\nThe\
  \ first window of the first type: [1, 6) \u2014 the first person, [6, 11) \u2014\
  \ third person, [11, 16) \u2014 fifth person\n\nThe second window of the first type:\
  \ [2, 7) \u2014 the second person, [7, 12) \u2014 the fourth person\n\nThe only\
  \ second type window: [6, 7) \u2014 first, [7, 8) \u2014 second, [11, 12) \u2014\
  \ third, [12, 13) \u2014 fourth, [16, 17) \u2014 fifth\n\nThe only third type window:\
  \ [7, 8) \u2014 first, [8, 9) \u2014 second, [12, 13) \u2014 third, [13, 14) \u2014\
  \ fourth, [17, 18) \u2014 fifth\n\nWe can see that it takes most time to serve the\
  \ fifth person.\nA: ```q = zip(map(int, input().split()), map(int, input().split()))\n\
  n = int(input())\nc = list(map(int, input().split()))\nd = c[:]\nfor k, t in q:\n\
  \    for i in range(min(k, n)): c[i] += t\n    for i in range(k, n): c[i] = max(c[i],\
  \ c[i - k]) + t\nprint(max(c[i] - d[i] for i in range(n)))```\nQ: Write python code\
  \ to solve the following coding problem that obeys the constraints and passes the\
  \ example test cases. The output code needs to read from and write to standard IO.\
  \ Please wrap your code answer using ```:\nAt a break Vanya came to the class and\
  \ saw an array of n k-bit integers a_1, a_2, \u2026, a_n on the board. An integer\
  \ x is called a k-bit integer if 0 \u2264 x \u2264 2^k - 1. \n\nOf course, Vanya\
  \ was not able to resist and started changing the numbers written on the board.\
  \ To ensure that no one will note anything, Vanya allowed himself to make only one\
  \ type of changes: choose an index of the array i (1 \u2264 i \u2264 n) and replace\
  \ the number a_i with the number \\overline{a_i}. We define \\overline{x} for a\
  \ k-bit integer x as the k-bit integer such that all its k bits differ from the\
  \ corresponding bits of x. \n\nVanya does not like the number 0. Therefore, he likes\
  \ such segments [l, r] (1 \u2264 l \u2264 r \u2264 n) such that a_l \u2295 a_{l+1}\
  \ \u2295 \u2026 \u2295 a_r \u2260 0, where \u2295 denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\
  \ Determine the maximum number of segments he likes Vanya can get applying zero\
  \ or more operations described above.\n\nInput\n\nThe first line of the input contains\
  \ two integers n and k (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 30).\n\nThe\
  \ next line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 2^k -\
  \ 1), separated by spaces \u2014 the array of k-bit integers.\n\nOutput\n\nPrint\
  \ one integer \u2014 the maximum possible number of segments with XOR not equal\
  \ to 0 that can be obtained by making several (possibly 0) operations described\
  \ in the statement.\n\nExamples\n\nInput\n\n3 2\n1 3 0\n\n\nOutput\n\n5\n\nInput\n\
  \n6 3\n1 4 4 7 3 4\n\n\nOutput\n\n19\n\nNote\n\nIn the first example if Vasya does\
  \ not perform any operations, he gets an array that has 5 segments that Vanya likes.\
  \ If he performs the operation with i = 2, he gets an array [1, 0, 0], because \\\
  overline{3} = 0 when k = 2. This array has 3 segments that Vanya likes. Also, to\
  \ get an array with 5 segments that Vanya likes, he can perform two operations with\
  \ i = 3 and with i = 2. He then gets an array [1, 0, 3]. It can be proven that he\
  \ can't obtain 6 or more segments that he likes.\n\nIn the second example, to get\
  \ 19 segments that Vanya likes, he can perform 4 operations with i = 3, i = 4, i\
  \ = 5, i = 6 and get an array [1, 4, 3, 0, 4, 3].\nA: ```n,k=list(map(int,input().split()))\n\
  arr=list(map(int,input().split()))\nnewarr=[0]\n\nfor num in arr:\n  newarr+=[newarr[-1]^num]\n\
  dic={}\nfor num in newarr:\n  x=(min(num,2**k-1-num),max(num,2**k-1-num))\n  if\
  \ x in dic:\n    dic[x]+=1\n  else:\n    dic[x]=1\nans=0\nfor elem in dic:\n  m=dic[elem]\n\
  \  half=m//2\n  ans+=half*(half-1)/2\n  half=m-half\n  ans+=half*(half-1)/2\nans=n*(n+1)/2-ans\n\
  print(int(ans))```\nQ: Write python code to solve the following coding problem that\
  \ obeys the constraints and passes the example test cases. The output code needs\
  \ to read from and write to standard IO. Please wrap your code answer using ```:\n\
  Theofanis has a riddle for you and if you manage to solve it, he will give you a\
  \ Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer\
  \ n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264\
  \ 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line\
  \ contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test\
  \ cases.\n\nThe first and only line of each test case contains a single integer\
  \ n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two\
  \ integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1)\
  \ + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists.\
  \ If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n\
  6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n\
  999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the\
  \ second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3\
  \ = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth\
  \ test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.\nA:"
question: "Theofanis has a riddle for you and if you manage to solve it, he will give\
  \ you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer\
  \ n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264\
  \ 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line\
  \ contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test\
  \ cases.\n\nThe first and only line of each test case contains a single integer\
  \ n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two\
  \ integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1)\
  \ + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists.\
  \ If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n\
  6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n\
  999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the\
  \ second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3\
  \ = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth\
  \ test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25."
samples:
- " ```t=int(input())\nfor _ in range(t):\n  n=int(input())\n  l=n//2\n  r=n-l-1\n\
  \  print(l,r)``` A: ```t = int(input())\nfor _ in range(t):\n    n = int(input())\n\
  \    l = n // 2\n    r = n - l - 1\n    print(l, r)```\nQ:"
- " ```t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l, r = 0, n\n\
  \    while l + (l + 1) + (l + 2) < n:\n        l += 1\n    r = l + (n - l - 1)\n\
  \    print(l, r)```  Q:"
test_cases:
  input:
  - '7

    1

    2

    3

    6

    100

    25

    3000000000000

    '
  - '7

    1

    2

    3

    6

    100

    25

    3000000000000

    '
  - '7

    1

    2

    3

    4

    100

    25

    3000000000000

    '
  - '7

    1

    2

    3

    6

    110

    25

    3000000000000

    '
  - '7

    1

    2

    3

    4

    100

    25

    1991556943611

    '
  - '7

    1

    1

    3

    6

    110

    25

    3000000000000

    '
  - '7

    1

    2

    2

    4

    100

    25

    1991556943611

    '
  - '7

    1

    1

    3

    3

    110

    25

    3000000000000

    '
  - '7

    1

    2

    2

    4

    100

    25

    1353142354742

    '
  - '7

    1

    1

    3

    3

    110

    25

    4838829180358

    '
  - '7

    1

    2

    4

    4

    100

    25

    1353142354742

    '
  - '7

    1

    1

    6

    3

    110

    25

    4838829180358

    '
  - '7

    1

    2

    4

    4

    101

    25

    1353142354742

    '
  - '7

    1

    1

    6

    3

    110

    29

    4838829180358

    '
  - '7

    1

    2

    4

    4

    101

    11

    1353142354742

    '
  - '7

    1

    2

    6

    3

    110

    29

    4838829180358

    '
  - '7

    1

    2

    4

    4

    101

    11

    390536414718

    '
  - '7

    1

    2

    4

    2

    101

    11

    390536414718

    '
  - '7

    1

    2

    6

    2

    101

    11

    390536414718

    '
  - '7

    1

    2

    6

    2

    101

    2

    390536414718

    '
  - '7

    1

    2

    3

    12

    100

    25

    3000000000000

    '
  - '7

    1

    2

    3

    4

    101

    25

    3000000000000

    '
  - '7

    1

    2

    3

    6

    110

    25

    2677725722785

    '
  - '7

    1

    3

    3

    4

    100

    25

    1991556943611

    '
  - '7

    1

    1

    3

    6

    110

    25

    3572104061323

    '
  - '7

    1

    2

    2

    4

    100

    38

    1991556943611

    '
  - '7

    1

    1

    3

    5

    110

    25

    3000000000000

    '
  - '7

    1

    2

    2

    1

    100

    25

    1353142354742

    '
  - '7

    1

    1

    6

    4

    110

    25

    4838829180358

    '
  - '7

    1

    2

    4

    4

    111

    25

    1353142354742

    '
  - '7

    1

    2

    6

    4

    101

    11

    1353142354742

    '
  - '7

    1

    2

    6

    1

    110

    29

    4838829180358

    '
  - '7

    1

    2

    4

    4

    101

    15

    390536414718

    '
  - '7

    2

    2

    4

    2

    101

    11

    390536414718

    '
  - '7

    1

    2

    6

    2

    101

    11

    766333686844

    '
  - '7

    1

    2

    6

    2

    001

    2

    390536414718

    '
  - '7

    1

    2

    6

    12

    100

    25

    3000000000000

    '
  - '7

    2

    2

    3

    6

    110

    25

    2677725722785

    '
  - '7

    1

    3

    3

    4

    101

    25

    1991556943611

    '
  - '7

    1

    1

    2

    6

    110

    25

    3572104061323

    '
  - '7

    1

    2

    2

    4

    100

    31

    1991556943611

    '
  - '7

    1

    1

    3

    5

    100

    25

    3000000000000

    '
  - '7

    1

    2

    2

    2

    100

    25

    1353142354742

    '
  - '7

    1

    2

    6

    4

    110

    25

    4838829180358

    '
  - '7

    1

    2

    4

    8

    101

    25

    1353142354742

    '
  - '7

    1

    3

    6

    1

    110

    29

    4838829180358

    '
  - '7

    1

    2

    4

    4

    100

    15

    390536414718

    '
  - '7

    2

    2

    4

    2

    111

    11

    390536414718

    '
  - '7

    1

    3

    6

    2

    101

    11

    766333686844

    '
  - '7

    1

    2

    6

    2

    001

    2

    133532318784

    '
  - '7

    2

    2

    1

    6

    110

    25

    2677725722785

    '
  - '7

    1

    3

    3

    4

    101

    40

    1991556943611

    '
  - '7

    2

    1

    2

    6

    110

    25

    3572104061323

    '
  - '7

    1

    2

    3

    2

    100

    25

    1991556943611

    '
  - '7

    1

    1

    3

    5

    101

    25

    3000000000000

    '
  - '7

    1

    2

    1

    4

    110

    25

    4838829180358

    '
  - '7

    1

    2

    4

    8

    101

    25

    2436703125980

    '
  - '7

    1

    3

    6

    1

    100

    29

    4838829180358

    '
  - '7

    1

    2

    2

    4

    100

    15

    390536414718

    '
  - '7

    2

    2

    8

    2

    111

    11

    390536414718

    '
  - '7

    2

    3

    6

    2

    101

    11

    766333686844

    '
  - '7

    1

    2

    4

    2

    001

    2

    133532318784

    '
  - '7

    2

    2

    1

    6

    110

    28

    2677725722785

    '
  - '7

    1

    3

    3

    4

    001

    40

    1991556943611

    '
  - '7

    2

    1

    2

    6

    110

    25

    2332457974892

    '
  - '7

    1

    3

    3

    2

    100

    25

    1991556943611

    '
  - '7

    1

    1

    3

    5

    101

    50

    3000000000000

    '
  - '7

    1

    2

    1

    4

    110

    25

    5095734316934

    '
  - '7

    1

    2

    4

    3

    101

    25

    2436703125980

    '
  - '7

    1

    3

    12

    1

    100

    29

    4838829180358

    '
  - '7

    1

    2

    2

    4

    100

    15

    210883275658

    '
  - '7

    2

    1

    8

    2

    111

    11

    390536414718

    '
  - '7

    2

    3

    6

    2

    001

    11

    766333686844

    '
  - '7

    1

    2

    8

    2

    001

    2

    133532318784

    '
  - '7

    2

    4

    1

    6

    110

    28

    2677725722785

    '
  - '7

    1

    3

    6

    4

    001

    40

    1991556943611

    '
  - '7

    2

    1

    2

    6

    110

    25

    2540353946170

    '
  - '7

    1

    3

    3

    2

    100

    25

    1288390796923

    '
  - '7

    1

    1

    3

    5

    101

    56

    3000000000000

    '
  - '7

    1

    2

    1

    4

    110

    25

    936172580299

    '
  - '7

    1

    2

    4

    3

    101

    25

    1275671334659

    '
  - '7

    1

    3

    12

    1

    100

    23

    4838829180358

    '
  - '7

    1

    2

    2

    4

    101

    15

    210883275658

    '
  - '7

    2

    1

    9

    2

    111

    11

    390536414718

    '
  - '7

    2

    6

    6

    2

    001

    11

    766333686844

    '
  - '7

    1

    2

    8

    4

    001

    2

    133532318784

    '
  - '7

    1

    4

    1

    6

    110

    28

    2677725722785

    '
  - '7

    1

    3

    6

    4

    011

    40

    1991556943611

    '
  - '7

    1

    3

    3

    4

    100

    25

    1288390796923

    '
  - '7

    1

    2

    3

    5

    101

    56

    3000000000000

    '
  - '7

    1

    2

    1

    4

    110

    25

    1246712055273

    '
  - '7

    1

    2

    4

    3

    101

    25

    747848364006

    '
  - '7

    1

    3

    12

    2

    100

    23

    4838829180358

    '
  - '7

    1

    2

    2

    4

    100

    15

    294961048161

    '
  - '7

    2

    1

    9

    2

    110

    11

    390536414718

    '
  - '7

    2

    6

    12

    2

    001

    11

    766333686844

    '
  - '7

    2

    2

    8

    4

    001

    2

    133532318784

    '
  - '7

    1

    4

    1

    6

    110

    28

    300434955457

    '
  - '7

    1

    4

    6

    4

    011

    40

    1991556943611

    '
  - '7

    1

    3

    3

    4

    100

    2

    1288390796923

    '
  - '7

    1

    2

    3

    2

    101

    56

    3000000000000

    '
  - '7

    1

    2

    1

    4

    010

    25

    1246712055273

    '
  - '7

    1

    2

    4

    3

    101

    28

    747848364006

    '
  - '7

    1

    3

    20

    2

    100

    23

    4838829180358

    '
  - '7

    1

    2

    2

    4

    101

    15

    294961048161

    '
  - '7

    2

    1

    9

    2

    110

    11

    678758088380

    '
  - '7

    4

    6

    12

    2

    001

    11

    766333686844

    '
  - '7

    2

    2

    8

    4

    001

    2

    171734329532

    '
  - '7

    1

    1

    1

    6

    110

    28

    300434955457

    '
  - '7

    1

    4

    6

    4

    011

    27

    1991556943611

    '
  - '7

    1

    6

    3

    4

    100

    2

    1288390796923

    '
  - '7

    1

    2

    6

    2

    101

    56

    3000000000000

    '
  - '7

    1

    2

    1

    4

    010

    50

    1246712055273

    '
  - '7

    1

    3

    4

    3

    101

    28

    747848364006

    '
  - '7

    1

    3

    20

    2

    110

    23

    4838829180358

    '
  - '7

    1

    2

    2

    4

    111

    15

    294961048161

    '
  - '7

    2

    1

    9

    2

    110

    10

    678758088380

    '
  - '7

    4

    6

    12

    2

    001

    11

    3201880686

    '
  - '7

    1

    1

    1

    6

    110

    28

    357303383774

    '
  - '7

    1

    4

    6

    4

    001

    27

    1991556943611

    '
  - '7

    1

    2

    12

    2

    101

    56

    3000000000000

    '
  - '7

    1

    2

    1

    1

    010

    50

    1246712055273

    '
  - '7

    1

    3

    4

    3

    101

    15

    747848364006

    '
  - '7

    1

    3

    32

    2

    110

    23

    4838829180358

    '
  - '7

    2

    2

    2

    4

    111

    15

    294961048161

    '
  - '7

    2

    1

    9

    2

    100

    10

    678758088380

    '
  - '7

    4

    6

    12

    2

    001

    11

    2854222004

    '
  - '7

    1

    1

    1

    6

    100

    28

    357303383774

    '
  - '7

    1

    4

    6

    4

    001

    36

    1991556943611

    '
  - '7

    1

    2

    12

    1

    101

    56

    3000000000000

    '
  - '7

    1

    2

    1

    1

    010

    50

    813243965518

    '
  - '7

    1

    3

    4

    3

    101

    25

    747848364006

    '
  - '7

    1

    1

    32

    2

    110

    23

    4838829180358

    '
  - '7

    2

    2

    2

    1

    111

    15

    294961048161

    '
  - '7

    2

    1

    9

    2

    100

    14

    678758088380

    '
  - '7

    2

    1

    1

    6

    100

    28

    357303383774

    '
  - '7

    1

    4

    6

    4

    001

    36

    874723705512

    '
  - '7

    1

    4

    1

    1

    010

    50

    813243965518

    '
  - '7

    1

    3

    4

    3

    101

    25

    28231786989

    '
  - '7

    1

    1

    64

    2

    110

    23

    4838829180358

    '
  - '7

    3

    2

    2

    1

    111

    15

    294961048161

    '
  - '7

    2

    1

    7

    2

    100

    14

    678758088380

    '
  - '7

    2

    2

    1

    6

    100

    28

    357303383774

    '
  - '7

    1

    4

    1

    1

    010

    50

    150630929683

    '
  - '7

    1

    1

    64

    2

    010

    23

    4838829180358

    '
  - '7

    2

    2

    7

    2

    100

    14

    678758088380

    '
  - '7

    2

    2

    1

    6

    100

    43

    357303383774

    '
  - '7

    1

    4

    1

    1

    011

    50

    150630929683

    '
  - '7

    1

    1

    64

    1

    110

    23

    4838829180358

    '
  - '7

    2

    2

    7

    3

    100

    14

    678758088380

    '
  - '7

    2

    2

    2

    6

    100

    43

    357303383774

    '
  - '7

    1

    5

    1

    1

    011

    50

    150630929683

    '
  - '7

    1

    1

    64

    1

    010

    23

    4838829180358

    '
  - '7

    2

    2

    7

    3

    110

    14

    678758088380

    '
  - '7

    2

    2

    4

    6

    100

    43

    357303383774

    '
  - '7

    1

    1

    66

    1

    010

    23

    4838829180358

    '
  - '7

    2

    4

    7

    3

    110

    14

    678758088380

    '
  - '7

    2

    2

    4

    6

    100

    43

    705629924930

    '
  - '7

    1

    1

    66

    1

    010

    23

    4753320387781

    '
  - '7

    2

    4

    7

    3

    110

    6

    678758088380

    '
  - '7

    1

    1

    66

    1

    010

    23

    4190053953232

    '
  - '7

    2

    4

    7

    3

    111

    6

    678758088380

    '
  - '7

    1

    1

    14

    1

    010

    23

    4190053953232

    '
  - '7

    2

    4

    7

    3

    011

    6

    678758088380

    '
  - '7

    1

    1

    14

    1

    010

    46

    4190053953232

    '
  - '7

    2

    4

    7

    3

    111

    6

    56293238153

    '
  - '7

    1

    2

    2

    6

    100

    25

    3000000000000

    '
  - '7

    1

    2

    3

    6

    100

    25

    4576389190877

    '
  - '7

    1

    2

    3

    6

    110

    37

    3000000000000

    '
  - '7

    1

    2

    3

    4

    100

    27

    1991556943611

    '
  - '7

    1

    1

    4

    6

    110

    25

    3000000000000

    '
  - '7

    1

    1

    3

    3

    110

    1

    3000000000000

    '
  - '7

    1

    3

    2

    4

    100

    25

    1353142354742

    '
  - '7

    1

    1

    3

    5

    110

    25

    4838829180358

    '
  - '7

    1

    2

    4

    5

    100

    25

    1353142354742

    '
  - '7

    1

    1

    8

    3

    110

    25

    4838829180358

    '
  - '7

    2

    1

    6

    3

    110

    29

    4838829180358

    '
  - '7

    1

    2

    4

    4

    101

    11

    307434316852

    '
  - '7

    1

    2

    6

    1

    110

    54

    4838829180358

    '
  - '7

    1

    2

    4

    4

    101

    12

    390536414718

    '
  - '7

    1

    2

    4

    2

    101

    21

    390536414718

    '
  - '7

    1

    1

    6

    2

    101

    2

    390536414718

    '
  - '7

    1

    2

    3

    12

    100

    31

    3000000000000

    '
  - '7

    1

    4

    3

    4

    101

    25

    3000000000000

    '
  - '7

    1

    2

    3

    4

    110

    25

    2677725722785

    '
  - '7

    1

    3

    3

    8

    100

    25

    1991556943611

    '
  - '7

    1

    1

    3

    6

    110

    14

    3572104061323

    '
  - '7

    1

    1

    3

    5

    110

    5

    3000000000000

    '
  - '7

    1

    4

    4

    4

    111

    25

    1353142354742

    '
  - '7

    2

    2

    6

    4

    101

    11

    1353142354742

    '
  - '7

    1

    2

    6

    2

    110

    29

    4838829180358

    '
  - '7

    1

    2

    4

    4

    111

    15

    390536414718

    '
  - '7

    2

    2

    4

    2

    101

    8

    390536414718

    '
  - '7

    1

    2

    6

    2

    001

    11

    766333686844

    '
  - '7

    1

    2

    6

    2

    001

    4

    390536414718

    '
  - '7

    2

    2

    3

    1

    110

    25

    2677725722785

    '
  - '7

    1

    3

    1

    4

    101

    25

    1991556943611

    '
  - '7

    1

    1

    2

    10

    110

    25

    3572104061323

    '
  - '7

    1

    1

    3

    5

    100

    8

    3000000000000

    '
  - '7

    1

    2

    2

    2

    101

    25

    1353142354742

    '
  - '7

    1

    2

    6

    4

    110

    28

    4838829180358

    '
  - '7

    1

    1

    4

    8

    101

    25

    1353142354742

    '
  output:
  - '0 1

    -1 2

    -2 3

    -5 6

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -5 6

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -3 4

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -5 6

    -109 110

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -3 4

    -99 100

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -5 6

    -109 110

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -2 3

    -109 110

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    0 1

    -2 3

    -2 3

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -99 100

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    0 1

    -5 6

    -2 3

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -100 101

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    0 1

    -5 6

    -2 3

    -109 110

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -100 101

    -10 11

    -1353142354741 1353142354742

    '
  - '0 1

    -1 2

    -5 6

    -2 3

    -109 110

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -100 101

    -10 11

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -3 4

    -1 2

    -100 101

    -10 11

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    -100 101

    -10 11

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    -100 101

    -1 2

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -2 3

    -11 12

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -3 4

    -100 101

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -5 6

    -109 110

    -24 25

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -2 3

    -3 4

    -99 100

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -5 6

    -109 110

    -24 25

    -3572104061322 3572104061323

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -37 38

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -109 110

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -1 2

    0 1

    -99 100

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    0 1

    -5 6

    -3 4

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -110 111

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    -1 2

    -5 6

    -3 4

    -100 101

    -10 11

    -1353142354741 1353142354742

    '
  - '0 1

    -1 2

    -5 6

    0 1

    -109 110

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -100 101

    -14 15

    -390536414717 390536414718

    '
  - '-1 2

    -1 2

    -3 4

    -1 2

    -100 101

    -10 11

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    -100 101

    -10 11

    -766333686843 766333686844

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    0 1

    -1 2

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -5 6

    -11 12

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '-1 2

    -1 2

    -2 3

    -5 6

    -109 110

    -24 25

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -2 3

    -3 4

    -100 101

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -1 2

    -5 6

    -109 110

    -24 25

    -3572104061322 3572104061323

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -30 31

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -1 2

    -1 2

    -99 100

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    -1 2

    -5 6

    -3 4

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -7 8

    -100 101

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    -2 3

    -5 6

    0 1

    -109 110

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -99 100

    -14 15

    -390536414717 390536414718

    '
  - '-1 2

    -1 2

    -3 4

    -1 2

    -110 111

    -10 11

    -390536414717 390536414718

    '
  - '0 1

    -2 3

    -5 6

    -1 2

    -100 101

    -10 11

    -766333686843 766333686844

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    0 1

    -1 2

    -133532318783 133532318784

    '
  - '-1 2

    -1 2

    0 1

    -5 6

    -109 110

    -24 25

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -2 3

    -3 4

    -100 101

    -39 40

    -1991556943610 1991556943611

    '
  - '-1 2

    0 1

    -1 2

    -5 6

    -109 110

    -24 25

    -3572104061322 3572104061323

    '
  - '0 1

    -1 2

    -2 3

    -1 2

    -99 100

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -100 101

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    -3 4

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -7 8

    -100 101

    -24 25

    -2436703125979 2436703125980

    '
  - '0 1

    -2 3

    -5 6

    0 1

    -99 100

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -14 15

    -390536414717 390536414718

    '
  - '-1 2

    -1 2

    -7 8

    -1 2

    -110 111

    -10 11

    -390536414717 390536414718

    '
  - '-1 2

    -2 3

    -5 6

    -1 2

    -100 101

    -10 11

    -766333686843 766333686844

    '
  - '0 1

    -1 2

    -3 4

    -1 2

    0 1

    -1 2

    -133532318783 133532318784

    '
  - '-1 2

    -1 2

    0 1

    -5 6

    -109 110

    -27 28

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -2 3

    -3 4

    0 1

    -39 40

    -1991556943610 1991556943611

    '
  - '-1 2

    0 1

    -1 2

    -5 6

    -109 110

    -24 25

    -2332457974891 2332457974892

    '
  - '0 1

    -2 3

    -2 3

    -1 2

    -99 100

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -100 101

    -49 50

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    -3 4

    -109 110

    -24 25

    -5095734316933 5095734316934

    '
  - '0 1

    -1 2

    -3 4

    -2 3

    -100 101

    -24 25

    -2436703125979 2436703125980

    '
  - '0 1

    -2 3

    -11 12

    0 1

    -99 100

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -14 15

    -210883275657 210883275658

    '
  - '-1 2

    0 1

    -7 8

    -1 2

    -110 111

    -10 11

    -390536414717 390536414718

    '
  - '-1 2

    -2 3

    -5 6

    -1 2

    0 1

    -10 11

    -766333686843 766333686844

    '
  - '0 1

    -1 2

    -7 8

    -1 2

    0 1

    -1 2

    -133532318783 133532318784

    '
  - '-1 2

    -3 4

    0 1

    -5 6

    -109 110

    -27 28

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -5 6

    -3 4

    0 1

    -39 40

    -1991556943610 1991556943611

    '
  - '-1 2

    0 1

    -1 2

    -5 6

    -109 110

    -24 25

    -2540353946169 2540353946170

    '
  - '0 1

    -2 3

    -2 3

    -1 2

    -99 100

    -24 25

    -1288390796922 1288390796923

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -100 101

    -55 56

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    -3 4

    -109 110

    -24 25

    -936172580298 936172580299

    '
  - '0 1

    -1 2

    -3 4

    -2 3

    -100 101

    -24 25

    -1275671334658 1275671334659

    '
  - '0 1

    -2 3

    -11 12

    0 1

    -99 100

    -22 23

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -100 101

    -14 15

    -210883275657 210883275658

    '
  - '-1 2

    0 1

    -8 9

    -1 2

    -110 111

    -10 11

    -390536414717 390536414718

    '
  - '-1 2

    -5 6

    -5 6

    -1 2

    0 1

    -10 11

    -766333686843 766333686844

    '
  - '0 1

    -1 2

    -7 8

    -3 4

    0 1

    -1 2

    -133532318783 133532318784

    '
  - '0 1

    -3 4

    0 1

    -5 6

    -109 110

    -27 28

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -5 6

    -3 4

    -10 11

    -39 40

    -1991556943610 1991556943611

    '
  - '0 1

    -2 3

    -2 3

    -3 4

    -99 100

    -24 25

    -1288390796922 1288390796923

    '
  - '0 1

    -1 2

    -2 3

    -4 5

    -100 101

    -55 56

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    -3 4

    -109 110

    -24 25

    -1246712055272 1246712055273

    '
  - '0 1

    -1 2

    -3 4

    -2 3

    -100 101

    -24 25

    -747848364005 747848364006

    '
  - '0 1

    -2 3

    -11 12

    -1 2

    -99 100

    -22 23

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -99 100

    -14 15

    -294961048160 294961048161

    '
  - '-1 2

    0 1

    -8 9

    -1 2

    -109 110

    -10 11

    -390536414717 390536414718

    '
  - '-1 2

    -5 6

    -11 12

    -1 2

    0 1

    -10 11

    -766333686843 766333686844

    '
  - '-1 2

    -1 2

    -7 8

    -3 4

    0 1

    -1 2

    -133532318783 133532318784

    '
  - '0 1

    -3 4

    0 1

    -5 6

    -109 110

    -27 28

    -300434955456 300434955457

    '
  - '0 1

    -3 4

    -5 6

    -3 4

    -10 11

    -39 40

    -1991556943610 1991556943611

    '
  - '0 1

    -2 3

    -2 3

    -3 4

    -99 100

    -1 2

    -1288390796922 1288390796923

    '
  - '0 1

    -1 2

    -2 3

    -1 2

    -100 101

    -55 56

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    -3 4

    -9 10

    -24 25

    -1246712055272 1246712055273

    '
  - '0 1

    -1 2

    -3 4

    -2 3

    -100 101

    -27 28

    -747848364005 747848364006

    '
  - '0 1

    -2 3

    -19 20

    -1 2

    -99 100

    -22 23

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -100 101

    -14 15

    -294961048160 294961048161

    '
  - '-1 2

    0 1

    -8 9

    -1 2

    -109 110

    -10 11

    -678758088379 678758088380

    '
  - '-3 4

    -5 6

    -11 12

    -1 2

    0 1

    -10 11

    -766333686843 766333686844

    '
  - '-1 2

    -1 2

    -7 8

    -3 4

    0 1

    -1 2

    -171734329531 171734329532

    '
  - '0 1

    0 1

    0 1

    -5 6

    -109 110

    -27 28

    -300434955456 300434955457

    '
  - '0 1

    -3 4

    -5 6

    -3 4

    -10 11

    -26 27

    -1991556943610 1991556943611

    '
  - '0 1

    -5 6

    -2 3

    -3 4

    -99 100

    -1 2

    -1288390796922 1288390796923

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    -100 101

    -55 56

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    -3 4

    -9 10

    -49 50

    -1246712055272 1246712055273

    '
  - '0 1

    -2 3

    -3 4

    -2 3

    -100 101

    -27 28

    -747848364005 747848364006

    '
  - '0 1

    -2 3

    -19 20

    -1 2

    -109 110

    -22 23

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -1 2

    -3 4

    -110 111

    -14 15

    -294961048160 294961048161

    '
  - '-1 2

    0 1

    -8 9

    -1 2

    -109 110

    -9 10

    -678758088379 678758088380

    '
  - '-3 4

    -5 6

    -11 12

    -1 2

    0 1

    -10 11

    -3201880685 3201880686

    '
  - '0 1

    0 1

    0 1

    -5 6

    -109 110

    -27 28

    -357303383773 357303383774

    '
  - '0 1

    -3 4

    -5 6

    -3 4

    0 1

    -26 27

    -1991556943610 1991556943611

    '
  - '0 1

    -1 2

    -11 12

    -1 2

    -100 101

    -55 56

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    0 1

    -9 10

    -49 50

    -1246712055272 1246712055273

    '
  - '0 1

    -2 3

    -3 4

    -2 3

    -100 101

    -14 15

    -747848364005 747848364006

    '
  - '0 1

    -2 3

    -31 32

    -1 2

    -109 110

    -22 23

    -4838829180357 4838829180358

    '
  - '-1 2

    -1 2

    -1 2

    -3 4

    -110 111

    -14 15

    -294961048160 294961048161

    '
  - '-1 2

    0 1

    -8 9

    -1 2

    -99 100

    -9 10

    -678758088379 678758088380

    '
  - '-3 4

    -5 6

    -11 12

    -1 2

    0 1

    -10 11

    -2854222003 2854222004

    '
  - '0 1

    0 1

    0 1

    -5 6

    -99 100

    -27 28

    -357303383773 357303383774

    '
  - '0 1

    -3 4

    -5 6

    -3 4

    0 1

    -35 36

    -1991556943610 1991556943611

    '
  - '0 1

    -1 2

    -11 12

    0 1

    -100 101

    -55 56

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    0 1

    0 1

    -9 10

    -49 50

    -813243965517 813243965518

    '
  - '0 1

    -2 3

    -3 4

    -2 3

    -100 101

    -24 25

    -747848364005 747848364006

    '
  - '0 1

    0 1

    -31 32

    -1 2

    -109 110

    -22 23

    -4838829180357 4838829180358

    '
  - '-1 2

    -1 2

    -1 2

    0 1

    -110 111

    -14 15

    -294961048160 294961048161

    '
  - '-1 2

    0 1

    -8 9

    -1 2

    -99 100

    -13 14

    -678758088379 678758088380

    '
  - '-1 2

    0 1

    0 1

    -5 6

    -99 100

    -27 28

    -357303383773 357303383774

    '
  - '0 1

    -3 4

    -5 6

    -3 4

    0 1

    -35 36

    -874723705511 874723705512

    '
  - '0 1

    -3 4

    0 1

    0 1

    -9 10

    -49 50

    -813243965517 813243965518

    '
  - '0 1

    -2 3

    -3 4

    -2 3

    -100 101

    -24 25

    -28231786988 28231786989

    '
  - '0 1

    0 1

    -63 64

    -1 2

    -109 110

    -22 23

    -4838829180357 4838829180358

    '
  - '-2 3

    -1 2

    -1 2

    0 1

    -110 111

    -14 15

    -294961048160 294961048161

    '
  - '-1 2

    0 1

    -6 7

    -1 2

    -99 100

    -13 14

    -678758088379 678758088380

    '
  - '-1 2

    -1 2

    0 1

    -5 6

    -99 100

    -27 28

    -357303383773 357303383774

    '
  - '0 1

    -3 4

    0 1

    0 1

    -9 10

    -49 50

    -150630929682 150630929683

    '
  - '0 1

    0 1

    -63 64

    -1 2

    -9 10

    -22 23

    -4838829180357 4838829180358

    '
  - '-1 2

    -1 2

    -6 7

    -1 2

    -99 100

    -13 14

    -678758088379 678758088380

    '
  - '-1 2

    -1 2

    0 1

    -5 6

    -99 100

    -42 43

    -357303383773 357303383774

    '
  - '0 1

    -3 4

    0 1

    0 1

    -10 11

    -49 50

    -150630929682 150630929683

    '
  - '0 1

    0 1

    -63 64

    0 1

    -109 110

    -22 23

    -4838829180357 4838829180358

    '
  - '-1 2

    -1 2

    -6 7

    -2 3

    -99 100

    -13 14

    -678758088379 678758088380

    '
  - '-1 2

    -1 2

    -1 2

    -5 6

    -99 100

    -42 43

    -357303383773 357303383774

    '
  - '0 1

    -4 5

    0 1

    0 1

    -10 11

    -49 50

    -150630929682 150630929683

    '
  - '0 1

    0 1

    -63 64

    0 1

    -9 10

    -22 23

    -4838829180357 4838829180358

    '
  - '-1 2

    -1 2

    -6 7

    -2 3

    -109 110

    -13 14

    -678758088379 678758088380

    '
  - '-1 2

    -1 2

    -3 4

    -5 6

    -99 100

    -42 43

    -357303383773 357303383774

    '
  - '0 1

    0 1

    -65 66

    0 1

    -9 10

    -22 23

    -4838829180357 4838829180358

    '
  - '-1 2

    -3 4

    -6 7

    -2 3

    -109 110

    -13 14

    -678758088379 678758088380

    '
  - '-1 2

    -1 2

    -3 4

    -5 6

    -99 100

    -42 43

    -705629924929 705629924930

    '
  - '0 1

    0 1

    -65 66

    0 1

    -9 10

    -22 23

    -4753320387780 4753320387781

    '
  - '-1 2

    -3 4

    -6 7

    -2 3

    -109 110

    -5 6

    -678758088379 678758088380

    '
  - '0 1

    0 1

    -65 66

    0 1

    -9 10

    -22 23

    -4190053953231 4190053953232

    '
  - '-1 2

    -3 4

    -6 7

    -2 3

    -110 111

    -5 6

    -678758088379 678758088380

    '
  - '0 1

    0 1

    -13 14

    0 1

    -9 10

    -22 23

    -4190053953231 4190053953232

    '
  - '-1 2

    -3 4

    -6 7

    -2 3

    -10 11

    -5 6

    -678758088379 678758088380

    '
  - '0 1

    0 1

    -13 14

    0 1

    -9 10

    -45 46

    -4190053953231 4190053953232

    '
  - '-1 2

    -3 4

    -6 7

    -2 3

    -110 111

    -5 6

    -56293238152 56293238153

    '
  - '0 1

    -1 2

    -1 2

    -5 6

    -99 100

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -5 6

    -99 100

    -24 25

    -4576389190876 4576389190877

    '
  - '0 1

    -1 2

    -2 3

    -5 6

    -109 110

    -36 37

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -3 4

    -99 100

    -26 27

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -3 4

    -5 6

    -109 110

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    0 1

    -2 3

    -2 3

    -109 110

    0 1

    -2999999999999 3000000000000

    '
  - '0 1

    -2 3

    -1 2

    -3 4

    -99 100

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -4 5

    -99 100

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    0 1

    -7 8

    -2 3

    -109 110

    -24 25

    -4838829180357 4838829180358

    '
  - '-1 2

    0 1

    -5 6

    -2 3

    -109 110

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -100 101

    -10 11

    -307434316851 307434316852

    '
  - '0 1

    -1 2

    -5 6

    0 1

    -109 110

    -53 54

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -100 101

    -11 12

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -3 4

    -1 2

    -100 101

    -20 21

    -390536414717 390536414718

    '
  - '0 1

    0 1

    -5 6

    -1 2

    -100 101

    -1 2

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -2 3

    -11 12

    -99 100

    -30 31

    -2999999999999 3000000000000

    '
  - '0 1

    -3 4

    -2 3

    -3 4

    -100 101

    -24 25

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -2 3

    -3 4

    -109 110

    -24 25

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    -2 3

    -7 8

    -99 100

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -2 3

    -5 6

    -109 110

    -13 14

    -3572104061322 3572104061323

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -109 110

    -4 5

    -2999999999999 3000000000000

    '
  - '0 1

    -3 4

    -3 4

    -3 4

    -110 111

    -24 25

    -1353142354741 1353142354742

    '
  - '-1 2

    -1 2

    -5 6

    -3 4

    -100 101

    -10 11

    -1353142354741 1353142354742

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    -109 110

    -28 29

    -4838829180357 4838829180358

    '
  - '0 1

    -1 2

    -3 4

    -3 4

    -110 111

    -14 15

    -390536414717 390536414718

    '
  - '-1 2

    -1 2

    -3 4

    -1 2

    -100 101

    -7 8

    -390536414717 390536414718

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    0 1

    -10 11

    -766333686843 766333686844

    '
  - '0 1

    -1 2

    -5 6

    -1 2

    0 1

    -3 4

    -390536414717 390536414718

    '
  - '-1 2

    -1 2

    -2 3

    0 1

    -109 110

    -24 25

    -2677725722784 2677725722785

    '
  - '0 1

    -2 3

    0 1

    -3 4

    -100 101

    -24 25

    -1991556943610 1991556943611

    '
  - '0 1

    0 1

    -1 2

    -9 10

    -109 110

    -24 25

    -3572104061322 3572104061323

    '
  - '0 1

    0 1

    -2 3

    -4 5

    -99 100

    -7 8

    -2999999999999 3000000000000

    '
  - '0 1

    -1 2

    -1 2

    -1 2

    -100 101

    -24 25

    -1353142354741 1353142354742

    '
  - '0 1

    -1 2

    -5 6

    -3 4

    -109 110

    -27 28

    -4838829180357 4838829180358

    '
  - '0 1

    0 1

    -3 4

    -7 8

    -100 101

    -24 25

    -1353142354741 1353142354742

    '
timeout: 2.0
