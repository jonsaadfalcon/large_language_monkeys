prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nThe busses\
  \ in Berland are equipped with a video surveillance system. The system records information\
  \ about changes in the number of passengers in a bus after stops.\n\nIf x is the\
  \ number of passengers in a bus just before the current bus stop and y is the number\
  \ of passengers in the bus just after current bus stop, the system records the number\
  \ y-x. So the system records show how number of passengers changed.\n\nThe test\
  \ run was made for single bus and n bus stops. Thus, the system recorded the sequence\
  \ of integers a_1, a_2, ..., a_n (exactly one number for each bus stop), where a_i\
  \ is the record for the bus stop i. The bus stops are numbered from 1 to n in chronological\
  \ order.\n\nDetermine the number of possible ways how many people could be in the\
  \ bus before the first bus stop, if the bus has a capacity equals to w (that is,\
  \ at any time in the bus there should be from 0 to w passengers inclusive).\n\n\
  Input\n\nThe first line contains two integers n and w (1 \u2264 n \u2264 1 000,\
  \ 1 \u2264 w \u2264 10^{9}) \u2014 the number of bus stops and the capacity of the\
  \ bus.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (-10^{6} \u2264\
  \ a_i \u2264 10^{6}), where a_i equals to the number, which has been recorded by\
  \ the video system after the i-th bus stop.\n\nOutput\n\nPrint the number of possible\
  \ ways how many people could be in the bus before the first bus stop, if the bus\
  \ has a capacity equals to w. If the situation is contradictory (i.e. for any initial\
  \ number of passengers there will be a contradiction), print 0.\n\nExamples\n\n\
  Input\n\n3 5\n2 1 -3\n\n\nOutput\n\n3\n\n\nInput\n\n2 4\n-1 1\n\n\nOutput\n\n4\n\
  \n\nInput\n\n4 10\n2 4 1 2\n\n\nOutput\n\n2\n\nNote\n\nIn the first example initially\
  \ in the bus could be 0, 1 or 2 passengers.\n\nIn the second example initially in\
  \ the bus could be 1, 2, 3 or 4 passengers.\n\nIn the third example initially in\
  \ the bus could be 0 or 1 passenger.\nA: ```l=input().split()\nn=int(l[0])\nw=int(l[1])\n\
  l=input().split()\nli=[int(i) for i in l]\nleft=0\nright=w\nsumi=0\nfor i in range(n):\n\
  \    sumi+=li[i]\n    left=max(left,-1*sumi)\n    right=min(right,w-sumi)\nprint(max(right-left+1,0))```\n\
  Q: Write python code to solve the following coding problem that obeys the constraints\
  \ and passes the example test cases. The output code needs to read from and write\
  \ to standard IO. Please wrap your code answer using ```:\nVasya has a sequence\
  \ a consisting of n integers a_1, a_2, ..., a_n. Vasya may pefrom the following\
  \ operation: choose some number from the sequence and swap any pair of bits in its\
  \ binary representation. For example, Vasya can transform number 6 (... 00000000110_2)\
  \ into 3 (... 00000000011_2), 12 (... 000000001100_2), 1026 (... 10000000010_2)\
  \ and many others. Vasya can use this operation any (possibly zero) number of times\
  \ on any number from the sequence.\n\nVasya names a sequence as good one, if, using\
  \ operation mentioned above, he can obtain the sequence with [bitwise exclusive\
  \ or](https://en.wikipedia.org/wiki/Exclusive_or) of all elements equal to 0.\n\n\
  For the given sequence a_1, a_2, \u2026, a_n Vasya'd like to calculate number of\
  \ integer pairs (l, r) such that 1 \u2264 l \u2264 r \u2264 n and sequence a_l,\
  \ a_{l + 1}, ..., a_r is good.\n\nInput\n\nThe first line contains a single integer\
  \ n (1 \u2264 n \u2264 3 \u22C5 10^5) \u2014 length of the sequence.\n\nThe second\
  \ line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}) \u2014\
  \ the sequence a.\n\nOutput\n\nPrint one integer \u2014 the number of pairs (l,\
  \ r) such that 1 \u2264 l \u2264 r \u2264 n and the sequence a_l, a_{l + 1}, ...,\
  \ a_r is good.\n\nExamples\n\nInput\n\n3\n6 7 14\n\n\nOutput\n\n2\n\n\nInput\n\n\
  4\n1 2 1 16\n\n\nOutput\n\n4\n\nNote\n\nIn the first example pairs (2, 3) and (1,\
  \ 3) are valid. Pair (2, 3) is valid since a_2 = 7 \u2192 11, a_3 = 14 \u2192 11\
  \ and 11 \u2295 11 = 0, where \u2295 \u2014 bitwise exclusive or. Pair (1, 3) is\
  \ valid since a_1 = 6 \u2192 3, a_2 = 7 \u2192 13, a_3 = 14 \u2192 14 and 3 \u2295\
  \ 13 \u2295 14 = 0.\n\nIn the second example pairs (1, 2), (2, 3), (3, 4) and (1,\
  \ 4) are valid.\nA: ```import os\nimport sys\nfrom io import BytesIO, IOBase\n#\
  \ region fastio\n\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n\
  \    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer\
  \ = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n\
  \        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n\
  \        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\n# ------------------------------\n\nfrom math import factorial\nfrom\
  \ collections import Counter, defaultdict, deque\nfrom heapq import heapify, heappop,\
  \ heappush\n\ndef RL(): return map(int, sys.stdin.readline().rstrip().split())\n\
  def RLL(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef N():\
  \ return int(input())\ndef comb(n, m): return factorial(n) / (factorial(m) * factorial(n\
  \ - m)) if n >= m else 0\ndef perm(n, m): return factorial(n) // (factorial(n -\
  \ m)) if n >= m else 0\ndef mdis(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 -\
  \ y2)\nmod = 998244353\nINF = float('inf')\n\n# ------------------------------\n\
  \ndef main():\n    n = N()\n    arr = RLL()\n    narr = [bin(i).count('1') for i\
  \ in arr]\n    res = 0\n\n    dp = [[0, 0] for _ in range(n+1)]\n    dp[0][0] =\
  \ 1\n    sm = [0]\n    for i in narr: sm.append(sm[-1]+i)\n\n    for i in range(1,\
  \ n+1):\n        t = res\n        if i>1:\n            if sm[i]%2:\n           \
  \     res+=dp[i-2][1]\n            else:\n                res+=dp[i-2][0]\n    \
  \    # print(i, res-t, sm[i])\n        dp[i][sm[i]%2] = dp[i-1][sm[i]%2]+1\n   \
  \     dp[i][(sm[i]%2)^1] = dp[i-1][(sm[i]%2)^1]\n\n    for l in range(1, n+1):\n\
  \        ma = narr[l-1]\n        for r in range(l+1, min(n+1, l+63)):\n        \
  \    ma = max(ma, narr[r-1])\n            now = sm[r]-sm[l-1]\n            if now%2==0\
  \ and ma>now-ma:\n                res-=1\n    print(res)\n\n\n\n\n\n\nif __name__\
  \ == \"__main__\":\n    main()```\nQ: Write python code to solve the following coding\
  \ problem that obeys the constraints and passes the example test cases. The output\
  \ code needs to read from and write to standard IO. Please wrap your code answer\
  \ using ```:\nMonocarp has got an array a consisting of n integers. Let's denote\
  \ k as the mathematic mean of these elements (note that it's possible that k is\
  \ not an integer). \n\nThe mathematic mean of an array of n elements is the sum\
  \ of elements divided by the number of these elements (i. e. sum divided by n).\n\
  \nMonocarp wants to delete exactly two elements from a so that the mathematic mean\
  \ of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate\
  \ the number of pairs of positions [i, j] (i < j) such that if the elements on these\
  \ positions are deleted, the mathematic mean of (n - 2) remaining elements is equal\
  \ to k (that is, it is equal to the mathematic mean of n elements of the original\
  \ array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264\
  \ 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains\
  \ one integer n (3 \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number of elements\
  \ in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ...,\
  \ a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\
  \nThe sum of n over all testcases doesn't exceed 2 \u22C5 10^5.\n\nOutput\n\nPrint\
  \ one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if\
  \ the elements on these positions are deleted, the mathematic mean of (n - 2) remaining\
  \ elements is equal to k (that is, it is equal to the mathematic mean of n elements\
  \ of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n\
  5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first\
  \ example, any pair of elements can be removed since all of them are equal.\n\n\
  In the second example, there is no way to delete two elements so the mathematic\
  \ mean doesn't change.\n\nIn the third example, it is possible to delete the elements\
  \ on positions 1 and 3, or the elements on positions 4 and 5.\nA:"
question: "Monocarp has got an array a consisting of n integers. Let's denote k as\
  \ the mathematic mean of these elements (note that it's possible that k is not an\
  \ integer). \n\nThe mathematic mean of an array of n elements is the sum of elements\
  \ divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp\
  \ wants to delete exactly two elements from a so that the mathematic mean of the\
  \ remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the\
  \ number of pairs of positions [i, j] (i < j) such that if the elements on these\
  \ positions are deleted, the mathematic mean of (n - 2) remaining elements is equal\
  \ to k (that is, it is equal to the mathematic mean of n elements of the original\
  \ array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264\
  \ 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains\
  \ one integer n (3 \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number of elements\
  \ in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ...,\
  \ a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\
  \nThe sum of n over all testcases doesn't exceed 2 \u22C5 10^5.\n\nOutput\n\nPrint\
  \ one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if\
  \ the elements on these positions are deleted, the mathematic mean of (n - 2) remaining\
  \ elements is equal to k (that is, it is equal to the mathematic mean of n elements\
  \ of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n\
  5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first\
  \ example, any pair of elements can be removed since all of them are equal.\n\n\
  In the second example, there is no way to delete two elements so the mathematic\
  \ mean doesn't change.\n\nIn the third example, it is possible to delete the elements\
  \ on positions 1 and 3, or the elements on positions 4 and 5."
samples:
- " ```import os\nimport sys\nfrom io import BytesIO, IOBase\n# region fastio\n\n\
  BUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self,\
  \ file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n  \
  \      self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write\
  \ = self.buffer.write if self.writable else None\n\n    def read(self):\n      \
  \  while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\n# ------------------------------\n\nfrom math import factorial\nfrom\
  \ collections import Counter, defaultdict, deque\nfrom heapq import heapify, heappop,\
  \ heappush\n\ndef RL(): return map(int, sys.stdin.readline().rstrip().split())\n\
  def RLL(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef N():\
  \ return int(input())\ndef comb(n, m): return factorial(n) / (factorial(m) * factorial(n\
  \ - m)) if n >= m else 0\ndef perm(n, m): return factorial(n) // (factorial(n -\
  \ m)) if n >= m else 0\ndef mdis(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 -\
  \ y2)\nmod = 998244353\nINF = float('inf')\n\n# ------------------------------\n\
  \ndef main():\n    t = N()\n    for _ in range(t):\n        n = N()\n        a =\
  \ RLL()\n        k = sum(a) / n\n        res = 0\n        for i in range(n):\n \
  \           for j in range(i+1, n):\n                if (a[i] + a[j]) / (n-2) ==\
  \ k:\n                    res += 1\n        print(res)\n\n\n\n\n\n\nif __name__\
  \ == \"__main__\":\n    main()```\nQ:"
- " ``````python\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n# region\
  \ fastio\n\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def\
  \ __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer =\
  \ BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n\
  \        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n\
  \        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n\
  \            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\
  \        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n\
  \        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size,\
  \ BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n         \
  \   ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b),\
  \ self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\
  \n    def flush(self):\n        if self.writable:\n            os.write(self._fd,\
  \ self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\
  \n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer\
  \ = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable\
  \ = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"\
  ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n  \
  \      self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin,\
  \ sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\
  \\r\\n\")\n\n# ------------------------------\n\nfrom math import factorial\nfrom\
  \ collections import Counter, defaultdict, deque\nfrom heapq import heapify, heappop,\
  \ heappush\n\ndef RL(): return map(int, sys.stdin.readline().rstrip().split())\n\
  def RLL(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef N():\
  \ return int(input())\ndef comb(n, m): return factorial(n) / (factorial(m) * factorial(n\
  \ - m)) if n >= m else 0\ndef perm(n, m): return factorial(n) // (factorial(n -\
  \ m)) if n >= m else 0\ndef mdis(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 -\
  \ y2)\nmod = 998244353\nINF = float('inf')\n\n# ------------------------------\n\
  \ndef main():\n    t = N()\n    for _ in range(t):\n        n = N()\n        a =\
  \ RLL()\n        a = [x for x in a if x != k]\n        if len(a) <= 2:\n       \
  \     print(0)\n        else:\n            a.sort()\n            res = 0\n     \
  \       for i in range(1, len(a)-1):\n                if a[i-1] + a[i+1] == 2*k:\n\
  \                    res += 1\n            print(res)\n\n\n\n\n\n\nif __name__ ==\
  \ \"__main__\":\n    main()``````````\nQ:"
test_cases:
  input:
  - '4

    4

    8 8 8 8

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 6 7

    '
  - '1

    3

    228 1337 228

    '
  - '1

    3

    228 1144 228

    '
  - '4

    4

    8 8 8 8

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 2 8

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 0 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    0 2 3 4 0 4 7

    '
  - '4

    4

    8 2 2 8

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 9 8 8

    3

    89 20 10

    5

    1 4 7 5 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    34 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 8 2 8

    3

    50 20 10

    5

    1 4 3 3 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 12 3 5

    7

    0 2 4 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    89 20 10

    5

    1 2 7 5 5

    7

    1 2 3 4 1 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 12 3 5

    7

    0 2 4 4 0 4 0

    '
  - '4

    4

    10 8 13 5

    3

    50 25 6

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 1 13 14

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 8 7

    '
  - '4

    4

    8 8 8 8

    3

    83 18 1

    5

    1 2 7 3 5

    7

    0 2 3 4 5 4 10

    '
  - '4

    4

    8 8 8 1

    3

    83 18 1

    5

    1 0 7 3 5

    7

    0 2 3 4 5 4 10

    '
  - '4

    4

    8 8 8 8

    3

    116 20 10

    5

    1 2 7 5 5

    7

    2 2 3 7 1 4 9

    '
  - '4

    4

    8 8 0 8

    3

    222 20 10

    5

    1 2 7 0 5

    7

    2 2 3 7 1 4 9

    '
  - '4

    4

    8 8 0 8

    3

    222 20 6

    5

    1 2 7 0 5

    7

    0 2 3 7 1 4 9

    '
  - '4

    4

    8 2 2 8

    3

    50 20 10

    5

    1 4 7 0 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 8 13 5

    3

    50 28 6

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 5 8

    3

    50 25 3

    5

    1 4 12 3 5

    7

    0 2 4 4 0 4 0

    '
  - '4

    4

    8 8 8 8

    3

    116 20 10

    5

    1 2 7 5 5

    7

    4 2 3 7 1 4 7

    '
  - '4

    4

    5 8 11 8

    3

    9 24 10

    5

    1 4 2 3 5

    7

    0 2 3 3 5 8 20

    '
  - '4

    4

    5 8 5 8

    3

    9 34 10

    5

    1 4 4 3 5

    7

    0 2 3 3 5 8 20

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    0 2 3 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '1

    1

    228 1337 228

    '
  - '4

    4

    8 8 8 8

    3

    89 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    1 4 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 4 4 0 4 7

    '
  - '4

    4

    8 8 8 14

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '1

    1

    228 1337 3

    '
  - '4

    4

    8 8 8 8

    3

    89 20 10

    5

    1 4 7 5 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    0 2 6 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 12 3 5

    7

    -1 2 4 4 0 4 7

    '
  - '4

    4

    8 8 8 14

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    228 1512 3

    '
  - '4

    4

    8 2 2 11

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 7 3 5

    7

    0 2 3 8 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    0 4 7 3 5

    7

    0 2 6 4 0 4 7

    '
  - '4

    4

    8 8 12 14

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    228 2063 3

    '
  - '4

    4

    8 9 15 8

    3

    89 20 10

    5

    1 4 7 5 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 6 3 5

    7

    0 2 3 8 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    0 4 7 3 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 12 14

    3

    44 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    228 2063 2

    '
  - '4

    4

    8 9 24 8

    3

    89 20 10

    5

    1 4 7 5 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 6 3 5

    7

    0 2 3 8 6 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 18 14

    3

    44 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 1 0 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 6 3 5

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 0 3 5

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 0 3 5

    7

    -1 2 3 8 9 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 40 1

    5

    0 4 0 3 5

    7

    -1 2 3 8 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 4 0 3 5

    7

    -1 2 3 8 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 4 0 3 5

    7

    -1 2 3 12 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 8 0 3 5

    7

    -1 2 3 12 9 4 7

    '
  - '1

    3

    228 1337 127

    '
  - '1

    3

    40 1144 228

    '
  - '4

    4

    8 8 8 8

    3

    50 20 10

    5

    1 4 12 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    9 25 10

    5

    1 4 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 3 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 7 3 9

    7

    -1 2 3 4 0 0 7

    '
  - '1

    1

    148 1337 228

    '
  - '4

    4

    8 8 8 8

    3

    89 20 10

    5

    0 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 18 1

    5

    1 4 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    1 4 12 3 5

    7

    0 2 3 4 0 4 7

    '
  - '4

    4

    8 8 4 14

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '4

    4

    8 0 2 8

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 3 4 5 6 7

    '
  - '4

    4

    8 8 8 8

    3

    89 20 10

    5

    1 4 7 5 5

    7

    1 2 3 4 1 4 7

    '
  - '4

    4

    8 8 8 14

    3

    50 25 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 1 -1 7

    '
  - '1

    1

    342 1512 3

    '
  - '4

    4

    8 2 2 11

    3

    50 20 10

    5

    1 4 7 3 5

    7

    1 2 0 4 5 6 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    0 4 7 3 5

    7

    0 2 6 4 1 4 7

    '
  - '4

    4

    8 8 12 14

    3

    50 25 9

    5

    1 4 7 3 5

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    228 2063 0

    '
  - '4

    4

    8 9 15 8

    3

    89 20 10

    5

    1 4 7 5 5

    7

    1 2 3 2 5 4 7

    '
  - '4

    4

    8 8 8 9

    3

    50 25 1

    5

    0 4 6 3 5

    7

    0 2 3 8 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    0 4 7 3 5

    7

    0 2 -1 4 0 4 7

    '
  - '4

    4

    8 8 12 14

    3

    44 25 10

    5

    1 4 7 5 5

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    228 4021 2

    '
  - '4

    4

    8 9 24 8

    3

    89 20 10

    5

    1 8 7 5 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 3 6 3 5

    7

    0 2 3 8 6 4 7

    '
  - '4

    4

    8 8 13 5

    3

    50 25 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 6 3 5

    7

    0 2 3 14 9 4 7

    '
  - '4

    4

    8 1 13 8

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 0 6 5

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 0 3 5

    7

    -1 2 3 8 9 3 7

    '
  - '4

    4

    8 8 8 8

    3

    50 40 1

    5

    0 4 0 5 5

    7

    -1 2 3 8 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 4 0 0 5

    7

    -1 2 3 8 9 4 7

    '
  - '1

    3

    228 1337 103

    '
  - '1

    3

    40 270 228

    '
  - '4

    4

    8 8 8 9

    3

    50 20 10

    5

    1 4 12 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    5 8 8 8

    3

    9 25 10

    5

    1 4 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    2 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 7

    5

    1 4 3 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '1

    1

    148 1337 44

    '
  - '4

    4

    8 8 2 8

    3

    50 20 10

    5

    1 4 3 3 5

    7

    1 4 3 4 5 6 7

    '
  - '4

    4

    6 8 8 8

    3

    89 20 10

    5

    0 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 18 1

    5

    1 2 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    1 4 12 3 5

    7

    -1 2 3 4 0 4 7

    '
  - '4

    4

    8 8 4 14

    3

    50 37 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 10

    5

    1 4 12 3 5

    7

    0 2 4 4 0 4 3

    '
  - '4

    4

    8 8 13 8

    3

    50 25 10

    5

    0 4 8 3 5

    7

    0 2 6 4 1 4 7

    '
  - '4

    4

    8 9 15 8

    3

    89 20 10

    5

    0 4 7 5 5

    7

    1 2 3 2 5 4 7

    '
  - '4

    4

    8 8 8 9

    3

    50 25 1

    5

    0 4 6 3 5

    7

    0 2 3 8 5 6 7

    '
  - '4

    4

    8 8 12 14

    3

    44 25 10

    5

    1 4 7 5 8

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    228 4021 1

    '
  - '4

    4

    8 8 13 5

    3

    50 25 6

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 1 13 14

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 1

    5

    0 4 0 6 7

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 2

    5

    0 4 0 3 5

    7

    -1 2 3 8 9 3 7

    '
  - '4

    4

    8 3 8 8

    3

    50 40 1

    5

    0 4 0 5 5

    7

    -1 2 3 8 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 4 0 0 5

    7

    -1 2 3 0 9 4 7

    '
  - '1

    3

    382 1337 103

    '
  - '4

    4

    8 8 8 9

    3

    50 20 8

    5

    1 4 12 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    5 8 8 8

    3

    9 25 10

    5

    1 4 11 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 14 8

    3

    2 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 7

    5

    1 4 3 3 5

    7

    -1 2 3 4 0 1 7

    '
  - '1

    1

    148 1337 74

    '
  - '4

    4

    8 15 2 8

    3

    50 20 10

    5

    1 4 3 3 5

    7

    1 4 3 4 5 6 7

    '
  - '4

    4

    12 8 8 8

    3

    89 20 10

    5

    0 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    83 18 1

    5

    1 2 7 3 5

    7

    0 2 3 4 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    50 46 10

    5

    1 4 12 3 5

    7

    -1 2 3 4 0 4 7

    '
  - '4

    4

    8 8 4 14

    3

    50 53 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '4

    4

    8 8 8 8

    3

    116 20 10

    5

    1 2 7 5 5

    7

    1 2 3 4 1 4 7

    '
  - '4

    4

    8 8 9 8

    3

    50 25 10

    5

    0 4 8 3 5

    7

    0 2 6 4 1 4 7

    '
  - '4

    4

    8 9 15 8

    3

    89 20 10

    5

    0 4 7 5 5

    7

    1 2 3 2 5 3 7

    '
  - '4

    4

    8 8 12 14

    3

    44 25 3

    5

    1 4 7 5 8

    7

    -1 2 3 4 1 0 7

    '
  - '1

    1

    298 4021 1

    '
  - '4

    4

    8 8 8 8

    3

    93 25 1

    5

    0 4 0 6 7

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 2

    5

    0 4 0 3 10

    7

    -1 2 3 8 9 3 7

    '
  - '4

    4

    8 3 8 8

    3

    50 40 1

    5

    0 4 0 5 5

    7

    -1 2 4 8 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 4 0 0 5

    7

    -1 1 3 0 9 4 7

    '
  - '1

    3

    232 1337 103

    '
  - '4

    4

    8 8 8 9

    3

    50 20 15

    5

    1 4 12 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    5 8 8 8

    3

    9 25 10

    5

    1 4 11 3 5

    7

    0 2 3 4 5 4 11

    '
  - '4

    4

    8 8 14 8

    3

    2 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 8 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 7

    5

    1 4 3 3 5

    7

    -1 2 3 8 0 1 7

    '
  - '1

    1

    148 1337 93

    '
  - '4

    4

    8 15 2 8

    3

    50 20 10

    5

    1 4 3 3 5

    7

    1 4 3 4 5 6 5

    '
  - '4

    4

    12 8 8 8

    3

    130 20 10

    5

    0 4 7 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    8 8 13 8

    3

    38 46 10

    5

    1 4 12 3 5

    7

    -1 2 3 4 0 4 7

    '
  - '4

    4

    8 8 4 28

    3

    50 53 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 7

    '
  - '4

    4

    8 8 8 8

    3

    116 20 10

    5

    1 2 7 5 5

    7

    1 2 3 7 1 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 3

    5

    1 4 12 3 5

    7

    0 2 4 4 0 4 0

    '
  - '4

    4

    8 8 9 8

    3

    50 25 19

    5

    0 4 8 3 5

    7

    0 2 6 4 1 4 7

    '
  - '4

    4

    8 9 15 8

    3

    89 20 18

    5

    0 4 7 5 5

    7

    1 2 3 2 5 3 7

    '
  - '4

    4

    8 8 12 14

    3

    44 2 3

    5

    1 4 7 5 8

    7

    -1 2 3 4 1 0 7

    '
  - '4

    4

    10 8 13 5

    3

    50 29 6

    5

    0 4 7 2 5

    7

    0 2 0 4 0 4 7

    '
  - '4

    4

    8 1 17 14

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 8 7

    '
  - '4

    4

    8 8 8 8

    3

    141 25 1

    5

    0 4 0 6 7

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 12 8

    3

    50 25 2

    5

    0 4 0 3 10

    7

    -1 2 3 8 9 3 7

    '
  - '4

    4

    8 3 8 8

    3

    50 40 1

    5

    0 4 0 10 5

    7

    -1 2 4 8 9 4 7

    '
  - '4

    4

    8 8 7 8

    3

    50 40 1

    5

    0 4 0 0 0

    7

    -1 1 3 0 9 4 7

    '
  - '1

    3

    232 1055 103

    '
  - '4

    4

    8 8 8 9

    3

    50 20 7

    5

    1 4 12 3 5

    7

    1 2 3 4 5 4 7

    '
  - '4

    4

    5 8 8 8

    3

    9 25 10

    5

    1 4 11 3 5

    7

    0 2 3 4 5 4 20

    '
  - '4

    4

    8 8 14 16

    3

    2 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 8 7

    '
  - '4

    4

    8 8 11 8

    3

    50 25 7

    5

    1 4 3 3 5

    7

    -1 2 3 8 0 1 7

    '
  - '1

    1

    148 141 93

    '
  - '4

    4

    8 15 2 8

    3

    50 20 10

    5

    1 4 3 3 5

    7

    1 4 3 4 7 6 5

    '
  - '4

    4

    12 8 8 8

    3

    130 20 10

    5

    0 4 7 3 5

    7

    1 2 0 4 5 4 7

    '
  - '4

    4

    8 8 8 8

    3

    83 18 1

    5

    1 0 7 3 5

    7

    0 2 3 4 5 4 10

    '
  - '4

    4

    8 8 13 8

    3

    38 46 4

    5

    1 4 12 3 5

    7

    -1 2 3 4 0 4 7

    '
  - '4

    4

    8 8 4 28

    3

    50 53 10

    5

    1 4 7 3 5

    7

    -1 2 3 4 0 0 5

    '
  - '4

    4

    8 8 8 8

    3

    116 20 10

    5

    1 2 7 5 5

    7

    2 2 3 7 1 4 7

    '
  - '4

    4

    8 8 8 8

    3

    50 25 3

    5

    1 4 12 3 5

    7

    0 2 4 4 1 4 0

    '
  - '4

    4

    8 8 9 8

    3

    50 25 19

    5

    0 4 8 3 5

    7

    0 2 7 4 1 4 7

    '
  - '4

    4

    8 9 15 8

    3

    89 20 18

    5

    0 4 7 5 7

    7

    1 2 3 2 5 3 7

    '
  - '4

    4

    8 8 12 14

    3

    44 2 5

    5

    1 4 7 5 8

    7

    -1 2 3 4 1 0 7

    '
  - '4

    4

    6 1 17 14

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 8 7

    '
  - '4

    4

    8 8 8 8

    3

    233 25 1

    5

    0 4 0 6 7

    7

    0 2 3 8 9 4 7

    '
  - '4

    4

    8 8 12 8

    3

    50 25 2

    5

    0 4 0 3 10

    7

    -1 2 3 11 9 3 7

    '
  - '1

    3

    232 1055 22

    '
  - '4

    4

    8 8 8 9

    3

    50 20 7

    5

    1 4 12 3 5

    7

    1 2 3 4 5 5 7

    '
  - '4

    4

    5 8 8 8

    3

    9 25 10

    5

    1 4 11 3 5

    7

    0 2 3 4 5 8 20

    '
  - '4

    4

    8 8 14 16

    3

    4 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 8 7

    '
  - '4

    4

    8 15 2 8

    3

    50 37 10

    5

    1 4 3 3 5

    7

    1 4 3 4 7 6 5

    '
  - '4

    4

    12 8 8 8

    3

    130 20 10

    5

    0 4 7 3 5

    7

    1 2 0 4 1 4 7

    '
  - '4

    4

    8 8 13 0

    3

    38 46 4

    5

    1 4 12 3 5

    7

    -1 2 3 4 0 4 7

    '
  - '4

    4

    8 8 6 8

    3

    50 25 3

    5

    1 4 12 3 5

    7

    0 2 4 4 1 4 0

    '
  - '4

    4

    8 8 9 8

    3

    50 25 19

    5

    0 4 8 6 5

    7

    0 2 7 4 1 4 7

    '
  - '4

    4

    8 9 15 8

    3

    89 20 18

    5

    0 4 7 5 7

    7

    1 2 3 2 5 6 7

    '
  - '4

    4

    8 8 12 14

    3

    44 2 5

    5

    0 4 7 5 8

    7

    -1 2 3 4 1 0 7

    '
  - '4

    4

    6 1 24 14

    3

    50 45 10

    5

    0 4 7 2 5

    7

    0 2 0 4 0 8 7

    '
  - '4

    4

    8 8 12 8

    3

    50 25 2

    5

    0 4 0 3 10

    7

    -1 2 3 11 7 3 7

    '
  - '1

    3

    232 461 22

    '
  - '4

    4

    8 8 8 9

    3

    50 20 7

    5

    1 4 12 3 5

    7

    1 2 3 4 1 5 7

    '
  - '4

    4

    5 8 8 8

    3

    9 25 10

    5

    1 4 4 3 5

    7

    0 2 3 4 5 8 20

    '
  - '4

    4

    8 8 14 28

    3

    4 25 10

    5

    1 4 7 3 5

    7

    0 2 3 6 0 8 7

    '
  - '4

    4

    8 15 2 12

    3

    50 37 10

    5

    1 4 3 3 5

    7

    1 4 3 4 7 6 5

    '
  output:
  - '6

    0

    2

    3

    '
  - '0

    '
  - '0

    '
  - '6

    0

    2

    0

    '
  - '0

    0

    2

    3

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '4

    0

    2

    3

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    2

    3

    '
  - '0

    0

    0

    3

    '
  - '6

    0

    0

    3

    '
  - '6

    0

    1

    0

    '
  - '6

    0

    0

    9

    '
  - '2

    0

    0

    0

    '
  - '0

    0

    0

    1

    '
  - '6

    0

    0

    2

    '
  - '0

    0

    0

    2

    '
  - '6

    0

    1

    1

    '
  - '0

    0

    1

    1

    '
  - '0

    0

    1

    0

    '
  - '4

    0

    0

    3

    '
  - '0

    1

    0

    0

    '
  - '0

    0

    0

    9

    '
  - '6

    0

    1

    3

    '
  - '2

    0

    2

    0

    '
  - '4

    0

    0

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    '
  - '0

    0

    2

    3

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    2

    3

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    1

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '6

    0

    0

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    3

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    1

    0

    '
  - '6

    0

    0

    9

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '2

    0

    0

    0

    '
  - '0

    0

    0

    1

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '6

    0

    0

    2

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '6

    0

    1

    0

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    1

    '
  - '6

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    1

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    1

    '
  - '0

    0

    0

    0

    '
  - '0

    '
  - '0

    0

    0

    0

    '
  - '0

    0

    0

    1

    '
  - '0

    0

    2

    0

    '
  - '0

    0

    0

    0

    '
timeout: 2.0
