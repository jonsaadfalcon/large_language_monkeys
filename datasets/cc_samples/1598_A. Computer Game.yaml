prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nGiven an undirected\
  \ tree, let the distance between vertices u and v be the number of edges on the\
  \ simple path from u to v. The diameter of a tree is the maximum among the distances\
  \ between any two vertices. We will call a tree good if and only if its diameter\
  \ is at most K.\n\nYou are given an undirected tree with N vertices numbered 1 through\
  \ N. For each i (1\u2266i\u2266N-1), there is an edge connecting vertices A_i and\
  \ B_i.\n\nYou want to remove zero or more vertices from the tree, so that the resulting\
  \ tree is good. When a vertex is removed, all incident edges will also be removed.\
  \ The resulting graph must be connected.\n\nFind the minimum number of vertices\
  \ that you need to remove in order to produce a good tree.\n\nConstraints\n\n* 2\u2266\
  N\u22662000\n* 1\u2266K\u2266N-1\n* 1\u2266A_i\u2266N, 1\u2266B_i\u2266N\n* The\
  \ graph defined by A_i and B_i is a tree.\n\nInput\n\nThe input is given from Standard\
  \ Input in the following format:\n\n\nN K\nA_1 B_1\nA_2 B_2\n:\nA_{N-1} B_{N-1}\n\
  \n\nOutput\n\nPrint the minimum number of vertices that you need to remove in order\
  \ to produce a good tree.\n\nExamples\n\nInput\n\n6 2\n1 2\n3 2\n4 2\n1 6\n5 6\n\
  \n\nOutput\n\n2\n\n\nInput\n\n6 5\n1 2\n3 2\n4 2\n1 6\n5 6\n\n\nOutput\n\n0\nA:\
  \ ```import sys\ninput = sys.stdin.readline\nn,k = map(int,input().split())\nab\
  \ = [list(map(int,input().split())) for i in range(n-1)]\ngraph = [[] for i in range(n+1)]\n\
  for a,b in ab:\n  graph[a].append(b)\n  graph[b].append(a)\nans = n\nrad = k//2\n\
  for center in range(1,n+1):\n  stack = [center]\n  dep = [[-1,-1] for _ in range(n+1)]\n\
  \  dep[center] = [0,0]\n  while stack:\n    x = stack.pop()\n    for i,y in enumerate(graph[x]):\n\
  \      if x == center:\n        dep[y] = [1,i+1]\n        stack.append(y)\n    \
  \  else:\n        if dep[y][0] == -1:\n          stack.append(y)\n          dep[y][0]\
  \ = dep[x][0]+1\n          dep[y][1] = dep[x][1]\n  anstmp = 0\n  bonus = [0]*(len(graph[center])+1)\n\
  \  for i in range(1,n+1):\n    if dep[i][0] <= rad:\n      anstmp += 1\n    if dep[i][0]\
  \ == rad+1:\n      bonus[dep[i][1]] += 1\n  if k%2:\n    anstmp += max(bonus)\n\
  \  ans = min(n-anstmp,ans)\nprint(max(ans,0))```\nQ: Write python code to solve\
  \ the following coding problem that obeys the constraints and passes the example\
  \ test cases. The output code needs to read from and write to standard IO. Please\
  \ wrap your code answer using ```:\nRun, Twins\n\nE869120 You started running from\
  \ home to school at a speed of $ P $ meters per minute.\n\nsquare1001 noticed E869120's\
  \ forgotten thing $ A $ minutes after E869120 left home and chased at $ Q $ meters\
  \ per minute.\n\nThen E869120 noticed something left behind $ B $ minutes after\
  \ E869120 left home and turned back at $ R $ meters per minute.\n\nE869120 How many\
  \ minutes after you leave home will the twins meet?\n\nHowever, E869120 and square1001\
  \ will not meet by $ B $ minutes.\n\nAlso, assume that there is only one road from\
  \ E869120 and square1001's house to school, and there are no shortcuts or alternatives.\n\
  \ninput\n\nInput is given from standard input in the following format.\n\n\n$ A\
  \ $ $ B $\n$ P $ $ Q $ $ R $\n\n\noutput\n\nOutput the time from when E869120 left\
  \ home to when E869120 and square1001 meet.\n\nHowever, insert a line break at the\
  \ end.\n\nIf the absolute error or relative error from the assumed answer is within\
  \ $ 10 ^ {-3} $, it will be treated as a correct answer.\n\nConstraint\n\n* $ 1\
  \ \\ leq A \\ leq B \\ leq 100 $\n* $ 1 \\ leq Q \\ leq P \\ leq 100 $\n* $ 1 \\\
  \ leq R \\ leq 100 $\n* All inputs are integers.\n\n\n\nInput example 1\n\n\n14\
  \ 86\n9 1 20\n\n\nOutput example 1\n\n\n119.428571428571\n\n\nInput example 2\n\n\
  \n14\n15 9 2\n\n\nOutput example 2\n\n\n7.000000000000\n\n\nInput example 3\n\n\n\
  67 87\n7 4 51\n\n\nOutput example 3\n\n\n96.618181818182\n\n\n\n\n\n\nExample\n\n\
  Input\n\n14 86\n9 1 20\n\n\nOutput\n\n119.428571428571\nA: ```a,b = map(int,input().split())\n\
  p,q,r = map(int,input().split())\nprint((b*p+b*r+a*q)/(r+q))```\nQ: Write python\
  \ code to solve the following coding problem that obeys the constraints and passes\
  \ the example test cases. The output code needs to read from and write to standard\
  \ IO. Please wrap your code answer using ```:\nMonocarp is playing a computer game.\
  \ Now he wants to complete the first level of this game.\n\nA level is a rectangular\
  \ grid of 2 rows and n columns. Monocarp controls a character, which starts in cell\
  \ (1, 1) \u2014 at the intersection of the 1-st row and the 1-st column.\n\nMonocarp's\
  \ character can move from one cell to another in one step if the cells are adjacent\
  \ by side and/or corner. Formally, it is possible to move from cell (x_1, y_1) to\
  \ cell (x_2, y_2) in one step if |x_1 - x_2| \u2264 1 and |y_1 - y_2| \u2264 1.\
  \ Obviously, it is prohibited to go outside the grid.\n\nThere are traps in some\
  \ cells. If Monocarp's character finds himself in such a cell, he dies, and the\
  \ game ends.\n\nTo complete a level, Monocarp's character should reach cell (2,\
  \ n) \u2014 at the intersection of row 2 and column n.\n\nHelp Monocarp determine\
  \ if it is possible to complete the level.\n\nInput\n\nThe first line contains a\
  \ single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then\
  \ the test cases follow. Each test case consists of three lines.\n\nThe first line\
  \ contains a single integer n (3 \u2264 n \u2264 100) \u2014 the number of columns.\n\
  \nThe next two lines describe the level. The i-th of these lines describes the i-th\
  \ line of the level \u2014 the line consists of the characters '0' and '1'. The\
  \ character '0' corresponds to a safe cell, the character '1' corresponds to a trap\
  \ cell.\n\nAdditional constraint on the input: cells (1, 1) and (2, n) are safe.\n\
  \nOutput\n\nFor each test case, output YES if it is possible to complete the level,\
  \ and NO otherwise.\n\nExample\n\nInput\n\n\n4\n3\n000\n000\n4\n0011\n1100\n4\n\
  0111\n1110\n6\n010101\n101010\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\n\nNote\n\nConsider\
  \ the example from the statement.\n\nIn the first test case, one of the possible\
  \ paths is (1, 1) \u2192 (2, 2) \u2192 (2, 3).\n\nIn the second test case, one of\
  \ the possible paths is (1, 1) \u2192 (1, 2) \u2192 (2, 3) \u2192 (2, 4).\n\nIn\
  \ the fourth test case, one of the possible paths is (1, 1) \u2192 (2, 2) \u2192\
  \ (1, 3) \u2192 (2, 4) \u2192 (1, 5) \u2192 (2, 6).\nA:"
question: "Monocarp is playing a computer game. Now he wants to complete the first\
  \ level of this game.\n\nA level is a rectangular grid of 2 rows and n columns.\
  \ Monocarp controls a character, which starts in cell (1, 1) \u2014 at the intersection\
  \ of the 1-st row and the 1-st column.\n\nMonocarp's character can move from one\
  \ cell to another in one step if the cells are adjacent by side and/or corner. Formally,\
  \ it is possible to move from cell (x_1, y_1) to cell (x_2, y_2) in one step if\
  \ |x_1 - x_2| \u2264 1 and |y_1 - y_2| \u2264 1. Obviously, it is prohibited to\
  \ go outside the grid.\n\nThere are traps in some cells. If Monocarp's character\
  \ finds himself in such a cell, he dies, and the game ends.\n\nTo complete a level,\
  \ Monocarp's character should reach cell (2, n) \u2014 at the intersection of row\
  \ 2 and column n.\n\nHelp Monocarp determine if it is possible to complete the level.\n\
  \nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014\
  \ the number of test cases. Then the test cases follow. Each test case consists\
  \ of three lines.\n\nThe first line contains a single integer n (3 \u2264 n \u2264\
  \ 100) \u2014 the number of columns.\n\nThe next two lines describe the level. The\
  \ i-th of these lines describes the i-th line of the level \u2014 the line consists\
  \ of the characters '0' and '1'. The character '0' corresponds to a safe cell, the\
  \ character '1' corresponds to a trap cell.\n\nAdditional constraint on the input:\
  \ cells (1, 1) and (2, n) are safe.\n\nOutput\n\nFor each test case, output YES\
  \ if it is possible to complete the level, and NO otherwise.\n\nExample\n\nInput\n\
  \n\n4\n3\n000\n000\n4\n0011\n1100\n4\n0111\n1110\n6\n010101\n101010\n\n\nOutput\n\
  \n\nYES\nYES\nNO\nYES\n\nNote\n\nConsider the example from the statement.\n\nIn\
  \ the first test case, one of the possible paths is (1, 1) \u2192 (2, 2) \u2192\
  \ (2, 3).\n\nIn the second test case, one of the possible paths is (1, 1) \u2192\
  \ (1, 2) \u2192 (2, 3) \u2192 (2, 4).\n\nIn the fourth test case, one of the possible\
  \ paths is (1, 1) \u2192 (2, 2) \u2192 (1, 3) \u2192 (2, 4) \u2192 (1, 5) \u2192\
  \ (2, 6)."
samples:
- " ```t = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = [list(input())\
  \ for _ in range(2)]\n    for i in range(2):\n        for j in range(n):\n     \
  \       if grid[i][j] == '1':\n                grid[i][j] = -1\n    for i in range(2):\n\
  \        if grid[i][0] == -1:\n            print('NO')\n            break\n    for\
  \ i in range(1, n):\n        if grid[0][i-1] == -1 and grid[0][i] == -1:\n     \
  \       print('NO')\n            break\n    for i in range(1, n):\n        if grid[1][i-1]\
  \ == -1 and grid[1][i] == -1:\n            print('NO')\n            break\n    else:\n\
  \        print('YES')```  # 1\nQ:"
- " ```t = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = [list(input())\
  \ for _ in range(2)]\n    for i in range(2):\n        for j in range(n):\n     \
  \       if grid[i][j] == '1':\n                grid[i][j] = 'X'\n    queue = [(1,\
  \ 1)]\n    visited = {(1, 1)}\n    while queue:\n        x, y = queue.pop(0)\n \
  \       if x == 2 and y == n:\n            print('YES')\n            break\n   \
  \     for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x\
  \ + dx, y + dy\n            if 1 <= nx <= 2 and 1 <= ny <= n and (nx, ny) not in\
  \ visited and grid[nx-1][ny-1] != 'X':\n                queue.append((nx, ny))\n\
  \                visited.add((nx, ny))\n        else:\n            print('NO')````\n\
  Q:"
test_cases:
  input:
  - '4

    3

    000

    000

    4

    0011

    1100

    4

    0111

    1110

    6

    010101

    101010

    '
  - '1

    9

    000000010

    000000000

    '
  - '1

    9

    000000010

    000100000

    '
  - '1

    60

    000000000000000000000000000000000000000000000000000000000010

    000000000000000000000000000000000000000000000000000000000010

    '
  - '1

    9

    000010010

    000100000

    '
  - '1

    60

    000000000000000000000000000000000000000010000000000000000010

    000000000000000000000000000000000000000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    1100

    4

    0111

    0110

    6

    010101

    101010

    '
  - '4

    3

    000

    000

    4

    0011

    1100

    4

    0111

    0110

    6

    010111

    101010

    '
  - '4

    3

    010

    010

    4

    0011

    0100

    4

    1111

    0110

    6

    010100

    101010

    '
  - '4

    3

    000

    000

    4

    0111

    0100

    4

    0011

    1110

    6

    010101

    101110

    '
  - '4

    3

    010

    010

    4

    0011

    0100

    4

    1111

    0110

    6

    010110

    101010

    '
  - '4

    3

    000

    010

    4

    0011

    1110

    4

    0111

    1110

    6

    010100

    100010

    '
  - '4

    3

    000

    000

    4

    0111

    0100

    4

    0011

    1100

    6

    010101

    101110

    '
  - '4

    3

    010

    010

    4

    0111

    0100

    4

    1101

    0110

    6

    010110

    101010

    '
  - '1

    9

    001010010

    000100000

    '
  - '1

    9

    001010010

    000100010

    '
  - '1

    9

    001010010

    000110010

    '
  - '1

    9

    001110010

    000110010

    '
  - '1

    9

    001110010

    000010010

    '
  - '1

    9

    101110010

    000010010

    '
  - '1

    9

    101110000

    000010010

    '
  - '1

    9

    000000011

    000000000

    '
  - '1

    9

    000000000

    000000000

    '
  - '1

    60

    000000000000000000000000000000000000000000000000000000000010

    000000000000000000000000001000000000000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    1100

    4

    0111

    1110

    6

    010101

    101110

    '
  - '1

    9

    000011010

    000100000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    0111

    0110

    6

    010111

    101010

    '
  - '1

    9

    001010010

    100100010

    '
  - '1

    9

    001010010

    000110011

    '
  - '1

    9

    001110010

    000110000

    '
  - '1

    9

    101110010

    100010010

    '
  - '1

    9

    111110000

    000010010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000010

    000000000000000000000000001000000000000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    0111

    1110

    6

    010101

    101110

    '
  - '1

    9

    010011010

    000100000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1111

    0110

    6

    010111

    101010

    '
  - '1

    9

    001010010

    101100010

    '
  - '1

    9

    001100010

    000110000

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000010

    000000000000000000000000011000000000000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    0011

    1110

    6

    010101

    101110

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1111

    0110

    6

    010101

    101010

    '
  - '1

    9

    101010010

    101100010

    '
  - '1

    9

    001111010

    000110000

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000000000000000011000000000000000000000000000000010

    '
  - '4

    3

    010

    000

    4

    0011

    0100

    4

    1111

    0110

    6

    010101

    101010

    '
  - '1

    9

    111010010

    101100010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000000000000000011000000000000000000000000000100010

    '
  - '4

    3

    010

    000

    4

    0011

    0100

    4

    1111

    0110

    6

    010100

    101010

    '
  - '1

    9

    001000010

    000000000

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000000000010

    000000000000000000000000000000000000000000000000000000000010

    '
  - '4

    3

    000

    010

    4

    0011

    1100

    4

    0111

    1110

    6

    010101

    101010

    '
  - '1

    7

    000010010

    000100000

    '
  - '1

    60

    000000000000000000000000000000000000000010000000000000001010

    000000000000000000000000000000000000000000000000000000000010

    '
  - '1

    9

    001010010

    000111010

    '
  - '1

    9

    101110010

    100010000

    '
  - '1

    9

    000100011

    000000000

    '
  - '1

    9

    001010010

    100110010

    '
  - '1

    9

    011010010

    000110011

    '
  - '1

    9

    001110011

    000110000

    '
  - '1

    9

    111110000

    000010011

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    0111

    1110

    6

    000101

    101110

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    0110

    6

    010111

    101010

    '
  - '1

    9

    001010110

    101100010

    '
  - '1

    9

    001100011

    000110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    0011

    1110

    6

    010001

    101110

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    0110

    6

    010101

    101010

    '
  - '1

    9

    101010000

    101100010

    '
  - '1

    9

    011111010

    000110000

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000000000000000011000000000000000000000000010000010

    '
  - '1

    9

    111010010

    111100010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000000000000000011000000010000000000000000000100010

    '
  - '4

    3

    010

    000

    4

    0001

    0100

    4

    1111

    0110

    6

    010100

    101010

    '
  - '1

    9

    001010010

    000000000

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000000000010

    000000000000000000000000000000000000000000000000000000000110

    '
  - '1

    60

    000000000000000000010000000000000000000010000000000000001010

    000000000000000000000000000000000000000000000000000000000010

    '
  - '1

    9

    001010010

    100111010

    '
  - '1

    9

    101110010

    101010000

    '
  - '1

    9

    000100011

    000010000

    '
  - '1

    9

    011010010

    000110111

    '
  - '1

    9

    001010010

    000110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    1110

    6

    010111

    101010

    '
  - '1

    9

    001010110

    111100010

    '
  - '1

    9

    001100001

    000110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    0110

    6

    000101

    101010

    '
  - '1

    9

    101010000

    101100110

    '
  - '1

    9

    011111110

    000110000

    '
  - '1

    60

    000000000000000000000010000000000010000000000000000000000000

    000000000000000000000000011000000000000000000000000010000010

    '
  - '1

    9

    111010010

    011100010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000000000000000011000000010000000000000000000110010

    '
  - '1

    9

    011010010

    000000000

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000000000010

    000000000000001000000000000000000000000000000000000000000110

    '
  - '1

    60

    000000000000000000010000000000000000000010000000000000001010

    000000000000000000000000000000000000000000000000000000001010

    '
  - '1

    9

    101010010

    100111010

    '
  - '1

    9

    111110010

    101010000

    '
  - '1

    9

    000100011

    010010000

    '
  - '1

    9

    001010010

    000111000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    1110

    6

    010111

    111010

    '
  - '1

    9

    001010110

    101100000

    '
  - '1

    9

    001100001

    001110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    0110

    6

    001101

    101010

    '
  - '1

    8

    101010000

    101100110

    '
  - '1

    9

    011111110

    000110001

    '
  - '1

    60

    000000000000000000000010000000000010000000000000000000000000

    000000000000000000000000011000000000000000000000000010000110

    '
  - '1

    9

    111010010

    001100010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000010000000000011000000010000000000000000000110010

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000000000010

    000000000000001000000000010000000000000000000000000000000110

    '
  - '1

    9

    101110010

    100111010

    '
  - '1

    9

    111111010

    101010000

    '
  - '1

    9

    000100011

    010010010

    '
  - '1

    9

    001000010

    000111010

    '
  - '1

    9

    001010110

    111100000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1010

    0110

    6

    001101

    101010

    '
  - '1

    8

    101010000

    001100110

    '
  - '1

    60

    000000000000000000000010000000000010000000000000000000000000

    000000000010000000000000011000000000000000000000000010000110

    '
  - '1

    60

    100000000000000000000000000000000010000000000000000000000000

    000000000000010000000000011000000010000000000000000000110010

    '
  - '1

    9

    001010110

    111000000

    '
  - '1

    8

    101010100

    001100110

    '
  - '1

    60

    100000000000000000000000000000000010000000000000100000000000

    000000000000010000000000011000000010000000000000000000110010

    '
  - '1

    9

    001010110

    111000001

    '
  - '1

    8

    101010100

    001100010

    '
  - '1

    60

    100000000000000000000000000000000010000000000000100000000001

    000000000000010000000000011000000010000000000000000000110010

    '
  - '1

    8

    101010100

    001100011

    '
  - '1

    9

    000000000

    001000000

    '
  - '1

    9

    000000010

    100100000

    '
  - '1

    60

    000000000000000000000000000000000000000000000000000000000010

    000000000000010000000000000000000000000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    1100

    4

    0111

    1110

    6

    010101

    001010

    '
  - '1

    9

    000010010

    000100100

    '
  - '1

    60

    000000000000000000000000000000000000000010000000000000000010

    000000000000000000100000000000000000000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    1000

    4

    0111

    0110

    6

    010101

    101010

    '
  - '1

    9

    001110010

    000100000

    '
  - '1

    9

    001110010

    000111010

    '
  - '1

    9

    001110010

    100110010

    '
  - '1

    9

    011110010

    000010010

    '
  - '1

    9

    101110010

    000110010

    '
  - '1

    9

    101110000

    100010010

    '
  - '1

    9

    000100000

    000000000

    '
  - '1

    60

    000000000000000001000000000000000000000000000000000000000010

    000000000000000000000000001000000000000000000000000000000010

    '
  - '4

    3

    001

    000

    4

    0011

    0100

    4

    0111

    0110

    6

    010111

    101010

    '
  - '1

    9

    001110010

    000010000

    '
  - '1

    9

    101110010

    100010011

    '
  - '1

    9

    111010000

    000010010

    '
  - '1

    9

    010001010

    000100000

    '
  - '1

    9

    011010010

    101100010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000010

    000000000000000000000000011000000010000000000000000000000010

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    0111

    0110

    6

    010101

    101010

    '
  - '1

    9

    001101010

    000110000

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000001000000000000000011000000000000000000000000000000010

    '
  - '1

    60

    000000000000000100000000000000000010000000000000000000000000

    000000000000000000000000011000000000000000000000000000100010

    '
  - '4

    3

    010

    000

    4

    0011

    0100

    4

    1111

    0110

    6

    010110

    101010

    '
  - '1

    9

    001000010

    100000000

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000000000010

    000000000000000000000000000000000000000000000001000000000010

    '
  - '4

    3

    000

    010

    4

    0011

    1100

    4

    0111

    1110

    6

    010100

    101010

    '
  - '1

    60

    000000000000000000000000000000000000000010000010000000001010

    000000000000000000000000000000000000000000000000000000000010

    '
  - '1

    9

    001100011

    000000000

    '
  - '1

    9

    011110011

    000110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    0110

    6

    010111

    101000

    '
  - '4

    3

    000

    000

    4

    0011

    0000

    4

    0011

    1110

    6

    010001

    101110

    '
  - '4

    3

    000

    000

    4

    0010

    0100

    4

    1011

    0110

    6

    010101

    101010

    '
  - '1

    7

    101010010

    101100010

    '
  - '1

    9

    001111000

    000110000

    '
  - '1

    9

    111010110

    111100010

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000001000010

    000000000000000000000000000000000000000000000000000000000110

    '
  - '1

    60

    000000000000000000010000000000000000000010000000000000001010

    000000000010000000000000000000000000000000000000000000000010

    '
  - '1

    9

    001010010

    101111010

    '
  - '1

    9

    101110010

    101000000

    '
  - '1

    9

    011000010

    000110111

    '
  - '1

    9

    001010110

    000110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    1110

    6

    110111

    101010

    '
  - '1

    6

    001010110

    111100010

    '
  - '1

    9

    001000011

    000110000

    '
  - '4

    3

    000

    000

    4

    0011

    0100

    4

    1011

    0110

    6

    000101

    101000

    '
  - '1

    9

    101000000

    101100110

    '
  - '1

    60

    000000000000000000000010000000000010000000000000000000000000

    000000001000000000000000011000000000000000000000000010000010

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000000

    000000000000000000000000011000000110000000000000000000110010

    '
  - '1

    8

    011010010

    000000000

    '
  - '1

    9

    111110010

    101010001

    '
  - '1

    9

    001100011

    010010000

    '
  - '4

    3

    000

    000

    4

    0001

    0100

    4

    1011

    1110

    6

    010111

    111010

    '
  - '1

    9

    001010110

    001100000

    '
  - '1

    9

    001101001

    001110000

    '
  - '1

    8

    111010000

    101100110

    '
  - '1

    60

    000000000000100000000000000000000000000000000000000000000011

    000000000000001000000000010000000000000000000000000000000110

    '
  - '1

    9

    111101010

    101010000

    '
  - '1

    9

    000100010

    010010010

    '
  - '1

    9

    001000010

    000111000

    '
  - '1

    8

    111010000

    001100110

    '
  - '1

    60

    000000000000000000000010000000000010000000000000000000000000

    000000001010000000000000011000000000000000000000000010000110

    '
  - '1

    9

    001010110

    101000000

    '
  - '1

    8

    101010101

    001100110

    '
  - '1

    9

    001010111

    111000001

    '
  - '1

    60

    100000010000000000000000000000000010000000000000100000000001

    000000000000010000000000011000000010000000000000000000110010

    '
  - '1

    9

    000000010

    001000000

    '
  - '1

    9

    000000010

    001100000

    '
  - '1

    60

    000000000000000000000000000000000000000000000000000000000010

    000000000000010000100000000000000000000000000000000000000010

    '
  - '1

    60

    000000000000000000000000000000000000000010000000000000000010

    000000000000000000100000000000000000010000000000000000000010

    '
  - '1

    9

    001111010

    000100000

    '
  - '1

    9

    001110010

    110110010

    '
  - '1

    9

    011111010

    000010010

    '
  - '1

    9

    101110010

    000110011

    '
  - '1

    9

    000100001

    000000000

    '
  - '1

    60

    000000000000000001000000000000000000000000000000010000000010

    000000000000000000000000001000000000000000000000000000000010

    '
  - '1

    9

    101110010

    000010011

    '
  - '1

    9

    011010010

    101100000

    '
  - '1

    60

    000000000000000000000000000000000010000000000000000000000010

    000000000000000000000000011000000010000000000000000000010010

    '
  output:
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    YES

    NO

    YES

    '
  - 'YES

    NO

    NO

    NO

    '
  - 'NO

    YES

    NO

    NO

    '
  - 'YES

    NO

    NO

    YES

    '
  - 'YES

    NO

    YES

    NO

    '
  - 'NO

    NO

    NO

    NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    YES

    NO

    NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'YES

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
  - 'NO

    '
timeout: 2.0
