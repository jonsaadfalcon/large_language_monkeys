prompt: "Q: Write python code to solve the following coding problem that obeys the\
  \ constraints and passes the example test cases. The output code needs to read from\
  \ and write to standard IO. Please wrap your code answer using ```:\nYou are given\
  \ string s of length n consisting of 0-s and 1-s. You build an infinite string t\
  \ as a concatenation of an infinite number of strings s, or t = ssss ... For example,\
  \ if s = 10010, then t = 100101001010010...\n\nCalculate the number of prefixes\
  \ of t with balance equal to x. The balance of some string q is equal to cnt_{0,\
  \ q} - cnt_{1, q}, where cnt_{0, q} is the number of occurrences of 0 in q, and\
  \ cnt_{1, q} is the number of occurrences of 1 in q. The number of such prefixes\
  \ can be infinite; if it is so, you must say that.\n\nA prefix is a string consisting\
  \ of several first letters of a given string, without any reorders. An empty prefix\
  \ is also a valid prefix. For example, the string \"abcd\" has 5 prefixes: empty\
  \ string, \"a\", \"ab\", \"abc\" and \"abcd\".\n\nInput\n\nThe first line contains\
  \ the single integer T (1 \u2264 T \u2264 100) \u2014 the number of test cases.\n\
  \nNext 2T lines contain descriptions of test cases \u2014 two lines per test case.\
  \ The first line contains two integers n and x (1 \u2264 n \u2264 10^5, -10^9 \u2264\
  \ x \u2264 10^9) \u2014 the length of string s and the desired balance, respectively.\n\
  \nThe second line contains the binary string s (|s| = n, s_i \u2208 \\{0, 1\\}).\n\
  \nIt's guaranteed that the total sum of n doesn't exceed 10^5.\n\nOutput\n\nPrint\
  \ T integers \u2014 one per test case. For each test case print the number of prefixes\
  \ or -1 if there is an infinite number of such prefixes.\n\nExample\n\nInput\n\n\
  \n4\n6 10\n010010\n5 3\n10101\n1 0\n0\n2 0\n01\n\n\nOutput\n\n\n3\n0\n1\n-1\n\n\
  Note\n\nIn the first test case, there are 3 good prefixes of t: with length 28,\
  \ 30 and 32.\nA: ```import math\ntt=int(input())\nfor i in range(tt):\n    n,x=map(int,input().split())\n\
  \    s=input()\n    a=1\n    b={}\n    def bind(x):\n        return -((2*x)-1)\n\
  \    if x<0:\n        a=-1\n        x=-x\n    sbal=0\n    for i in s:\n        sbal+=(bind(int(i))*a)\n\
  \        b[sbal]=b.get(sbal,0)+1\n    ans=0\n    if sbal==0:\n        if b.get(x,0)\
  \ != 0:\n            print(-1)\n        else:\n            print(0)\n        continue\n\
  \    elif sbal>0:\n        add = x - max(b)\n        if add > 0:\n            x-=math.ceil(add/sbal)*sbal\n\
  \        for i in range(x,min(b)-sbal,-sbal):\n            ans+=b.get(i,0)\n   \
  \ else:\n        dec = min(b) - x\n        if dec > 0:\n            x+=math.ceil(dec/sbal)*sbal\n\
  \        for i in range(x,max(b)-sbal,-sbal):\n            ans+=b.get(i,0)\n   \
  \ if x==0:\n        ans+=1\n    print(ans)```\nQ: Write python code to solve the\
  \ following coding problem that obeys the constraints and passes the example test\
  \ cases. The output code needs to read from and write to standard IO. Please wrap\
  \ your code answer using ```:\nMr. Funt now lives in a country with a very specific\
  \ tax laws. The total income of mr. Funt during this year is equal to n (n \u2265\
  \ 2) burles and the amount of tax he has to pay is calculated as the maximum divisor\
  \ of n (not equal to n, of course). For example, if n = 6 then Funt has to pay 3\
  \ burles, while for n = 25 he needs to pay 5 and if n = 2 he pays only 1 burle.\n\
  \nAs mr. Funt is a very opportunistic person he wants to cheat a bit. In particular,\
  \ he wants to split the initial n in several parts n1 + n2 + ... + nk = n (here\
  \ k is arbitrary, even k = 1 is allowed) and pay the taxes for each part separately.\
  \ He can't make some part equal to 1 because it will reveal him. So, the condition\
  \ ni \u2265 2 should hold for all i from 1 to k.\n\nOstap Bender wonders, how many\
  \ money Funt has to pay (i.e. minimal) if he chooses and optimal way to split n\
  \ in parts.\n\nInput\n\nThe first line of the input contains a single integer n\
  \ (2 \u2264 n \u2264 2\xB7109) \u2014 the total year income of mr. Funt.\n\nOutput\n\
  \nPrint one integer \u2014 minimum possible number of burles that mr. Funt has to\
  \ pay as a tax.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n2\n\n\nInput\n\n27\n\n\n\
  Output\n\n3\nA: ```def isPrime(n):\n    i=2\n    while i*i<=n:\n        if n%i==0:\n\
  \            return False\n        i+=1\n    return True\n\nn=int(input())\nif isPrime(n):\n\
  \    print(1)\nelif n&1==0:\n    print(2)\nelse:\n    if isPrime(n-2):\n       \
  \ print(2)\n    else:\n        print(3)```\nQ: Write python code to solve the following\
  \ coding problem that obeys the constraints and passes the example test cases. The\
  \ output code needs to read from and write to standard IO. Please wrap your code\
  \ answer using ```:\nEl Psy Kongroo.\n\nOmkar is watching Steins;Gate.\n\nIn Steins;Gate,\
  \ Okabe Rintarou needs to complete n tasks (1 \u2264 n \u2264 2 \u22C5 10^5). Unfortunately,\
  \ he doesn't know when he needs to complete the tasks.\n\nInitially, the time is\
  \ 0. Time travel will now happen according to the following rules:\n\n  * For each\
  \ k = 1, 2, \u2026, n, Okabe will realize at time b_k that he was supposed to complete\
  \ the k-th task at time a_k (a_k < b_k). \n\n  * When he realizes this, if k-th\
  \ task was already completed at time a_k, Okabe keeps the usual flow of time. Otherwise,\
  \ he time travels to time a_k then immediately completes the task.\n\n  * If Okabe\
  \ time travels to time a_k, all tasks completed after this time will become incomplete\
  \ again. That is, for every j, if a_j>a_k, the j-th task will become incomplete,\
  \ if it was complete (if it was incomplete, nothing will change).\n\n  * Okabe has\
  \ bad memory, so he can time travel to time a_k only immediately after getting to\
  \ time b_k and learning that he was supposed to complete the k-th task at time a_k.\
  \ That is, even if Okabe already had to perform k-th task before, he wouldn't remember\
  \ it before stumbling on the info about this task at time b_k again.\n\n\n\n\nPlease\
  \ refer to the notes for an example of time travelling.\n\nThere is a certain set\
  \ s of tasks such that the first moment that all of the tasks in s are simultaneously\
  \ completed (regardless of whether any other tasks are currently completed), a funny\
  \ scene will take place. Omkar loves this scene and wants to know how many times\
  \ Okabe will time travel before this scene takes place. Find this number modulo\
  \ 10^9 + 7. It can be proven that eventually all n tasks will be completed and so\
  \ the answer always exists.\n\nInput\n\nThe first line contains an integer n (1\
  \ \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number of tasks that Okabe needs to\
  \ complete.\n\nn lines follow. The k-th of these lines contain two integers a_k\
  \ and b_k (1 \u2264 a_k < b_k \u2264 2n) \u2014 the time at which Okabe needs to\
  \ complete the k-th task and the time that he realizes this respectively. All 2n\
  \ of these times are distinct (so every time from 1 to 2n inclusive appears exactly\
  \ once in the input).\n\nThe next line contains a single integer t (1 \u2264 t \u2264\
  \ n) \u2014 the size of the set s of tasks that lead to the funny scene.\n\nThe\
  \ last line contains t integers s_1, s_2, \u2026, s_t \u2014 (1 \u2264 s_k \u2264\
  \ n, the numbers s_1, s_2, \u2026, s_t are distinct) \u2014 the set s of tasks.\n\
  \nOutput\n\nOutput a single integer \u2014 the number of times that Okabe time travels\
  \ until all tasks in the set s are simultaneously completed, modulo 10^9 + 7.\n\n\
  Examples\n\nInput\n\n\n2\n1 4\n2 3\n2\n1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n2\n\
  1 4\n2 3\n1\n1\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n1\n1 2\n1\n1\n\n\nOutput\n\n\n\
  1\n\n\nInput\n\n\n6\n10 12\n3 7\n4 6\n2 9\n5 8\n1 11\n3\n2 4 6\n\n\nOutput\n\n\n\
  17\n\n\nInput\n\n\n16\n31 32\n3 26\n17 19\n4 24\n1 28\n15 21\n12 16\n18 29\n20 23\n\
  7 8\n11 14\n9 22\n6 30\n5 10\n25 27\n2 13\n6\n3 8 2 5 12 11\n\n\nOutput\n\n\n138\n\
  \nNote\n\nFor the first sample, all tasks need to be completed in order for the\
  \ funny scene to occur.\n\nInitially, the time is 0. Nothing happens until time\
  \ 3, when Okabe realizes that he should have done the 2-nd task at time 2. He then\
  \ time travels to time 2 and completes the task.\n\nAs the task is done now, he\
  \ does not time travel again when the time is again 3. However, at time 4, he travels\
  \ to time 1 to complete the 1-st task.\n\nThis undoes the 2-nd task. This means\
  \ that the 2-nd task is not currently completed, meaning that the funny scene will\
  \ not occur at this point even though the 1-st task is currently completed and Okabe\
  \ had previously completed the 2-nd task.\n\nOnce it is again time 3 he travels\
  \ back to time 2 once more and does the 2-nd task again.\n\nNow all tasks are complete,\
  \ with Okabe having time travelled 3 times.\n\nThe second sample has the same tasks\
  \ for Okabe to complete. However, this time the funny scene only needs the first\
  \ task to be completed in order to occur. From reading the above sample you can\
  \ see that this occurs once Okabe has time travelled 2 times.\nA:"
question: "El Psy Kongroo.\n\nOmkar is watching Steins;Gate.\n\nIn Steins;Gate, Okabe\
  \ Rintarou needs to complete n tasks (1 \u2264 n \u2264 2 \u22C5 10^5). Unfortunately,\
  \ he doesn't know when he needs to complete the tasks.\n\nInitially, the time is\
  \ 0. Time travel will now happen according to the following rules:\n\n  * For each\
  \ k = 1, 2, \u2026, n, Okabe will realize at time b_k that he was supposed to complete\
  \ the k-th task at time a_k (a_k < b_k). \n\n  * When he realizes this, if k-th\
  \ task was already completed at time a_k, Okabe keeps the usual flow of time. Otherwise,\
  \ he time travels to time a_k then immediately completes the task.\n\n  * If Okabe\
  \ time travels to time a_k, all tasks completed after this time will become incomplete\
  \ again. That is, for every j, if a_j>a_k, the j-th task will become incomplete,\
  \ if it was complete (if it was incomplete, nothing will change).\n\n  * Okabe has\
  \ bad memory, so he can time travel to time a_k only immediately after getting to\
  \ time b_k and learning that he was supposed to complete the k-th task at time a_k.\
  \ That is, even if Okabe already had to perform k-th task before, he wouldn't remember\
  \ it before stumbling on the info about this task at time b_k again.\n\n\n\n\nPlease\
  \ refer to the notes for an example of time travelling.\n\nThere is a certain set\
  \ s of tasks such that the first moment that all of the tasks in s are simultaneously\
  \ completed (regardless of whether any other tasks are currently completed), a funny\
  \ scene will take place. Omkar loves this scene and wants to know how many times\
  \ Okabe will time travel before this scene takes place. Find this number modulo\
  \ 10^9 + 7. It can be proven that eventually all n tasks will be completed and so\
  \ the answer always exists.\n\nInput\n\nThe first line contains an integer n (1\
  \ \u2264 n \u2264 2 \u22C5 10^5) \u2014 the number of tasks that Okabe needs to\
  \ complete.\n\nn lines follow. The k-th of these lines contain two integers a_k\
  \ and b_k (1 \u2264 a_k < b_k \u2264 2n) \u2014 the time at which Okabe needs to\
  \ complete the k-th task and the time that he realizes this respectively. All 2n\
  \ of these times are distinct (so every time from 1 to 2n inclusive appears exactly\
  \ once in the input).\n\nThe next line contains a single integer t (1 \u2264 t \u2264\
  \ n) \u2014 the size of the set s of tasks that lead to the funny scene.\n\nThe\
  \ last line contains t integers s_1, s_2, \u2026, s_t \u2014 (1 \u2264 s_k \u2264\
  \ n, the numbers s_1, s_2, \u2026, s_t are distinct) \u2014 the set s of tasks.\n\
  \nOutput\n\nOutput a single integer \u2014 the number of times that Okabe time travels\
  \ until all tasks in the set s are simultaneously completed, modulo 10^9 + 7.\n\n\
  Examples\n\nInput\n\n\n2\n1 4\n2 3\n2\n1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n2\n\
  1 4\n2 3\n1\n1\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n1\n1 2\n1\n1\n\n\nOutput\n\n\n\
  1\n\n\nInput\n\n\n6\n10 12\n3 7\n4 6\n2 9\n5 8\n1 11\n3\n2 4 6\n\n\nOutput\n\n\n\
  17\n\n\nInput\n\n\n16\n31 32\n3 26\n17 19\n4 24\n1 28\n15 21\n12 16\n18 29\n20 23\n\
  7 8\n11 14\n9 22\n6 30\n5 10\n25 27\n2 13\n6\n3 8 2 5 12 11\n\n\nOutput\n\n\n138\n\
  \nNote\n\nFor the first sample, all tasks need to be completed in order for the\
  \ funny scene to occur.\n\nInitially, the time is 0. Nothing happens until time\
  \ 3, when Okabe realizes that he should have done the 2-nd task at time 2. He then\
  \ time travels to time 2 and completes the task.\n\nAs the task is done now, he\
  \ does not time travel again when the time is again 3. However, at time 4, he travels\
  \ to time 1 to complete the 1-st task.\n\nThis undoes the 2-nd task. This means\
  \ that the 2-nd task is not currently completed, meaning that the funny scene will\
  \ not occur at this point even though the 1-st task is currently completed and Okabe\
  \ had previously completed the 2-nd task.\n\nOnce it is again time 3 he travels\
  \ back to time 2 once more and does the 2-nd task again.\n\nNow all tasks are complete,\
  \ with Okabe having time travelled 3 times.\n\nThe second sample has the same tasks\
  \ for Okabe to complete. However, this time the funny scene only needs the first\
  \ task to be completed in order to occur. From reading the above sample you can\
  \ see that this occurs once Okabe has time travelled 2 times."
samples:
- " ```from collections import defaultdict\nfrom math import inf\nn=int(input())\n\
  d=defaultdict(int)\nfor _ in range(n):\n    a,b=map(int,input().split())\n    d[a]+=1\n\
  \    d[b+1]-=1\ns=int(input())\nss=list(map(int,input().split()))\nss.sort()\nans=0\n\
  for i in range(len(ss)-1):\n    ans+=d[ss[i+1]]\nprint(ans%10**9+7)``` Q:"
- " ```from collections import defaultdict\nfrom math import inf\n\nn = int(input())\n\
  a = [list(map(int, input().split())) for _ in range(n)]\nt = int(input())\ns = list(map(int,\
  \ input().split()))\n\na.sort()\ns.sort()\n\nd = defaultdict(int)\nfor i in range(t):\n\
  \    d[s[i]] = 1\n\nans = 0\nfor i in range(n):\n    while a[i][0] < a[i][1]:\n\
  \        a[i][0] += 1\n    if d[a[i][1]]:\n        ans += 1\n    d[a[i][1]] = 0\n\
  \nprint(ans % (10**9 + 7))```\nQ:"
test_cases:
  input:
  - '6

    10 12

    3 7

    4 6

    2 9

    5 8

    1 11

    3

    2 4 6

    '
  - '1

    1 2

    1

    1

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    6

    3 8 2 5 12 11

    '
  - '2

    1 4

    2 3

    2

    1 2

    '
  - '2

    1 4

    2 3

    1

    1

    '
  - '50

    38 51

    26 42

    11 22

    9 16

    34 54

    19 49

    36 88

    66 92

    48 87

    23 86

    14 41

    45 81

    30 83

    13 24

    73 82

    10 96

    80 100

    5 97

    47 85

    43 55

    50 52

    3 32

    6 17

    31 89

    37 67

    56 64

    63 91

    33 75

    20 68

    15 27

    18 78

    4 40

    60 65

    69 99

    74 93

    58 94

    35 53

    1 12

    29 95

    46 79

    7 72

    44 76

    2 77

    28 98

    8 39

    57 70

    62 71

    59 84

    21 90

    25 61

    27

    28 40 34 42 2 9 11 50 23 19 46 35 17 27 29 5 32 30 41 39 20 8 48 26 10 14 16

    '
  - '20

    10 32

    7 29

    23 26

    4 25

    28 34

    21 38

    13 31

    18 22

    11 14

    9 35

    8 12

    5 40

    1 16

    17 20

    2 3

    27 37

    19 33

    24 30

    6 39

    15 36

    15

    5 8 13 19 9 2 6 10 1 7 11 17 20 3 16

    '
  - '18

    3 25

    26 30

    2 22

    13 27

    7 31

    19 34

    14 18

    16 28

    32 33

    29 35

    12 17

    15 21

    5 8

    6 23

    1 9

    4 36

    10 11

    20 24

    1

    13

    '
  - '17

    8 29

    10 16

    11 19

    4 28

    15 25

    9 34

    21 24

    17 32

    3 30

    22 31

    7 18

    2 6

    1 5

    14 33

    13 23

    12 27

    20 26

    8

    9 5 17 11 14 7 3 4

    '
  - '30

    2 16

    47 60

    28 31

    3 37

    20 34

    25 59

    5 26

    4 8

    39 46

    6 14

    38 42

    27 55

    36 58

    12 48

    18 50

    40 57

    19 29

    11 45

    17 54

    13 22

    1 52

    7 15

    33 56

    21 44

    23 41

    32 43

    24 53

    9 49

    30 35

    10 51

    30

    29 20 9 25 19 15 1 6 27 12 18 23 14 24 28 10 13 26 21 30 2 3 17 16 7 8 11 4 5
    22

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    7

    17 5 13 1 3 19 21

    '
  - '40

    5 35

    8 66

    33 51

    56 70

    43 78

    44 57

    3 20

    25 71

    7 64

    21 40

    24 28

    47 60

    61 72

    38 53

    16 63

    2 58

    41 52

    26 74

    11 48

    14 15

    22 75

    46 68

    29 31

    9 10

    23 77

    19 80

    62 73

    13 37

    6 30

    39 67

    55 59

    50 76

    17 79

    27 54

    18 42

    45 49

    4 34

    12 36

    32 65

    1 69

    20

    23 7 8 35 31 32 37 27 25 40 1 9 18 14 11 29 26 13 12 24

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    3

    5 1 13

    '
  - '50

    38 51

    26 42

    11 22

    9 16

    34 54

    19 49

    36 88

    66 92

    48 87

    23 86

    14 41

    45 81

    30 83

    13 24

    73 82

    10 96

    80 100

    5 97

    47 85

    43 55

    50 52

    3 32

    6 17

    31 89

    37 67

    56 64

    63 91

    33 75

    20 68

    15 27

    18 78

    4 40

    60 65

    69 99

    74 93

    58 94

    35 53

    1 12

    29 95

    46 79

    7 72

    44 76

    2 77

    28 98

    8 39

    57 70

    62 71

    59 84

    21 90

    25 61

    27

    28 40 34 22 2 9 11 50 23 19 46 35 17 27 29 5 32 30 41 39 20 8 48 26 10 14 16

    '
  - '17

    8 29

    10 16

    11 19

    4 28

    15 25

    9 34

    21 24

    17 32

    3 30

    22 31

    7 18

    2 6

    1 5

    14 33

    13 23

    12 27

    20 26

    8

    8 5 17 11 14 7 3 4

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    3

    5 1 14

    '
  - '18

    3 25

    26 30

    2 22

    13 27

    7 31

    19 34

    14 18

    16 28

    32 33

    29 35

    12 17

    15 21

    5 8

    6 23

    1 9

    4 36

    10 11

    20 24

    1

    3

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    3

    8 1 14

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    3

    8 2 14

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 19 21

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 2 5 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    6

    3 8 1 5 12 11

    '
  - '2

    1 4

    2 3

    1

    1 2

    '
  - '2

    1 4

    2 3

    1

    2

    '
  - '20

    10 32

    7 29

    23 26

    4 25

    28 34

    21 38

    13 31

    18 22

    11 14

    9 35

    8 12

    5 40

    1 16

    17 20

    2 3

    27 37

    19 33

    24 30

    6 39

    15 36

    15

    5 8 13 19 9 2 6 10 1 7 18 17 20 3 16

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    2

    5 1 14

    '
  - '18

    3 25

    26 30

    2 22

    13 27

    7 31

    19 34

    14 18

    16 28

    32 33

    29 35

    12 17

    15 21

    5 8

    6 23

    1 9

    4 36

    10 11

    20 24

    1

    2

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 6 1 3 19 38

    '
  - '6

    10 12

    3 7

    4 6

    2 9

    5 8

    1 11

    2

    2 4 6

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    1

    5 1 14

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 3 13 1 3 19 38

    '
  - '17

    8 29

    10 16

    11 19

    4 28

    15 25

    9 34

    21 24

    17 32

    3 30

    22 31

    7 18

    2 6

    1 5

    14 33

    13 23

    12 27

    20 26

    8

    8 5 17 11 12 7 3 4

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 9 6 9 12 11

    '
  - '6

    10 12

    3 7

    4 6

    2 9

    5 8

    1 11

    2

    2 6 6

    '
  - '40

    5 35

    8 66

    33 51

    56 70

    43 78

    44 57

    3 20

    25 71

    7 64

    21 40

    24 28

    47 60

    61 72

    38 53

    16 63

    2 58

    41 52

    26 74

    11 48

    14 15

    22 75

    46 68

    29 31

    9 10

    23 77

    19 80

    62 73

    13 37

    6 30

    39 67

    55 59

    50 76

    17 79

    27 54

    18 42

    45 49

    4 34

    12 36

    32 65

    1 69

    20

    5 7 8 35 31 32 37 27 25 40 1 9 18 14 11 29 26 13 12 24

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    3

    17 5 13 1 3 19 21

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    14 5 13 1 3 19 38

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    2

    8 1 14

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 5 6 9 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    3

    3 5 6 9 12 11

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 9 6 1 3 19 38

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 4 1 4 19 38

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    3

    6 1 14

    '
  - '50

    38 51

    26 42

    11 22

    9 16

    34 54

    19 49

    36 88

    66 92

    48 87

    23 86

    14 41

    45 81

    30 83

    13 24

    73 82

    10 96

    80 100

    5 97

    47 85

    43 55

    50 52

    3 32

    6 17

    31 89

    37 67

    56 64

    63 91

    33 75

    20 68

    15 27

    18 78

    4 40

    60 65

    69 99

    74 93

    58 94

    35 53

    1 12

    29 95

    46 79

    7 72

    44 76

    2 77

    28 98

    8 39

    57 70

    62 71

    59 84

    21 90

    25 61

    27

    28 40 34 42 2 9 11 50 23 19 46 35 17 27 29 5 32 30 49 39 20 8 48 26 10 14 16

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    6

    3 8 2 5 14 11

    '
  - '2

    1 4

    2 3

    1

    1 1

    '
  - '2

    1 4

    2 3

    1

    2 1

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 19 38

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 4 5 12 11

    '
  - '2

    1 4

    2 3

    1

    2 2

    '
  - '20

    10 32

    7 29

    23 26

    4 25

    28 34

    21 38

    13 31

    18 22

    11 14

    9 35

    8 12

    5 40

    1 16

    17 20

    2 3

    27 37

    19 33

    24 30

    6 39

    15 36

    15

    5 8 13 19 9 2 6 14 1 7 18 17 20 3 16

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 4 9 12 11

    '
  - '20

    10 32

    7 29

    23 26

    4 25

    28 34

    21 38

    13 31

    18 22

    11 14

    9 35

    8 12

    5 40

    1 16

    17 20

    2 3

    27 37

    19 33

    24 30

    6 39

    15 36

    15

    5 8 13 19 9 2 6 14 1 7 18 17 20 3 4

    '
  - '20

    10 32

    7 29

    23 26

    4 25

    28 34

    21 38

    13 31

    18 22

    11 14

    9 35

    8 12

    5 40

    1 16

    17 20

    2 3

    27 37

    19 33

    24 30

    6 39

    15 36

    15

    5 11 13 19 9 2 6 14 1 7 18 17 20 3 16

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 6 9 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    6 8 2 5 12 11

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    2

    5 1 16

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 1 19 21

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 2 5 12 19

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    4 8 4 5 12 11

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 6 1 4 19 38

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 3 6 1 3 19 38

    '
  - '18

    3 25

    26 30

    2 22

    13 27

    7 31

    19 34

    14 18

    16 28

    32 33

    29 35

    12 17

    15 21

    5 8

    6 23

    1 10

    4 36

    10 11

    20 24

    1

    13

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 35 38

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    2 8 4 9 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    2 8 2 5 12 19

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 3 13 1 3 19 55

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 3 13 1 3 19 110

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 2 5 12 12

    '
  - '2

    1 4

    2 3

    1

    2 0

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 1 9 12 11

    '
  - '20

    10 32

    7 29

    23 26

    4 25

    28 34

    21 38

    13 31

    18 22

    11 14

    9 35

    8 12

    5 40

    1 16

    17 20

    2 3

    27 37

    19 33

    24 30

    6 39

    15 36

    15

    5 8 13 19 9 2 6 11 1 7 18 17 20 3 4

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 23 38

    '
  - '50

    38 51

    26 42

    11 22

    9 16

    34 54

    19 49

    36 88

    66 92

    48 87

    23 86

    14 41

    45 81

    30 83

    13 24

    73 82

    10 96

    80 100

    5 97

    47 85

    43 55

    50 52

    3 32

    6 17

    31 89

    37 67

    56 64

    63 91

    33 75

    20 68

    15 27

    18 78

    4 40

    60 65

    69 99

    74 93

    58 94

    35 53

    1 12

    29 95

    46 79

    7 72

    44 76

    2 77

    28 98

    8 39

    57 70

    62 71

    59 84

    21 90

    25 61

    27

    28 40 34 22 2 9 11 50 23 19 46 35 17 38 29 5 32 30 41 39 20 8 48 26 10 14 16

    '
  - '50

    38 51

    26 42

    11 22

    9 16

    34 54

    19 49

    36 88

    66 92

    48 87

    23 86

    14 41

    45 81

    30 83

    13 24

    73 82

    10 96

    80 100

    5 97

    47 85

    43 55

    50 52

    3 32

    6 17

    31 89

    37 67

    56 64

    63 91

    33 75

    20 68

    15 27

    18 78

    4 40

    60 65

    69 99

    74 93

    58 94

    35 53

    1 12

    29 95

    46 79

    7 72

    44 76

    2 77

    28 98

    8 39

    57 70

    62 71

    59 84

    21 90

    25 61

    27

    28 40 34 42 2 18 11 50 23 19 46 35 17 27 29 5 32 30 49 39 20 8 48 26 10 14 16

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 2 5 4 19

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 1 9 7 11

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    3

    17 5 13 1 0 19 21

    '
  - '50

    38 51

    26 42

    11 22

    9 16

    34 54

    19 49

    36 88

    66 92

    48 87

    23 86

    14 41

    45 81

    30 83

    13 24

    73 82

    10 96

    80 100

    5 97

    47 85

    43 55

    50 52

    3 32

    6 17

    31 89

    37 67

    56 64

    63 91

    33 75

    20 68

    15 27

    18 78

    4 40

    60 65

    69 99

    74 93

    58 94

    35 53

    1 12

    29 95

    46 79

    7 72

    44 76

    2 77

    28 98

    8 39

    57 70

    62 71

    59 84

    21 90

    25 61

    27

    28 40 34 42 2 18 11 50 23 19 46 35 17 27 29 5 32 30 49 47 20 8 48 26 10 14 16

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    14 5 13 1 3 19 22

    '
  - '18

    3 25

    26 30

    2 22

    13 27

    7 29

    19 34

    14 18

    16 28

    32 33

    29 35

    12 17

    15 21

    5 8

    6 23

    1 9

    4 36

    10 11

    20 24

    1

    13

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    6

    3 8 2 5 14 12

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 8 5 5 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    3

    3 8 6 9 12 11

    '
  - '19

    11 34

    15 21

    12 19

    10 23

    16 30

    5 32

    2 27

    1 13

    14 38

    22 28

    18 33

    36 37

    3 6

    17 20

    25 35

    7 9

    24 31

    4 8

    26 29

    1

    5 0 14

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 70 38

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 23 12

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    3

    17 5 13 1 2 19 21

    '
  - '21

    7 18

    19 32

    22 38

    27 39

    4 41

    15 20

    14 35

    3 42

    6 30

    26 34

    25 31

    12 29

    5 37

    9 16

    8 13

    10 33

    1 28

    24 36

    17 40

    11 21

    2 23

    4

    17 5 13 1 3 70 9

    '
  - '2

    1 4

    2 3

    1

    1 0

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    4

    6 8 2 5 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    4 8 4 5 12 21

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    3

    3 8 1 9 12 11

    '
  - '16

    31 32

    3 26

    17 19

    4 24

    1 28

    15 21

    12 16

    18 29

    20 23

    7 8

    11 14

    9 22

    6 30

    5 10

    25 27

    2 13

    2

    3 9 6 9 12 3

    '
  output:
  - '17

    '
  - '1

    '
  - '138

    '
  - '3

    '
  - '2

    '
  - '9235

    '
  - '161

    '
  - '1

    '
  - '117

    '
  - '641

    '
  - '240

    '
  - '2526

    '
  - '69

    '
  - '9235

    '
  - '122

    '
  - '70

    '
  - '8

    '
  - '64

    '
  - '11

    '
  - '184

    '
  - '138

    '
  - '159

    '
  - '2

    '
  - '1

    '
  - '161

    '
  - '69

    '
  - '38

    '
  - '143

    '
  - '7

    '
  - '32

    '
  - '115

    '
  - '110

    '
  - '19

    '
  - '12

    '
  - '2545

    '
  - '181

    '
  - '186

    '
  - '62

    '
  - '79

    '
  - '81

    '
  - '44

    '
  - '231

    '
  - '64

    '
  - '9235

    '
  - '138

    '
  - '2

    '
  - '1

    '
  - '184

    '
  - '138

    '
  - '1

    '
  - '161

    '
  - '138

    '
  - '159

    '
  - '161

    '
  - '138

    '
  - '138

    '
  - '69

    '
  - '184

    '
  - '138

    '
  - '138

    '
  - '143

    '
  - '115

    '
  - '1

    '
  - '184

    '
  - '138

    '
  - '138

    '
  - '115

    '
  - '115

    '
  - '138

    '
  - '1

    '
  - '138

    '
  - '159

    '
  - '184

    '
  - '9235

    '
  - '9235

    '
  - '138

    '
  - '138

    '
  - '181

    '
  - '9235

    '
  - '186

    '
  - '1

    '
  - '138

    '
  - '138

    '
  - '138

    '
  - '32

    '
  - '184

    '
  - '184

    '
  - '181

    '
  - '184

    '
  - '2

    '
  - '138

    '
  - '138

    '
  - '159

    '
  - '19

    '
timeout: 2.0
